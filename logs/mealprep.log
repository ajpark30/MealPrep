[INFO ] 2019-05-12 18:21:05.023 [http-nio-8080-exec-10] SearchGrocerylist - ********** Grabbing User Name to get all the users Grocery Lists: LordOfStars
[INFO ] 2019-05-12 18:21:05.035 [http-nio-8080-exec-10] GenericDao - **********Query database using the User Name: LordOfStars
[INFO ] 2019-05-12 18:21:09.080 [http-nio-8080-exec-10] GenericDao - Found User Name: [User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}]
[INFO ] 2019-05-12 18:21:09.087 [http-nio-8080-exec-10] GenericDao - **********Querying grocery list by user id: 16
[INFO ] 2019-05-12 18:21:09.114 [http-nio-8080-exec-10] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 11, grocerylistName = Lord's Test List, user_id = 16, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:21:09.114 [http-nio-8080-exec-10] SearchGrocerylist - ********** Grocery List Object by User Name Results: [GroceryLists{ groceryListId = 11, grocerylistName = Lord's Test List, user_id = 16, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:21:34.769 [http-nio-8080-exec-6] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: LordOfStars
[INFO ] 2019-05-12 18:21:34.770 [http-nio-8080-exec-6] GenericDao - **********Query database using the User Name: LordOfStars
[INFO ] 2019-05-12 18:21:34.789 [http-nio-8080-exec-6] GenericDao - Found User Name: [User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}]
[INFO ] 2019-05-12 18:21:34.790 [http-nio-8080-exec-6] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:21:34.827 [http-nio-8080-exec-6] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:21:34.827 [http-nio-8080-exec-6] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:21:34.847 [http-nio-8080-exec-6] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:21:34.848 [http-nio-8080-exec-6] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 18:21:34.875 [http-nio-8080-exec-6] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 18:21:34.875 [http-nio-8080-exec-6] CreateGroceryList - **********Adding ingredients Onion, Carrots, Kale to the new/updated grocery list: Best Week
[INFO ] 2019-05-12 18:21:34.876 [http-nio-8080-exec-6] CreateGroceryList - **********Saving/Updating a Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Best Week, user_id = 16, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }----- For User: [User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}]
[INFO ] 2019-05-12 18:21:34.876 [http-nio-8080-exec-6] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Best Week, user_id = 16, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:32:16.551 [http-nio-8080-exec-7] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: LordOfStars
[INFO ] 2019-05-12 18:32:16.552 [http-nio-8080-exec-7] GenericDao - **********Query database using the User Name: LordOfStars
[INFO ] 2019-05-12 18:32:16.571 [http-nio-8080-exec-7] GenericDao - Found User Name: [User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}]
[INFO ] 2019-05-12 18:32:16.571 [http-nio-8080-exec-7] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:32:16.598 [http-nio-8080-exec-7] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:32:16.598 [http-nio-8080-exec-7] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:32:16.623 [http-nio-8080-exec-7] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:32:16.623 [http-nio-8080-exec-7] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 18:32:16.657 [http-nio-8080-exec-7] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 18:32:16.658 [http-nio-8080-exec-7] CreateGroceryList - **********Adding ingredients Onion, Carrots, Kale to the new/updated grocery list: Best Week
[INFO ] 2019-05-12 18:32:16.659 [http-nio-8080-exec-7] CreateGroceryList - **********Saving/Updating a Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Best Week, user_id = 16, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }----- For User: [User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}]
[INFO ] 2019-05-12 18:32:16.660 [http-nio-8080-exec-7] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Best Week, user_id = 16, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:35:58.504 [http-nio-8080-exec-1] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:35:58.591 [http-nio-8080-exec-1] GenericDao - **********Get All Query Found: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, User{userId = '18', firstName = 'Andrew', lastName = 'Park', userName = 'Apark', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 18:36:50.875 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:36:50.883 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 18:36:50.886 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:36:53.697 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:36:53.702 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 18:36:53.712 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 18:36:53.713 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 18:36:53.733 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}
[INFO ] 2019-05-12 18:36:53.734 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:36:53.734 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:36:53.831 [main] GenericDao - **********Entity inserted: GroceryLists{ groceryListId = 106, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:36:53.831 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:36:53.871 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 106, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:36:53.878 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:36:53.907 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 106, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:36:53.908 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:36:53.937 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 106, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:38:26.482 [http-nio-8080-exec-7] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: LordOfStars
[INFO ] 2019-05-12 18:38:26.482 [http-nio-8080-exec-7] GenericDao - **********Query database using the User Name: LordOfStars
[INFO ] 2019-05-12 18:38:26.499 [http-nio-8080-exec-7] GenericDao - Found User Name: [User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}]
[INFO ] 2019-05-12 18:38:26.499 [http-nio-8080-exec-7] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:38:26.525 [http-nio-8080-exec-7] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:38:26.526 [http-nio-8080-exec-7] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 18:38:26.546 [http-nio-8080-exec-7] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 18:38:26.547 [http-nio-8080-exec-7] GenericDao - **********Querying Exact Name: Pork Sausage (Sweet)
[INFO ] 2019-05-12 18:38:26.553 [http-nio-8080-exec-7] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}
[INFO ] 2019-05-12 18:38:26.553 [http-nio-8080-exec-7] CreateGroceryList - **********Adding ingredients Onion, Kale, Pork Sausage (Sweet) to the new/updated grocery list: Best Week
[INFO ] 2019-05-12 18:38:26.553 [http-nio-8080-exec-7] CreateGroceryList - **********Saving/Updating a Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Best Week, user_id = 16, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}]}, userRecipes = {[]}, user = {[]} }----- For User: [User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}]
[INFO ] 2019-05-12 18:38:26.554 [http-nio-8080-exec-7] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Best Week, user_id = 16, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:38:34.557 [http-nio-8080-exec-8] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: LordOfStars
[INFO ] 2019-05-12 18:38:34.558 [http-nio-8080-exec-8] GenericDao - **********Query database using the User Name: LordOfStars
[INFO ] 2019-05-12 18:38:34.570 [http-nio-8080-exec-8] GenericDao - Found User Name: [User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}]
[INFO ] 2019-05-12 18:38:34.571 [http-nio-8080-exec-8] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:38:34.592 [http-nio-8080-exec-8] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:38:34.592 [http-nio-8080-exec-8] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:38:34.609 [http-nio-8080-exec-8] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:38:34.610 [http-nio-8080-exec-8] GenericDao - **********Querying Exact Name: Pork Sausage (Sweet)
[INFO ] 2019-05-12 18:38:34.615 [http-nio-8080-exec-8] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}
[INFO ] 2019-05-12 18:38:34.615 [http-nio-8080-exec-8] CreateGroceryList - **********Adding ingredients Onion, Carrots, Pork Sausage (Sweet) to the new/updated grocery list: Best Week
[INFO ] 2019-05-12 18:38:34.615 [http-nio-8080-exec-8] CreateGroceryList - **********Saving/Updating a Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Best Week, user_id = 16, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}]}, userRecipes = {[]}, user = {[]} }----- For User: [User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}]
[INFO ] 2019-05-12 18:38:34.616 [http-nio-8080-exec-8] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Best Week, user_id = 16, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:39:44.630 [http-nio-8080-exec-9] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: LordOfStars
[INFO ] 2019-05-12 18:39:44.631 [http-nio-8080-exec-9] GenericDao - **********Query database using the User Name: LordOfStars
[INFO ] 2019-05-12 18:39:44.716 [http-nio-8080-exec-9] GenericDao - Found User Name: [User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}]
[INFO ] 2019-05-12 18:39:44.717 [http-nio-8080-exec-9] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:39:44.754 [http-nio-8080-exec-9] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:39:44.755 [http-nio-8080-exec-9] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:39:44.773 [http-nio-8080-exec-9] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:39:44.774 [http-nio-8080-exec-9] GenericDao - **********Querying Exact Name: Pork Sausage (Sweet)
[INFO ] 2019-05-12 18:39:44.782 [http-nio-8080-exec-9] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}
[INFO ] 2019-05-12 18:39:44.782 [http-nio-8080-exec-9] CreateGroceryList - **********Adding ingredients Onion, Carrots, Pork Sausage (Sweet) to the new/updated grocery list: Best Week
[INFO ] 2019-05-12 18:39:44.782 [http-nio-8080-exec-9] CreateGroceryList - **********Saving/Updating a Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Best Week, user_id = 16, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}]}, userRecipes = {[]}, user = {[]} }----- For User: [User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}]
[INFO ] 2019-05-12 18:39:44.782 [http-nio-8080-exec-9] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Best Week, user_id = 16, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:41:25.857 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:41:25.865 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 18:41:25.868 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:41:28.623 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:41:28.626 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 18:41:28.639 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 18:41:28.639 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:41:28.653 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:41:28.653 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:41:28.654 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:41:28.729 [main] GenericDao - **********Entity inserted: GroceryLists{ groceryListId = 107, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:41:28.729 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:41:28.772 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 107, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:41:28.779 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:41:28.809 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 107, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:41:28.810 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:41:28.839 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 107, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:42:27.797 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:42:27.806 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 18:42:27.807 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:42:30.474 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:42:30.477 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 18:42:30.488 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 18:42:30.489 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:42:30.502 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:42:30.503 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:42:30.503 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:42:30.575 [main] GenericDao - **********Entity inserted: GroceryLists{ groceryListId = 108, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:42:30.576 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:42:30.619 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 108, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:42:30.625 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:42:30.655 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 108, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:42:30.656 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:42:30.685 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 108, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:43:16.846 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:43:16.855 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 18:43:16.855 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:43:19.621 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:43:19.623 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 18:43:19.633 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 18:43:19.634 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:43:19.643 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:43:19.643 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:43:19.644 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:43:19.711 [main] GenericDao - **********Entity inserted: GroceryLists{ groceryListId = 109, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:43:19.712 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:43:19.763 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 109, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:43:19.770 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:43:19.795 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 109, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:43:19.796 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:43:19.825 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 109, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:43:52.154 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:43:52.164 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 18:43:52.165 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:43:54.922 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:43:54.925 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 18:43:54.937 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 18:43:54.938 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:43:54.955 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:43:54.956 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:43:54.956 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:43:55.024 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 110, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:43:55.024 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:43:55.066 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 110, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:43:55.073 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:43:55.100 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 110, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:43:55.101 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:43:55.127 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 110, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:44:43.399 [http-nio-8080-exec-6] SearchGrocerylist - ********** Grabbing User Name to get all the users Grocery Lists: Tester1
[INFO ] 2019-05-12 18:44:43.399 [http-nio-8080-exec-6] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 18:44:43.414 [http-nio-8080-exec-6] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 18:44:43.414 [http-nio-8080-exec-6] GenericDao - **********Querying grocery list by user id: 8
[INFO ] 2019-05-12 18:44:43.447 [http-nio-8080-exec-6] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 10, grocerylistName = Test Grocery List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 17, grocerylistName = Hulk's List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 22, grocerylistName = Brand New Test, user_id = 8, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:44:43.447 [http-nio-8080-exec-6] SearchGrocerylist - ********** Grocery List Object by User Name Results: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 10, grocerylistName = Test Grocery List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 17, grocerylistName = Hulk's List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 22, grocerylistName = Brand New Test, user_id = 8, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:45:03.685 [http-nio-8080-exec-8] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-12 18:45:03.685 [http-nio-8080-exec-8] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 18:45:03.698 [http-nio-8080-exec-8] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 18:45:03.698 [http-nio-8080-exec-8] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:45:03.740 [http-nio-8080-exec-8] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:45:03.741 [http-nio-8080-exec-8] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:45:03.756 [http-nio-8080-exec-8] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:45:03.756 [http-nio-8080-exec-8] GenericDao - **********Querying Exact Name: Pork Sausage (Sweet)
[INFO ] 2019-05-12 18:45:03.762 [http-nio-8080-exec-8] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}
[INFO ] 2019-05-12 18:45:03.762 [http-nio-8080-exec-8] CreateGroceryList - **********Adding ingredients Onion, Carrots, Pork Sausage (Sweet) to the new/updated grocery list: Best Week
[INFO ] 2019-05-12 18:45:03.762 [http-nio-8080-exec-8] CreateGroceryList - **********Saving/Updating a Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Best Week, user_id = 8, ingredients = {[Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }----- For User: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 18:45:03.762 [http-nio-8080-exec-8] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Best Week, user_id = 8, ingredients = {[Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:49:03.813 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 18:49:03.821 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 18:49:03.822 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 18:49:03.823 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 18:49:03.824 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 18:49:03.824 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 18:49:03.824 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 18:49:03.824 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 18:49:03.825 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 18:49:03.825 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 18:49:04.340 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:04.341 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 18:49:04.341 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 18:49:04.341 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 18:49:06.730 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 18:49:06.907 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:06.907 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 18:49:06.908 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:06.957 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 18:49:07.005 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:07.005 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 18:49:07.005 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 18:49:07.049 [main] GenericDao - **********Saved|Updated entity: User{userId = '663', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 18:49:07.049 [main] GenericDao - **********Query database by using an ID: 663, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:07.055 [main] GenericDao - **********Query by ID Found: User{userId = '663', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 18:49:07.055 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:07.067 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:49:07.067 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 18:49:07.068 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:49:07.093 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:49:07.093 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:07.103 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:49:07.168 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:07.169 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 18:49:07.169 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 18:49:07.392 [main] GenericDao - **********Query found grocery lists by grocery list name: []
[INFO ] 2019-05-12 18:49:07.392 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: []
[INFO ] 2019-05-12 18:49:07.465 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:07.465 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 18:49:07.465 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 18:49:07.486 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:49:07.528 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:07.528 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 18:49:07.529 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:07.543 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:49:07.543 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:07.561 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:49:07.561 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:49:07.561 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:07.580 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:49:07.580 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T18:49:07.529, ingredients = []}
[INFO ] 2019-05-12 18:49:07.639 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:07.639 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 18:49:07.639 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:07.662 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 18:49:07.662 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 18:49:07.675 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:49:07.676 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:49:07.722 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:07.723 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 18:49:07.723 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 18:49:07.732 [main] GenericDao - **********Get All Query Found: []
[INFO ] 2019-05-12 18:49:07.778 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:07.778 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 18:49:07.779 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:07.784 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 18:49:07.784 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 18:49:07.792 [main] GenericDao - *********Query found grocery lists by ID: []
[INFO ] 2019-05-12 18:49:07.792 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 18:49:07.795 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 18:49:07.801 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:07.805 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 18:49:07.845 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:07.846 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 18:49:07.846 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:07.928 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 18:49:07.973 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:07.973 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 18:49:07.973 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 18:49:08.011 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:49:08.053 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:08.053 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 18:49:08.053 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 18:49:08.058 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 18:49:08.059 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: null
[INFO ] 2019-05-12 18:49:08.059 [main] GenericDao - **********Attempting to delete: null
[INFO ] 2019-05-12 18:49:08.096 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:08.096 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 18:49:08.097 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:08.107 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:49:08.110 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:49:08.097, ingredients = []}
[INFO ] 2019-05-12 18:49:08.110 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:49:08.097, ingredients = []}
[INFO ] 2019-05-12 18:49:08.117 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 580, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:49:08.097, ingredients = []}
[INFO ] 2019-05-12 18:49:08.117 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 18:49:08.117 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 18:49:08.137 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:49:08.137 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:49:08.144 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:49:08.144 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 18:49:08.160 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 580, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:49:08, ingredients = []}]
[INFO ] 2019-05-12 18:49:08.192 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:08.192 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 18:49:08.193 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:49:08.203 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:49:08.204 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 18:49:08.211 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 18:49:08.212 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:49:08.218 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:49:08.219 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:49:08.219 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:49:08.245 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 111, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:49:08.246 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:49:08.268 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 111, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:49:08.269 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:49:08.290 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 111, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:49:08.291 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:49:08.314 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 111, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:49:08.356 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:08.356 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 18:49:08.356 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:49:08.364 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 46, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:49:08.365 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 18:49:08.404 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 46, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 18:49:08.405 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 18:49:08.414 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 46, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:49:08.415 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 18:49:08.427 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 46, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:49:08.428 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 18:49:08.428 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 18:49:08.434 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:49:08.434 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 18:49:08.442 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 18:49:08.443 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 18:49:08.473 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 46, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 18:49:08.474 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 18:49:08.482 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 18:49:08.522 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:08.523 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 18:49:08.537 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:49:08.538 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 18:49:08.538 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:49:08.538 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:49:08.539 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:49:08.543 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:49:08.544 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:49:08.551 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 18:49:08.554 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 18:49:08.591 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:08.593 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 18:49:08.593 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 18:49:08.601 [main] GenericDao - **********Entity inserted: User{userId = '664', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 18:49:08.602 [main] GenericDao - **********Query database by using an ID: 664, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:08.605 [main] GenericDao - **********Query by ID Found: User{userId = '664', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 18:49:08.637 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:08.637 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 18:49:08.652 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:49:08.652 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:49:08.689 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:49:08.689 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 18:49:08.690 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:08.704 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 18:49:08.704 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:49:08.730 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 18:49:08.770 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:51:56.771 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:51:56.779 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 18:51:56.779 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 18:51:56.779 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 18:51:59.015 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 18:51:59.137 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:51:59.138 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 18:51:59.138 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:51:59.200 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 18:51:59.269 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:51:59.270 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 18:51:59.270 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 18:51:59.330 [main] GenericDao - **********Saved|Updated entity: User{userId = '665', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 18:51:59.331 [main] GenericDao - **********Query database by using an ID: 665, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:51:59.337 [main] GenericDao - **********Query by ID Found: User{userId = '665', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 18:51:59.338 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:51:59.350 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:51:59.350 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 18:51:59.351 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:51:59.379 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:51:59.380 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:51:59.391 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:51:59.437 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:51:59.437 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 18:51:59.437 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 18:51:59.660 [main] GenericDao - **********Query found grocery lists by grocery list name: []
[INFO ] 2019-05-12 18:51:59.661 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: []
[INFO ] 2019-05-12 18:51:59.727 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:51:59.728 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 18:51:59.728 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 18:51:59.745 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:51:59.789 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:51:59.789 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 18:51:59.790 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:51:59.802 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:51:59.802 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:51:59.814 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:51:59.814 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:51:59.814 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:51:59.825 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:51:59.825 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T18:51:59.790, ingredients = []}
[INFO ] 2019-05-12 18:51:59.873 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:51:59.874 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 18:51:59.874 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:51:59.894 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 18:51:59.895 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 18:51:59.906 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:51:59.907 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:51:59.958 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:51:59.958 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 18:51:59.958 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 18:51:59.965 [main] GenericDao - **********Get All Query Found: []
[INFO ] 2019-05-12 18:52:00.028 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:00.028 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 18:52:00.029 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:00.034 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 18:52:00.035 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 18:52:00.043 [main] GenericDao - *********Query found grocery lists by ID: []
[INFO ] 2019-05-12 18:52:00.043 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 18:52:00.047 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 18:52:00.055 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:00.058 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 18:52:00.101 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:00.101 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 18:52:00.101 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:00.158 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 18:52:00.225 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:00.225 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 18:52:00.225 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 18:52:00.262 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:00.308 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:00.308 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 18:52:00.309 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 18:52:00.313 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 18:52:00.313 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: null
[INFO ] 2019-05-12 18:52:00.313 [main] GenericDao - **********Attempting to delete: null
[INFO ] 2019-05-12 18:52:00.354 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:00.354 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 18:52:00.354 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:00.364 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:52:00.364 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:52:00.354, ingredients = []}
[INFO ] 2019-05-12 18:52:00.364 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:52:00.354, ingredients = []}
[INFO ] 2019-05-12 18:52:00.373 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 581, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:52:00.354, ingredients = []}
[INFO ] 2019-05-12 18:52:00.374 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 18:52:00.374 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 18:52:00.403 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:00.403 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:00.416 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:00.416 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 18:52:00.432 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 581, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:52, ingredients = []}]
[INFO ] 2019-05-12 18:52:00.474 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:00.475 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 18:52:00.475 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:52:00.494 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:52:00.495 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 18:52:00.501 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 18:52:00.502 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:52:00.509 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:52:00.510 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:00.510 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:00.527 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 112, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:00.528 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:52:00.549 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 112, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:00.549 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:52:00.567 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 112, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:00.567 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:52:00.592 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 112, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:00.656 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:00.656 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 18:52:00.656 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:52:00.662 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 47, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:52:00.663 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 18:52:00.695 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 47, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 18:52:00.696 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 18:52:00.704 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 47, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:52:00.705 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 18:52:00.717 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 47, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:52:00.718 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 18:52:00.718 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 18:52:00.724 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:52:00.724 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 18:52:00.735 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 18:52:00.736 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 18:52:00.756 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 47, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 18:52:00.757 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 18:52:00.762 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 18:52:00.807 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:00.808 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 18:52:00.818 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:00.819 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 18:52:00.819 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:00.819 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:00.820 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:00.825 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:00.826 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:00.832 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 18:52:00.834 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 18:52:00.873 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:00.873 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 18:52:00.874 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 18:52:00.879 [main] GenericDao - **********Entity inserted: User{userId = '666', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 18:52:00.879 [main] GenericDao - **********Query database by using an ID: 666, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:00.883 [main] GenericDao - **********Query by ID Found: User{userId = '666', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 18:52:00.918 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:00.918 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 18:52:00.929 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:00.929 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:00.967 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:00.967 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 18:52:00.967 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:00.980 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 18:52:00.981 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:01.001 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 18:52:01.036 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:16.604 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:16.613 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 18:52:16.614 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 18:52:16.614 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 18:52:19.002 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:19.002 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:19.058 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:19.058 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 18:52:19.336 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:19.401 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:19.401 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 18:52:19.401 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:19.431 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 18:52:19.487 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:19.487 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 18:52:19.488 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 18:52:19.506 [main] GenericDao - **********Saved|Updated entity: User{userId = '667', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 18:52:19.506 [main] GenericDao - **********Query database by using an ID: 667, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:19.512 [main] GenericDao - **********Query by ID Found: User{userId = '667', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 18:52:19.512 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:19.523 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:52:19.523 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 18:52:19.523 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:52:19.538 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:52:19.538 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:19.552 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:52:19.607 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:19.607 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 18:52:19.608 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 18:52:19.636 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:19.636 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:19.693 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:19.693 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 18:52:19.693 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 18:52:19.711 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:19.755 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:19.755 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 18:52:19.756 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:19.767 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:52:19.768 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:19.788 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:52:19.788 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:52:19.788 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:19.801 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:52:19.801 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T18:52:19.756, ingredients = []}
[INFO ] 2019-05-12 18:52:19.851 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:19.852 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 18:52:19.852 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:19.878 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 18:52:19.878 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 18:52:19.890 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:19.890 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:19.945 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:19.945 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 18:52:19.946 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 18:52:19.999 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:20.046 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:20.047 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 18:52:20.047 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:20.053 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 18:52:20.054 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 18:52:20.065 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:20.066 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:20.069 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:20.075 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 18:52:20.076 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 18:52:20.080 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:20.085 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 18:52:20.138 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:20.138 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 18:52:20.139 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:20.211 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 18:52:20.275 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:20.275 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 18:52:20.275 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 18:52:20.314 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:20.355 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:20.356 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 18:52:20.356 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 18:52:20.360 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:20.361 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:20.361 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:20.362 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:20.366 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 18:52:20.370 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 18:52:20.405 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:20.405 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 18:52:20.405 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:20.414 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:52:20.414 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:52:20.405, ingredients = []}
[INFO ] 2019-05-12 18:52:20.415 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:52:20.405, ingredients = []}
[INFO ] 2019-05-12 18:52:20.422 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 582, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:52:20.405, ingredients = []}
[INFO ] 2019-05-12 18:52:20.422 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 18:52:20.422 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 18:52:20.435 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:20.435 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:20.445 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:20.445 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 18:52:20.467 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 582, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:52:20, ingredients = []}]
[INFO ] 2019-05-12 18:52:20.521 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:20.521 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 18:52:20.521 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:52:20.532 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:52:20.533 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 18:52:20.538 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 18:52:20.539 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:52:20.545 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:52:20.546 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:20.546 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:20.562 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 113, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:20.562 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:52:20.582 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 113, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:20.582 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:52:20.601 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 113, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:20.601 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:52:20.618 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 113, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:20.665 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:20.665 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 18:52:20.665 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:52:20.672 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 48, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:52:20.673 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 18:52:20.695 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 48, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 18:52:20.695 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 18:52:20.700 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 48, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:52:20.700 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 18:52:20.709 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 48, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:52:20.709 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 18:52:20.709 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 18:52:20.715 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:52:20.715 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 18:52:20.721 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 18:52:20.722 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 18:52:20.744 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 48, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 18:52:20.745 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 18:52:20.750 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 18:52:20.790 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:20.790 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 18:52:20.800 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:20.800 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 18:52:20.800 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:20.800 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:20.802 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:20.808 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:20.810 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:20.813 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 18:52:20.816 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 18:52:20.864 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:20.864 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 18:52:20.864 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 18:52:20.869 [main] GenericDao - **********Entity inserted: User{userId = '668', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 18:52:20.870 [main] GenericDao - **********Query database by using an ID: 668, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:20.873 [main] GenericDao - **********Query by ID Found: User{userId = '668', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 18:52:20.913 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:20.914 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 18:52:20.927 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:20.928 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:20.997 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:20.997 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 18:52:20.997 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:21.021 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 18:52:21.022 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:21.056 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 18:52:21.102 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:39.534 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 18:52:39.542 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 18:52:39.543 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 18:52:39.545 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 18:52:39.545 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 18:52:39.546 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 18:52:39.546 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 18:52:39.546 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 18:52:39.546 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 18:52:39.546 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 18:52:40.179 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:40.180 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 18:52:40.180 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 18:52:40.181 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 18:52:42.702 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:42.702 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:42.846 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:42.847 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 18:52:43.113 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:43.193 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:43.193 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 18:52:43.194 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:43.221 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 18:52:43.270 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:43.271 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 18:52:43.271 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 18:52:43.291 [main] GenericDao - **********Saved|Updated entity: User{userId = '669', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 18:52:43.292 [main] GenericDao - **********Query database by using an ID: 669, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:43.299 [main] GenericDao - **********Query by ID Found: User{userId = '669', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 18:52:43.299 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:43.313 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:52:43.313 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 18:52:43.314 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:52:43.329 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:52:43.329 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:43.343 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 18:52:43.388 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:43.388 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 18:52:43.388 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 18:52:43.417 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:43.418 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:43.476 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:43.477 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 18:52:43.477 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 18:52:43.497 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:43.555 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:43.556 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 18:52:43.557 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:43.570 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:52:43.570 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:43.587 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:52:43.587 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:52:43.587 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:43.599 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:52:43.599 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T18:52:43.557, ingredients = []}
[INFO ] 2019-05-12 18:52:43.639 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:43.640 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 18:52:43.640 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:43.668 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 18:52:43.668 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 18:52:43.680 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:43.681 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:43.733 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:43.734 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 18:52:43.734 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 18:52:43.791 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:43.838 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:43.839 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 18:52:43.839 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:43.845 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 18:52:43.845 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 18:52:43.861 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:43.861 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:43.865 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:43.876 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 18:52:43.877 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 18:52:43.882 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:43.887 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 18:52:43.932 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:43.933 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 18:52:43.934 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:44.004 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 18:52:44.061 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:44.062 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 18:52:44.063 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 18:52:44.104 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:44.146 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:44.147 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 18:52:44.147 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 18:52:44.152 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:44.152 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:44.153 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:44.154 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:44.158 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 18:52:44.164 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 18:52:44.205 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:44.206 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 18:52:44.206 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:44.214 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 18:52:44.214 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:52:44.206, ingredients = []}
[INFO ] 2019-05-12 18:52:44.215 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:52:44.206, ingredients = []}
[INFO ] 2019-05-12 18:52:44.222 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 583, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:52:44.206, ingredients = []}
[INFO ] 2019-05-12 18:52:44.222 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 18:52:44.222 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 18:52:44.234 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:44.234 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:44.239 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:44.240 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 18:52:44.254 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 583, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T18:52:44, ingredients = []}]
[INFO ] 2019-05-12 18:52:44.294 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:44.294 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 18:52:44.294 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:52:44.306 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:52:44.306 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 18:52:44.314 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 18:52:44.315 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:52:44.322 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:52:44.322 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:44.323 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:44.341 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 114, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:52:44.343 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:52:44.364 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 114, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:44.364 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:52:44.404 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 114, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:44.408 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 18:52:44.449 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 114, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:52:44.498 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:44.499 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 18:52:44.499 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:52:44.508 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 49, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:52:44.508 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 18:52:44.532 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 49, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 18:52:44.532 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 18:52:44.537 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 49, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:52:44.538 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 18:52:44.548 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 49, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 18:52:44.549 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 18:52:44.549 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 18:52:44.555 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:52:44.555 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 18:52:44.569 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 18:52:44.570 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 18:52:44.594 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 49, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 18:52:44.594 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 18:52:44.600 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 18:52:44.644 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:44.645 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 18:52:44.658 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:44.658 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 18:52:44.660 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 18:52:44.660 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:44.661 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:44.668 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:44.669 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:44.672 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 18:52:44.675 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 18:52:44.711 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:44.711 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 18:52:44.711 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 18:52:44.717 [main] GenericDao - **********Entity inserted: User{userId = '670', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 18:52:44.717 [main] GenericDao - **********Query database by using an ID: 670, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:44.722 [main] GenericDao - **********Query by ID Found: User{userId = '670', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 18:52:44.759 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:44.760 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 18:52:44.769 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:44.770 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 18:52:44.805 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:52:44.805 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 18:52:44.805 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:44.816 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 18:52:44.817 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 18:52:44.846 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 18:52:44.892 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 18:54:11.307 [http-nio-8080-exec-1] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-12 18:54:11.318 [http-nio-8080-exec-1] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:54:15.510 [http-nio-8080-exec-1] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:54:15.513 [http-nio-8080-exec-1] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:54:15.543 [http-nio-8080-exec-1] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:54:15.544 [http-nio-8080-exec-1] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 18:54:15.572 [http-nio-8080-exec-1] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 18:54:15.573 [http-nio-8080-exec-1] CreateGroceryList - ^^^^^^^^^^Created Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:54:15.573 [http-nio-8080-exec-1] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:59:06.634 [http-nio-8080-exec-2] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-12 18:59:06.635 [http-nio-8080-exec-2] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 18:59:06.672 [http-nio-8080-exec-2] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:59:06.673 [http-nio-8080-exec-2] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 18:59:06.699 [http-nio-8080-exec-2] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 18:59:06.699 [http-nio-8080-exec-2] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 18:59:06.722 [http-nio-8080-exec-2] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 18:59:06.722 [http-nio-8080-exec-2] CreateGroceryList - ^^^^^^^^^^Created Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:59:06.722 [http-nio-8080-exec-2] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 18:59:12.322 [http-nio-8080-exec-6] SearchGrocerylist - ********** Grabbing User Name to get all the users Grocery Lists: Tester1
[INFO ] 2019-05-12 18:59:12.323 [http-nio-8080-exec-6] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 18:59:12.362 [http-nio-8080-exec-6] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 18:59:12.363 [http-nio-8080-exec-6] GenericDao - **********Querying grocery list by user id: 8
[INFO ] 2019-05-12 18:59:12.405 [http-nio-8080-exec-6] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 10, grocerylistName = Test Grocery List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 17, grocerylistName = Hulk's List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 22, grocerylistName = Brand New Test, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 18:59:12.406 [http-nio-8080-exec-6] SearchGrocerylist - ********** Grocery List Object by User Name Results: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 10, grocerylistName = Test Grocery List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 17, grocerylistName = Hulk's List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 22, grocerylistName = Brand New Test, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:01:44.493 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:01:44.503 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:01:44.503 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:01:47.206 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:01:47.207 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:01:47.503 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:01:47.504 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:01:47.514 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:01:47.515 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:01:47.525 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:01:47.525 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:01:47.526 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:01:47.600 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 115, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:01:47.601 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:01:47.643 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 115, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:01:47.651 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:01:47.682 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 115, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:01:47.684 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:01:47.712 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 115, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:05:43.116 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 19:05:43.125 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 19:05:43.126 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 19:05:43.128 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 19:05:43.128 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 19:05:43.128 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 19:05:43.128 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 19:05:43.128 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 19:05:43.129 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 19:05:43.129 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 19:05:43.560 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:43.561 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 19:05:43.561 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 19:05:43.561 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 19:05:45.920 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:05:45.920 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:05:46.004 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:05:46.004 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 19:05:46.254 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:05:46.348 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:46.349 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 19:05:46.349 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:46.383 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 19:05:46.432 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:46.432 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 19:05:46.433 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 19:05:46.452 [main] GenericDao - **********Saved|Updated entity: User{userId = '671', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 19:05:46.453 [main] GenericDao - **********Query database by using an ID: 671, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:46.462 [main] GenericDao - **********Query by ID Found: User{userId = '671', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 19:05:46.462 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:46.475 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 19:05:46.476 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 19:05:46.476 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 19:05:46.494 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 19:05:46.495 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:46.513 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 19:05:46.569 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:46.569 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 19:05:46.570 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 19:05:46.597 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:05:46.598 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:05:46.661 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:46.661 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 19:05:46.662 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 19:05:46.682 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 19:05:46.735 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:46.735 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 19:05:46.736 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:46.753 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:05:46.754 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:46.766 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:05:46.767 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:05:46.768 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:46.778 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:05:46.779 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T19:05:46.736, ingredients = []}
[INFO ] 2019-05-12 19:05:46.831 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:46.831 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 19:05:46.831 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:46.854 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 19:05:46.855 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 19:05:46.869 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 19:05:46.869 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 19:05:46.929 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:46.929 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 19:05:46.930 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 19:05:46.981 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:05:47.042 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:47.042 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 19:05:47.043 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:47.050 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 19:05:47.050 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 19:05:47.073 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:05:47.073 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:05:47.077 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:05:47.083 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 19:05:47.084 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 19:05:47.095 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:47.099 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 19:05:47.149 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:47.150 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 19:05:47.150 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:47.222 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 19:05:47.281 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:47.281 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 19:05:47.282 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 19:05:47.323 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 19:05:47.365 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:47.366 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 19:05:47.366 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 19:05:47.371 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:05:47.371 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:05:47.371 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:05:47.373 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:05:47.377 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 19:05:47.384 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 19:05:47.426 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:47.426 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 19:05:47.426 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:47.434 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:05:47.435 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T19:05:47.426, ingredients = []}
[INFO ] 2019-05-12 19:05:47.435 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T19:05:47.426, ingredients = []}
[INFO ] 2019-05-12 19:05:47.441 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 584, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T19:05:47.426, ingredients = []}
[INFO ] 2019-05-12 19:05:47.442 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 19:05:47.442 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 19:05:47.475 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 19:05:47.475 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:05:47.485 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:05:47.485 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 19:05:47.499 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 584, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T19:05:47, ingredients = []}]
[INFO ] 2019-05-12 19:05:47.543 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:47.543 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:05:47.543 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:47.551 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:05:47.551 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:05:47.565 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:05:47.566 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:05:47.573 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:05:47.573 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:05:47.580 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:05:47.580 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:05:47.580 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:05:47.603 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 116, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:05:47.604 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:05:47.629 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 116, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:05:47.630 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:05:47.647 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 116, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:05:47.647 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:05:47.667 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 116, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:05:47.758 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:47.758 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 19:05:47.758 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 19:05:47.764 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 50, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 19:05:47.764 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 19:05:47.793 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 50, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 19:05:47.794 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 19:05:47.800 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 50, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 19:05:47.800 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 19:05:47.810 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 50, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 19:05:47.811 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 19:05:47.812 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 19:05:47.823 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:05:47.824 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 19:05:47.834 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 19:05:47.834 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 19:05:47.868 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 50, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 19:05:47.868 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 19:05:47.875 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 19:05:47.924 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:47.925 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 19:05:47.936 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 19:05:47.936 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 19:05:47.936 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 19:05:47.937 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:05:47.938 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:05:47.942 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:05:47.944 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:05:47.948 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 19:05:47.952 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 19:05:47.989 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:47.990 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 19:05:47.990 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 19:05:47.996 [main] GenericDao - **********Entity inserted: User{userId = '672', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 19:05:47.996 [main] GenericDao - **********Query database by using an ID: 672, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:47.999 [main] GenericDao - **********Query by ID Found: User{userId = '672', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 19:05:48.031 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:48.031 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 19:05:48.043 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:05:48.044 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:05:48.086 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:05:48.086 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 19:05:48.087 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:48.098 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 19:05:48.098 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:05:48.119 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 19:05:48.164 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:07:27.716 [http-nio-8080-exec-9] GenericDao - **********Querying Exact Name: Tester1
[INFO ] 2019-05-12 19:11:15.478 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 19:11:15.487 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 19:11:15.488 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 19:11:15.489 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 19:11:15.489 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 19:11:15.490 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 19:11:15.490 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 19:11:15.490 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 19:11:15.490 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 19:11:15.491 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 19:11:15.986 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:15.987 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 19:11:15.987 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 19:11:15.987 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 19:11:18.376 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:11:18.376 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:11:18.434 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:11:18.435 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 19:11:18.683 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:11:18.774 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:18.775 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 19:11:18.775 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:18.808 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 19:11:18.862 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:18.863 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 19:11:18.863 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 19:11:18.880 [main] GenericDao - **********Saved|Updated entity: User{userId = '673', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 19:11:18.880 [main] GenericDao - **********Query database by using an ID: 673, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:18.886 [main] GenericDao - **********Query by ID Found: User{userId = '673', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 19:11:18.887 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:18.908 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 19:11:18.909 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 19:11:18.909 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 19:11:18.930 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 19:11:18.930 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:18.944 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 19:11:19.020 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:19.021 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 19:11:19.021 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 19:11:19.047 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:11:19.049 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:11:19.139 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:19.139 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 19:11:19.140 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 19:11:19.156 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 19:11:19.214 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:19.214 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 19:11:19.215 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:19.228 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:11:19.229 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:19.243 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:11:19.244 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:11:19.244 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:19.256 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:11:19.257 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T19:11:19.215, ingredients = []}
[INFO ] 2019-05-12 19:11:19.315 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:19.315 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 19:11:19.316 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:19.343 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 19:11:19.343 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 19:11:19.355 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 19:11:19.356 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 19:11:19.407 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:19.408 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 19:11:19.408 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 19:11:19.464 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:11:19.514 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:19.514 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 19:11:19.514 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:19.524 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 19:11:19.524 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 19:11:19.543 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:11:19.543 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:11:19.548 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:11:19.556 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 19:11:19.558 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 19:11:19.563 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:19.566 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 19:11:19.616 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:19.616 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 19:11:19.617 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:19.682 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 19:11:19.725 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:19.725 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 19:11:19.725 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 19:11:19.764 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 19:11:19.807 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:19.808 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 19:11:19.808 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 19:11:19.813 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:11:19.813 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:11:19.813 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:11:19.815 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:11:19.818 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 19:11:19.824 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 19:11:19.910 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:19.910 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 19:11:19.911 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:19.919 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:11:19.919 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T19:11:19.911, ingredients = []}
[INFO ] 2019-05-12 19:11:19.919 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T19:11:19.911, ingredients = []}
[INFO ] 2019-05-12 19:11:19.927 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 585, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T19:11:19.911, ingredients = []}
[INFO ] 2019-05-12 19:11:19.927 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 19:11:19.927 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 19:11:19.938 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 19:11:19.938 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:11:19.944 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:11:19.944 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 19:11:19.960 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 585, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T19:11:20, ingredients = []}]
[INFO ] 2019-05-12 19:11:19.997 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:19.997 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:11:19.997 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:20.005 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:11:20.005 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:11:20.019 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:11:20.019 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:11:20.025 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:11:20.025 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:11:20.033 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:11:20.033 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:11:20.034 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:11:20.048 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 117, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:11:20.049 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:11:20.072 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 117, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:11:20.073 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:11:20.093 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 117, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:11:20.094 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:11:20.116 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 117, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:11:20.178 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:20.179 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 19:11:20.181 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 19:11:20.186 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 51, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 19:11:20.186 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 19:11:20.215 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 51, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 19:11:20.215 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 19:11:20.221 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 51, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 19:11:20.222 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 19:11:20.231 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 51, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 19:11:20.231 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 19:11:20.231 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 19:11:20.237 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:11:20.238 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 19:11:20.246 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 19:11:20.247 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 19:11:20.289 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 51, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 19:11:20.289 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 19:11:20.295 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 19:11:20.337 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:20.338 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 19:11:20.347 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 19:11:20.348 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 19:11:20.348 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 19:11:20.348 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:11:20.349 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:11:20.354 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:11:20.355 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:11:20.359 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 19:11:20.363 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 19:11:20.403 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:20.404 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 19:11:20.404 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 19:11:20.409 [main] GenericDao - **********Entity inserted: User{userId = '674', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 19:11:20.409 [main] GenericDao - **********Query database by using an ID: 674, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:20.412 [main] GenericDao - **********Query by ID Found: User{userId = '674', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 19:11:20.444 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:20.445 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 19:11:20.455 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:11:20.456 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 19:11:20.492 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:11:20.492 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 19:11:20.492 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:20.503 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 19:11:20.503 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:11:20.524 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 19:11:20.566 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:12:08.723 [http-nio-8080-exec-10] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 19:12:13.876 [http-nio-8080-exec-10] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 19:12:13.883 [http-nio-8080-exec-10] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-12 19:12:13.883 [http-nio-8080-exec-10] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:12:13.939 [http-nio-8080-exec-10] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:12:13.939 [http-nio-8080-exec-10] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:12:13.967 [http-nio-8080-exec-10] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:12:13.967 [http-nio-8080-exec-10] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:12:13.990 [http-nio-8080-exec-10] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:12:13.990 [http-nio-8080-exec-10] CreateGroceryList - ^^^^^^^^^^Created Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:12:13.991 [http-nio-8080-exec-10] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:13:44.034 [http-nio-8080-exec-1] GenericDao - **********Query database using the User Name: apark
[INFO ] 2019-05-12 19:13:44.045 [http-nio-8080-exec-1] GenericDao - Found User Name: [User{userId = '18', firstName = 'Andrew', lastName = 'Park', userName = 'Apark', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 19:13:44.045 [http-nio-8080-exec-1] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: apark
[INFO ] 2019-05-12 19:13:44.045 [http-nio-8080-exec-1] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:13:44.068 [http-nio-8080-exec-1] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:13:44.069 [http-nio-8080-exec-1] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:13:44.097 [http-nio-8080-exec-1] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:13:44.097 [http-nio-8080-exec-1] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:13:44.117 [http-nio-8080-exec-1] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:13:44.117 [http-nio-8080-exec-1] CreateGroceryList - ^^^^^^^^^^Created Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 18, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:13:44.117 [http-nio-8080-exec-1] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 18, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[ERROR] 2019-05-12 19:14:54.455 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM groceryList' at line 1
[INFO ] 2019-05-12 19:14:54.475 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:14:54.477 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:14:54.478 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:14:57.234 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:14:57.235 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:16:09.762 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:16:09.772 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:16:09.773 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:16:12.686 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:16:12.686 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:16:12.988 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:16:12.988 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:16:13.001 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:16:13.001 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:16:13.010 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:16:13.010 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:16:13.011 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:16:13.141 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 118, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:16:13.142 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:16:13.176 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 118, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:16:13.182 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:16:13.206 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 118, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:16:13.207 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:16:13.229 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 118, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[ERROR] 2019-05-12 19:16:46.248 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM groceryList' at line 1
[INFO ] 2019-05-12 19:16:46.261 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:16:46.263 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:16:46.263 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:16:48.928 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:16:48.929 [main] GenericDao - **********Querying Exact Name: Carrots
[ERROR] 2019-05-12 19:17:50.688 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM groceryList' at line 1
[INFO ] 2019-05-12 19:17:50.704 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:17:50.706 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:17:50.706 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:17:53.290 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:17:53.290 [main] GenericDao - **********Querying Exact Name: Carrots
[ERROR] 2019-05-12 19:19:25.155 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:19:25.169 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:19:25.171 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:19:25.171 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:19:27.947 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:19:27.950 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:19:28.228 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:19:28.229 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:19:28.256 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:19:28.256 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:19:28.285 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:19:28.285 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:19:28.286 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[ERROR] 2019-05-12 19:20:18.381 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:20:18.393 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:20:18.394 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:20:18.394 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:20:20.863 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:20:20.863 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:20:21.196 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:20:21.197 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:20:21.229 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:20:21.229 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:20:21.260 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:20:21.261 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:20:21.261 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[ERROR] 2019-05-12 19:24:25.163 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:24:25.175 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:24:25.176 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:24:25.177 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:24:27.801 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:24:27.802 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:24:28.091 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:24:28.091 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:24:28.128 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:24:28.128 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:24:28.156 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:24:28.157 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:24:28.157 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[ERROR] 2019-05-12 19:25:02.197 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:25:02.207 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:25:02.209 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:25:02.209 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:25:05.028 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:25:05.028 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:25:05.313 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:25:05.313 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:25:05.345 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:25:05.346 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:25:05.376 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:25:05.377 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:25:05.377 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:27:33.983 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:27:33.994 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:27:33.995 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:27:36.390 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:27:36.391 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:27:36.660 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:27:36.660 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:27:36.673 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:27:36.673 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:27:36.684 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:27:36.685 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:27:36.685 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:27:36.745 [main] GenericDao - **********Entity inserted: GroceryLists{ groceryListId = 123, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:27:36.746 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:27:36.784 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 123, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:27:36.791 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:27:36.816 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 123, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:27:36.817 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:27:36.840 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 123, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[ERROR] 2019-05-12 19:29:10.322 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:29:10.335 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:29:10.337 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 19:29:10.337 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 19:29:13.332 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 52, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 19:29:13.334 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 19:29:13.632 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 52, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 19:29:13.638 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 19:29:13.674 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 52, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 19:29:13.676 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 19:29:13.690 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 52, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 19:29:13.691 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 19:29:13.691 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 19:29:13.720 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:29:13.720 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 19:29:13.792 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 19:29:13.792 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 19:29:13.840 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 52, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 19:29:13.841 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 19:29:13.861 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 19:29:37.903 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:29:37.914 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:29:37.914 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:29:40.430 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:29:40.431 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:29:40.689 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:29:40.690 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:29:40.702 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:29:40.702 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:29:40.711 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:29:40.712 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:29:40.712 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:29:40.777 [main] GenericDao - **********Entity inserted: GroceryLists{ groceryListId = 124, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:29:40.778 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:29:40.813 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 124, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:29:40.818 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:29:40.843 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 124, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:29:40.845 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:29:40.871 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 124, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[ERROR] 2019-05-12 19:29:53.991 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:29:54.003 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:29:54.005 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:29:54.005 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:29:56.479 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:29:56.479 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:29:56.761 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:29:56.761 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:29:56.790 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:29:56.790 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:29:56.819 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:29:56.820 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:29:56.820 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[ERROR] 2019-05-12 19:36:27.564 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:36:27.577 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:36:27.578 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:36:27.579 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:36:29.998 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:36:29.999 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:36:30.291 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:36:30.291 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:36:30.318 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:36:30.318 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:36:30.344 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:36:30.345 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 19:36:30.372 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[ERROR] 2019-05-12 19:39:03.395 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:39:03.405 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:39:03.407 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:39:03.407 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:39:05.944 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:39:05.945 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:39:06.254 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:39:06.254 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:39:06.287 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:39:06.287 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:39:06.317 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:39:06.317 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = null, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:39:06.318 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = null, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[ERROR] 2019-05-12 19:39:57.721 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:39:57.733 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:39:57.735 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:39:57.736 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:40:00.192 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:40:00.193 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:40:00.471 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:40:00.471 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:40:00.502 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:40:00.503 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:40:00.529 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:40:00.529 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = THIS IS HARD, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:40:00.533 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = THIS IS HARD, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[ERROR] 2019-05-12 19:45:15.803 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:45:15.814 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:45:15.815 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:45:15.815 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:45:18.303 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:45:18.304 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:45:18.579 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:45:18.580 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:45:18.610 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:45:18.610 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:45:18.638 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:45:18.638 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:45:18.641 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[ERROR] 2019-05-12 19:51:05.575 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:51:05.589 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:51:05.591 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:51:05.592 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:51:08.412 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:51:08.412 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:51:08.726 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:51:08.727 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:51:08.757 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:51:08.758 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:51:08.787 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:51:08.791 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:51:08.791 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[ERROR] 2019-05-12 19:51:49.156 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:51:49.167 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:51:49.169 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:51:49.169 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:51:51.635 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:51:51.635 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:51:51.929 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:51:51.930 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:51:51.965 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:51:51.966 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:51:52.003 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:51:52.003 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:51:52.004 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[ERROR] 2019-05-12 19:52:17.540 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:52:17.552 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:52:17.554 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:52:17.554 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:52:20.112 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:52:20.112 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:52:20.417 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:52:20.418 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:52:20.470 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:52:20.470 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:52:20.508 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:52:20.509 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:52:20.509 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[ERROR] 2019-05-12 19:52:59.814 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:52:59.826 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:52:59.828 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:52:59.829 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:53:02.594 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:53:02.595 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:53:02.921 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:53:02.922 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:53:02.982 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:53:02.982 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:53:03.030 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:53:03.031 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:53:03.032 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:53:03.137 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 131, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:53:03.139 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:53:03.213 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 124, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 128, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 129, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 130, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 131, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:53:03.218 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:53:03.277 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 124, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 128, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 129, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 130, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 131, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:54:01.244 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:54:01.253 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:54:01.256 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:54:03.760 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:54:03.761 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:54:04.026 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:54:04.027 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:54:04.039 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:54:04.039 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:54:04.048 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:54:04.049 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:54:04.050 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:54:04.099 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 132, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:54:04.100 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:54:04.140 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 132, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:54:04.146 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:54:04.170 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 132, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:54:04.171 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:54:04.195 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 132, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[ERROR] 2019-05-12 19:55:31.613 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:55:31.627 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:55:31.629 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:55:31.630 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:55:34.214 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:55:34.215 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:55:34.505 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:55:34.506 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:55:34.540 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:55:34.540 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:55:34.575 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:55:34.577 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:55:34.580 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:55:34.701 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 133, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:55:34.701 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:55:34.738 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 132, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 133, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:55:34.744 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:55:34.771 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 132, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 133, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[ERROR] 2019-05-12 19:56:45.841 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:56:45.852 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:56:45.854 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:56:45.854 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:56:48.340 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:56:48.340 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:56:48.605 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:56:48.605 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:56:48.617 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:56:48.618 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:56:48.630 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:56:48.631 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:56:48.631 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:56:48.691 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 134, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:56:48.691 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:56:48.742 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 132, grocerylistName = Add Tester, user_id = 5, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 133, grocerylistName = Add Tester, user_id = 5, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 134, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:56:48.748 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:56:48.785 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 132, grocerylistName = Add Tester, user_id = 5, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 133, grocerylistName = Add Tester, user_id = 5, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 134, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[ERROR] 2019-05-12 19:58:11.603 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:58:11.613 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:58:11.615 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:58:11.615 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:58:14.103 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:58:14.103 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:58:14.385 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:58:14.386 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:58:14.411 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:58:14.411 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:58:14.437 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:58:14.438 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:58:14.442 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:58:14.520 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 135, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:58:14.520 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:58:14.573 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 132, grocerylistName = Add Tester, user_id = 5, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 133, grocerylistName = Add Tester, user_id = 5, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 134, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 135, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:58:14.581 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:58:14.616 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 132, grocerylistName = Add Tester, user_id = 5, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 133, grocerylistName = Add Tester, user_id = 5, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 134, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 135, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[ERROR] 2019-05-12 19:59:02.361 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:59:02.375 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:59:02.377 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:59:02.377 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:59:05.243 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:59:05.243 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:59:05.530 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:59:05.530 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:59:05.571 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:59:05.572 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:59:05.609 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:59:05.609 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:59:05.610 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:59:05.721 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 136, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:59:05.722 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:59:05.772 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 132, grocerylistName = Add Tester, user_id = 5, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 133, grocerylistName = Add Tester, user_id = 5, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 134, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 135, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 136, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:59:05.777 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:59:05.824 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 132, grocerylistName = Add Tester, user_id = 5, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 133, grocerylistName = Add Tester, user_id = 5, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 134, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 135, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 136, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[ERROR] 2019-05-12 19:59:42.475 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:59:42.486 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:59:42.488 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:59:42.488 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 19:59:45.138 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 19:59:45.139 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 19:59:45.394 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:59:45.394 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 19:59:45.404 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 19:59:45.405 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 19:59:45.419 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 19:59:45.420 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:59:45.420 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:59:45.516 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 137, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 19:59:45.516 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:59:45.554 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 137, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:59:45.559 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:59:45.587 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 137, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 19:59:45.588 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 19:59:45.613 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 137, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[ERROR] 2019-05-12 19:59:58.638 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 19:59:58.649 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 19:59:58.651 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 19:59:58.652 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:00:01.242 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:00:01.242 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:00:01.541 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:00:01.542 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:00:01.571 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:00:01.572 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:00:01.600 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:00:01.601 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:00:01.605 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:00:01.663 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 138, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:00:01.664 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:00:01.704 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 137, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 138, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:00:01.711 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:00:01.745 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 137, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 138, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:01:07.059 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 20:01:07.071 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 20:01:07.071 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 20:01:07.073 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 20:01:07.073 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 20:01:07.073 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 20:01:07.074 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 20:01:07.074 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 20:01:07.074 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 20:01:07.074 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[ERROR] 2019-05-12 20:01:07.642 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:07.646 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:07.647 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 20:01:07.647 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 20:01:07.647 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:01:10.250 [main] GenericDao - **********Query by ID Found: null
[ERROR] 2019-05-12 20:01:10.295 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:10.296 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:10.296 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 20:01:10.297 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:10.381 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[ERROR] 2019-05-12 20:01:10.418 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:10.420 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:10.420 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 20:01:10.420 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:01:10.548 [main] GenericDao - **********Saved|Updated entity: User{userId = '675', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:01:10.549 [main] GenericDao - **********Query database by using an ID: 675, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:10.558 [main] GenericDao - **********Query by ID Found: User{userId = '675', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:01:10.558 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:10.583 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:01:10.584 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 20:01:10.584 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:01:10.611 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:01:10.613 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:10.627 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[ERROR] 2019-05-12 20:01:10.669 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:10.671 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:10.672 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 20:01:10.672 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 20:01:10.911 [main] GenericDao - **********Query found grocery lists by grocery list name: []
[INFO ] 2019-05-12 20:01:10.911 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: []
[ERROR] 2019-05-12 20:01:10.946 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:10.947 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:10.947 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 20:01:10.948 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 20:01:10.969 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[ERROR] 2019-05-12 20:01:11.004 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:11.007 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:11.007 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 20:01:11.008 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:11.020 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:01:11.020 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:11.031 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:01:11.031 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:01:11.032 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:11.048 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:01:11.048 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T20:01:11.008, ingredients = []}
[ERROR] 2019-05-12 20:01:11.080 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:11.081 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:11.082 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 20:01:11.082 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:11.109 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 20:01:11.109 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 20:01:11.132 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:01:11.133 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[ERROR] 2019-05-12 20:01:11.160 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:11.161 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:11.161 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 20:01:11.161 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:01:11.201 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 137, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 138, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[ERROR] 2019-05-12 20:01:11.232 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:11.234 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:11.235 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 20:01:11.235 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:11.241 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:01:11.241 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 20:01:11.250 [main] GenericDao - *********Query found grocery lists by ID: []
[INFO ] 2019-05-12 20:01:11.251 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:01:11.255 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:01:11.310 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:11.316 [main] GenericDao - **********Query by ID Found: null
[ERROR] 2019-05-12 20:01:11.338 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:11.339 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:11.339 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 20:01:11.340 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:11.410 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}, User{userId = '675', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}]
[ERROR] 2019-05-12 20:01:11.436 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:11.441 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:11.442 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 20:01:11.443 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:01:11.526 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[ERROR] 2019-05-12 20:01:11.549 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:11.549 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:11.550 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 20:01:11.550 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:01:11.554 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 20:01:11.554 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: null
[INFO ] 2019-05-12 20:01:11.554 [main] GenericDao - **********Attempting to delete: null
[ERROR] 2019-05-12 20:01:11.582 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:11.583 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:11.583 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 20:01:11.583 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:11.593 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:01:11.594 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:01:11.583, ingredients = []}
[INFO ] 2019-05-12 20:01:11.594 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:01:11.583, ingredients = []}
[INFO ] 2019-05-12 20:01:11.629 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 586, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:01:11.583, ingredients = []}
[INFO ] 2019-05-12 20:01:11.630 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 20:01:11.630 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 20:01:11.642 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:01:11.643 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:01:11.651 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:01:11.651 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 20:01:11.667 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 586, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:01:12, ingredients = []}]
[ERROR] 2019-05-12 20:01:11.689 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:11.689 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:11.690 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 20:01:11.690 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:11.698 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:01:11.698 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:01:11.726 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:01:11.726 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:01:11.750 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:01:11.750 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:01:11.771 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:01:11.772 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:01:11.772 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:01:11.791 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 139, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:01:11.792 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:01:11.823 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 137, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 138, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 139, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:01:11.824 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:01:11.849 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 137, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 138, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 139, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[ERROR] 2019-05-12 20:01:11.869 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:11.870 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:11.870 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 20:01:11.870 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:01:11.882 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 53, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:01:11.882 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:01:11.924 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 53, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 20:01:11.924 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 20:01:11.931 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 53, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:01:11.931 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 20:01:11.939 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 53, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:01:11.940 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 20:01:11.940 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:01:11.963 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:01:11.963 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:01:11.978 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:01:11.978 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:01:12.013 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 53, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 20:01:12.013 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 20:01:12.043 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[ERROR] 2019-05-12 20:01:12.065 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:12.066 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:12.066 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 20:01:12.076 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:01:12.077 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 20:01:12.077 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:01:12.077 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:01:12.078 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:01:12.094 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:01:12.096 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:01:12.113 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 20:01:12.117 [main] GenericDao - **********Query found recipes by ID : []
[ERROR] 2019-05-12 20:01:12.134 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:12.135 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:12.135 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 20:01:12.136 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:01:12.142 [main] GenericDao - **********Entity inserted: User{userId = '676', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:01:12.143 [main] GenericDao - **********Query database by using an ID: 676, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:12.146 [main] GenericDao - **********Query by ID Found: User{userId = '676', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[ERROR] 2019-05-12 20:01:12.163 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:12.163 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:12.163 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:01:12.177 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:01:12.177 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[ERROR] 2019-05-12 20:01:12.195 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:12.195 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:01:12.196 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 20:01:12.196 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:12.208 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 20:01:12.208 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:01:12.235 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}]
[ERROR] 2019-05-12 20:01:12.251 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:01:12.251 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:04.511 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 20:02:04.520 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 20:02:04.521 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 20:02:04.523 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 20:02:04.523 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 20:02:04.523 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 20:02:04.523 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 20:02:04.524 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 20:02:04.524 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 20:02:04.524 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 20:02:05.189 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:05.190 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 20:02:05.190 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 20:02:05.191 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:02:07.746 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:02:07.747 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:02:07.835 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:02:07.835 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 20:02:08.080 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:02:08.174 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:08.174 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 20:02:08.174 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:08.206 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 20:02:08.252 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:08.252 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 20:02:08.253 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:02:08.274 [main] GenericDao - **********Saved|Updated entity: User{userId = '677', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:02:08.274 [main] GenericDao - **********Query database by using an ID: 677, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:08.280 [main] GenericDao - **********Query by ID Found: User{userId = '677', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:02:08.280 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:08.290 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:02:08.290 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 20:02:08.292 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:02:08.306 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:02:08.306 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:08.320 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:02:08.369 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:08.369 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 20:02:08.370 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 20:02:08.401 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:02:08.401 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:02:08.463 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:08.463 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 20:02:08.464 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 20:02:08.483 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:02:08.542 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:08.542 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 20:02:08.543 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:08.555 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:02:08.555 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:08.569 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:02:08.570 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:02:08.570 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:08.582 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:02:08.582 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T20:02:08.543, ingredients = []}
[INFO ] 2019-05-12 20:02:08.632 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:08.632 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 20:02:08.633 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:08.660 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 20:02:08.660 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 20:02:08.675 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:02:08.675 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:02:08.735 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:08.736 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 20:02:08.736 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:02:08.803 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:02:08.874 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:08.874 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 20:02:08.875 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:08.880 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:02:08.880 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 20:02:08.891 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:02:08.892 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:02:08.897 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:02:08.905 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:02:08.907 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:02:08.912 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:08.917 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 20:02:08.969 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:08.970 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 20:02:08.970 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:09.033 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 20:02:09.076 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:09.076 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 20:02:09.076 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:02:09.126 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:02:09.170 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:09.171 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 20:02:09.171 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:02:09.176 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:02:09.176 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:02:09.177 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:02:09.180 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:02:09.186 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:02:09.190 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 20:02:09.228 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:09.228 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 20:02:09.229 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:09.238 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:02:09.239 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:02:09.228, ingredients = []}
[INFO ] 2019-05-12 20:02:09.239 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:02:09.228, ingredients = []}
[INFO ] 2019-05-12 20:02:09.250 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 587, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:02:09.228, ingredients = []}
[INFO ] 2019-05-12 20:02:09.250 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 20:02:09.250 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 20:02:09.263 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:02:09.263 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:02:09.269 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:02:09.269 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 20:02:09.284 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 587, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:02:09, ingredients = []}]
[INFO ] 2019-05-12 20:02:09.324 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:09.325 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 20:02:09.325 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:09.332 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:02:09.333 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:02:09.347 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:02:09.347 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:02:09.353 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:02:09.353 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:02:09.365 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:02:09.366 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:02:09.366 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:02:09.383 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 140, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:02:09.383 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:02:09.404 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 140, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:02:09.405 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:02:09.424 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 140, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:02:09.424 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:02:09.442 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 140, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:02:09.491 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:09.491 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 20:02:09.491 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:02:09.499 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 54, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:02:09.499 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:02:09.528 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 54, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 20:02:09.528 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 20:02:09.538 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 54, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:02:09.539 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 20:02:09.547 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 54, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:02:09.547 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 20:02:09.548 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:02:09.554 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:02:09.555 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:02:09.572 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:02:09.572 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:02:09.604 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 54, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 20:02:09.604 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 20:02:09.611 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:02:09.655 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:09.656 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 20:02:09.666 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:02:09.666 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 20:02:09.666 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:02:09.666 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:02:09.667 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:02:09.671 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:02:09.673 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:02:09.678 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 20:02:09.681 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 20:02:09.753 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:09.754 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 20:02:09.754 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:02:09.759 [main] GenericDao - **********Entity inserted: User{userId = '678', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:02:09.760 [main] GenericDao - **********Query database by using an ID: 678, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:09.764 [main] GenericDao - **********Query by ID Found: User{userId = '678', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:02:09.801 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:09.802 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:02:09.812 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:02:09.812 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:02:09.849 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:02:09.849 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 20:02:09.849 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:09.863 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 20:02:09.863 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:02:09.887 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 20:02:09.923 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:03:08.801 [http-nio-8080-exec-1] SearchGrocerylist - ********** Grabbing User Name to get all the users Grocery Lists: Tester1
[INFO ] 2019-05-12 20:03:08.815 [http-nio-8080-exec-1] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 20:03:14.081 [http-nio-8080-exec-1] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:03:14.091 [http-nio-8080-exec-1] GenericDao - **********Querying grocery list by user id: 8
[INFO ] 2019-05-12 20:03:14.189 [http-nio-8080-exec-1] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 10, grocerylistName = Test Grocery List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 17, grocerylistName = Hulk's List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 22, grocerylistName = Brand New Test, user_id = 8, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:03:14.190 [http-nio-8080-exec-1] SearchGrocerylist - ********** Grocery List Object by User Name Results: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 10, grocerylistName = Test Grocery List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 17, grocerylistName = Hulk's List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 22, grocerylistName = Brand New Test, user_id = 8, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:03:30.956 [http-nio-8080-exec-6] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 20:03:30.971 [http-nio-8080-exec-6] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:03:30.971 [http-nio-8080-exec-6] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-12 20:03:30.971 [http-nio-8080-exec-6] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:03:31.019 [http-nio-8080-exec-6] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:03:31.019 [http-nio-8080-exec-6] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:03:31.050 [http-nio-8080-exec-6] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:03:31.051 [http-nio-8080-exec-6] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:03:31.072 [http-nio-8080-exec-6] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:03:31.073 [http-nio-8080-exec-6] CreateGroceryList - ^^^^^^^^^^Created Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 8, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:03:31.073 [http-nio-8080-exec-6] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 8, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:03:31.194 [http-nio-8080-exec-6] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 34, grocerylistName = Add Tester, user_id = 8, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:03:42.928 [http-nio-8080-exec-10] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 20:03:42.942 [http-nio-8080-exec-10] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:03:42.942 [http-nio-8080-exec-10] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-12 20:03:42.942 [http-nio-8080-exec-10] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:03:42.973 [http-nio-8080-exec-10] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:03:42.974 [http-nio-8080-exec-10] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:03:43.007 [http-nio-8080-exec-10] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:03:43.007 [http-nio-8080-exec-10] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:03:43.036 [http-nio-8080-exec-10] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:03:43.036 [http-nio-8080-exec-10] CreateGroceryList - ^^^^^^^^^^Created Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 8, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:03:43.037 [http-nio-8080-exec-10] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 8, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:03:43.101 [http-nio-8080-exec-10] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 35, grocerylistName = Add Tester, user_id = 8, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:05:43.527 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:05:43.538 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 20:05:43.541 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:05:46.156 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:05:46.157 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:05:46.424 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:05:46.425 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:05:46.438 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:05:46.438 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:05:46.448 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:05:46.449 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:05:46.450 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:05:46.572 [main] GenericDao - **********Entity inserted: GroceryLists{ groceryListId = 141, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:05:46.573 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:05:46.614 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 141, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:05:46.622 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:05:46.650 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 141, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:05:46.651 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:05:46.681 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 141, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[ERROR] 2019-05-12 20:06:28.555 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:06:28.568 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:06:28.570 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 20:06:28.570 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:06:31.326 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:06:31.327 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:06:31.597 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:06:31.597 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:06:31.626 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:06:31.627 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:06:31.655 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:06:31.656 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:06:31.659 [main] GenericDao - **********Attempting to insert a Entity: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:06:31.769 [main] GenericDao - **********Entity inserted: GroceryLists{ groceryListId = 142, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:06:31.769 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:06:31.805 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 141, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 142, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:06:31.810 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:06:31.836 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 141, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 142, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[ERROR] 2019-05-12 20:07:39.147 [main] Database - java.sql.SQLSyntaxErrorException: You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '--DELETE FROM ingredients' at line 1
[INFO ] 2019-05-12 20:07:39.158 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:07:39.159 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 20:07:39.159 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:07:41.828 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:07:41.829 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:07:42.210 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:07:42.211 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:07:42.247 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:07:42.248 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:07:42.287 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:07:42.288 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:07:42.288 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:07:42.347 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 143, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:07:42.348 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:07:42.402 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 141, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 142, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 143, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:07:42.409 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:07:42.453 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 141, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 142, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 143, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:08:27.797 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 20:08:27.808 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 20:08:27.809 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 20:08:27.811 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 20:08:27.811 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 20:08:27.811 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 20:08:27.811 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 20:08:27.811 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 20:08:27.812 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 20:08:27.812 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 20:08:28.224 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:28.225 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 20:08:28.225 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 20:08:28.225 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:08:30.637 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:08:30.637 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:08:30.678 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:08:30.678 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 20:08:30.930 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:08:31.013 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:31.013 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 20:08:31.014 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:31.047 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 20:08:31.101 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:31.102 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 20:08:31.102 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:08:31.119 [main] GenericDao - **********Saved|Updated entity: User{userId = '679', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:08:31.120 [main] GenericDao - **********Query database by using an ID: 679, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:31.125 [main] GenericDao - **********Query by ID Found: User{userId = '679', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:08:31.125 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:31.138 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:08:31.138 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 20:08:31.138 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:08:31.159 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:08:31.160 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:31.177 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:08:31.243 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:31.244 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 20:08:31.244 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 20:08:31.269 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:08:31.270 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:08:31.343 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:31.343 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 20:08:31.343 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 20:08:31.374 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:08:31.430 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:31.430 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 20:08:31.431 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:31.445 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:08:31.445 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:31.460 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:08:31.460 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:08:31.460 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:31.470 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:08:31.470 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T20:08:31.431, ingredients = []}
[INFO ] 2019-05-12 20:08:31.520 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:31.521 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 20:08:31.522 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:31.545 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 20:08:31.545 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 20:08:31.562 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:08:31.562 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:08:31.629 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:31.631 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 20:08:31.631 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:08:31.676 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:08:31.723 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:31.724 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 20:08:31.725 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:31.736 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:08:31.737 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 20:08:31.752 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:08:31.752 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:08:31.755 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:08:31.762 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:08:31.764 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:08:31.770 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:31.775 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 20:08:31.849 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:31.850 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 20:08:31.850 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:31.911 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 20:08:31.957 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:31.958 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 20:08:31.958 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:08:31.996 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:08:32.041 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:32.041 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 20:08:32.041 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:08:32.047 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:08:32.047 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:08:32.048 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:08:32.050 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:08:32.053 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:08:32.057 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 20:08:32.100 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:32.101 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 20:08:32.101 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:32.112 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:08:32.113 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:08:32.101, ingredients = []}
[INFO ] 2019-05-12 20:08:32.113 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:08:32.101, ingredients = []}
[INFO ] 2019-05-12 20:08:32.121 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 588, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:08:32.101, ingredients = []}
[INFO ] 2019-05-12 20:08:32.121 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 20:08:32.121 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 20:08:32.138 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:08:32.138 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:08:32.144 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:08:32.144 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 20:08:32.160 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 588, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:08:32, ingredients = []}]
[INFO ] 2019-05-12 20:08:32.199 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:32.199 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 20:08:32.200 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:32.209 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:08:32.210 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:08:32.224 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:08:32.224 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:08:32.231 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:08:32.231 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:08:32.238 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:08:32.238 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:08:32.238 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:08:32.246 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 144, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:08:32.247 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:08:32.269 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 144, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:08:32.269 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:08:32.286 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 144, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:08:32.287 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:08:32.310 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 144, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:08:32.367 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:32.368 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 20:08:32.370 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:08:32.379 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 55, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:08:32.379 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:08:32.412 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 55, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 20:08:32.412 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 20:08:32.418 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 55, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:08:32.418 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 20:08:32.429 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 55, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:08:32.429 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 20:08:32.429 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:08:32.438 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:08:32.438 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:08:32.454 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:08:32.454 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:08:32.479 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 55, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 20:08:32.479 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 20:08:32.486 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:08:32.530 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:32.530 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 20:08:32.539 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:08:32.540 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 20:08:32.540 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:08:32.540 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:08:32.541 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:08:32.546 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:08:32.547 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:08:32.552 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 20:08:32.555 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 20:08:32.585 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:32.586 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 20:08:32.586 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:08:32.591 [main] GenericDao - **********Entity inserted: User{userId = '680', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:08:32.591 [main] GenericDao - **********Query database by using an ID: 680, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:32.596 [main] GenericDao - **********Query by ID Found: User{userId = '680', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:08:32.637 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:32.637 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:08:32.649 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:08:32.650 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:08:32.687 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:08:32.688 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 20:08:32.688 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:32.705 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 20:08:32.706 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:08:32.734 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 20:08:32.771 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:09:51.868 [http-nio-8080-exec-1] SearchGrocerylist - ********** Grabbing User Name to get all the users Grocery Lists: Tester1
[INFO ] 2019-05-12 20:09:51.881 [http-nio-8080-exec-1] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 20:09:56.215 [http-nio-8080-exec-1] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:09:56.223 [http-nio-8080-exec-1] GenericDao - **********Querying grocery list by user id: 8
[INFO ] 2019-05-12 20:09:56.296 [http-nio-8080-exec-1] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 10, grocerylistName = Test Grocery List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 17, grocerylistName = Hulk's List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 22, grocerylistName = Brand New Test, user_id = 8, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:09:56.297 [http-nio-8080-exec-1] SearchGrocerylist - ********** Grocery List Object by User Name Results: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 10, grocerylistName = Test Grocery List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 17, grocerylistName = Hulk's List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 22, grocerylistName = Brand New Test, user_id = 8, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:10:26.995 [http-nio-8080-exec-9] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-12 20:10:26.996 [http-nio-8080-exec-9] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 20:10:27.011 [http-nio-8080-exec-9] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:10:27.012 [http-nio-8080-exec-9] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:10:27.046 [http-nio-8080-exec-9] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:10:27.046 [http-nio-8080-exec-9] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:10:27.080 [http-nio-8080-exec-9] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:10:27.081 [http-nio-8080-exec-9] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:10:27.103 [http-nio-8080-exec-9] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:10:27.104 [http-nio-8080-exec-9] CreateGroceryList - **********Adding ingredients Onion, Carrots, Kale to the new/updated grocery list: Best Week
[INFO ] 2019-05-12 20:10:27.104 [http-nio-8080-exec-9] CreateGroceryList - **********Saving/Updating a Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Best Week, user_id = 8, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }----- For User: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:10:27.105 [http-nio-8080-exec-9] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Best Week, user_id = 8, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:10:27.234 [http-nio-8080-exec-9] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 36, grocerylistName = Best Week, user_id = 8, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:10:27.234 [http-nio-8080-exec-9] CreateGroceryList - **********Grocery list with added Ingredient: GroceryLists{ groceryListId = 36, grocerylistName = Best Week, user_id = 8, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:10:59.826 [http-nio-8080-exec-3] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-12 20:10:59.827 [http-nio-8080-exec-3] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 20:10:59.840 [http-nio-8080-exec-3] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:10:59.840 [http-nio-8080-exec-3] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:10:59.867 [http-nio-8080-exec-3] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:10:59.867 [http-nio-8080-exec-3] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:10:59.901 [http-nio-8080-exec-3] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:10:59.902 [http-nio-8080-exec-3] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:10:59.925 [http-nio-8080-exec-3] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:10:59.925 [http-nio-8080-exec-3] CreateGroceryList - **********Adding ingredients Onion, Carrots, Kale to the new/updated grocery list: Best Week Again
[INFO ] 2019-05-12 20:10:59.925 [http-nio-8080-exec-3] CreateGroceryList - **********Saving/Updating a Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Best Week Again, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }----- For User: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:10:59.926 [http-nio-8080-exec-3] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Best Week Again, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:10:59.977 [http-nio-8080-exec-3] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 37, grocerylistName = Best Week Again, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:10:59.978 [http-nio-8080-exec-3] CreateGroceryList - **********Grocery list with added Ingredient: GroceryLists{ groceryListId = 37, grocerylistName = Best Week Again, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:16:53.204 [http-nio-8080-exec-6] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:16:53.278 [http-nio-8080-exec-6] GenericDao - **********Get All Query Found: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, User{userId = '18', firstName = 'Andrew', lastName = 'Park', userName = 'Apark', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:18:04.478 [http-nio-8080-exec-10] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:18:04.543 [http-nio-8080-exec-10] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:18:04.543 [http-nio-8080-exec-10] SearchRecipes - $$$$$$$$$ Working on finding the ingredients: []
[INFO ] 2019-05-12 20:20:16.409 [http-nio-8080-exec-4] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:20:16.465 [http-nio-8080-exec-4] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:20:16.466 [http-nio-8080-exec-4] SearchRecipes - $$$$$$$$$ Working on finding the ingredients: []
[INFO ] 2019-05-12 20:26:34.331 [http-nio-8080-exec-9] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:26:34.377 [http-nio-8080-exec-9] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:26:34.377 [http-nio-8080-exec-9] SearchRecipes - $$$$$$$$$ Working on finding the ingredients: []
[INFO ] 2019-05-12 20:29:37.905 [http-nio-8080-exec-3] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:29:37.957 [http-nio-8080-exec-3] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:29:37.958 [http-nio-8080-exec-3] SearchRecipes - $$$$$$$$$ Working on finding the ingredients: []
[INFO ] 2019-05-12 20:40:20.864 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 20:40:20.873 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 20:40:20.873 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 20:40:20.875 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 20:40:20.875 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 20:40:20.875 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 20:40:20.876 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 20:40:20.876 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 20:40:20.876 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 20:40:20.877 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 20:40:21.385 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:21.386 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 20:40:21.386 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 20:40:21.386 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:40:23.787 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:40:23.788 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:40:23.840 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:40:23.841 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 20:40:24.089 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:40:24.178 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:24.179 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 20:40:24.179 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:24.209 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 20:40:24.270 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:24.271 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 20:40:24.271 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:40:24.289 [main] GenericDao - **********Saved|Updated entity: User{userId = '681', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:40:24.289 [main] GenericDao - **********Query database by using an ID: 681, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:24.296 [main] GenericDao - **********Query by ID Found: User{userId = '681', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:40:24.297 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:24.313 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:40:24.313 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 20:40:24.313 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:40:24.327 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:40:24.327 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:24.343 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:40:24.408 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:24.409 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 20:40:24.409 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 20:40:24.448 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:40:24.449 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:40:24.500 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:24.500 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 20:40:24.501 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 20:40:24.518 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:40:24.567 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:24.568 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 20:40:24.568 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:24.580 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:40:24.581 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:24.596 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:40:24.597 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:40:24.597 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:24.613 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:40:24.613 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T20:40:24.568, ingredients = []}
[INFO ] 2019-05-12 20:40:24.669 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:24.670 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 20:40:24.670 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:24.698 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 20:40:24.698 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 20:40:24.713 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:40:24.713 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:40:24.764 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:24.765 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 20:40:24.767 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:40:24.820 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:40:24.872 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:24.873 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 20:40:24.873 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:24.883 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:40:24.883 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 20:40:24.900 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:40:24.900 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:40:24.904 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:40:24.914 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:40:24.916 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:40:24.920 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:24.925 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 20:40:24.973 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:24.974 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 20:40:24.974 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:25.035 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 20:40:25.082 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:25.082 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 20:40:25.083 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:40:25.122 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:40:25.168 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:25.169 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 20:40:25.169 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:40:25.175 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:40:25.175 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:40:25.175 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:40:25.177 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:40:25.181 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:40:25.185 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 20:40:25.228 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:25.228 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 20:40:25.229 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:25.236 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:40:25.236 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:40:25.228, ingredients = []}
[INFO ] 2019-05-12 20:40:25.236 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:40:25.228, ingredients = []}
[INFO ] 2019-05-12 20:40:25.244 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 589, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:40:25.228, ingredients = []}
[INFO ] 2019-05-12 20:40:25.244 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 20:40:25.244 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 20:40:25.258 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:40:25.259 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:40:25.265 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:40:25.266 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 20:40:25.282 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 589, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:40:25, ingredients = []}]
[INFO ] 2019-05-12 20:40:25.324 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:25.324 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 20:40:25.324 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:25.332 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:40:25.332 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:40:25.350 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:40:25.351 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:40:25.357 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:40:25.357 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:40:25.364 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:40:25.364 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:40:25.365 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:40:25.374 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 145, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:40:25.375 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:40:25.400 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 145, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:40:25.401 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:40:25.419 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 145, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:40:25.420 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:40:25.453 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 145, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:40:25.514 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:25.514 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 20:40:25.514 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:40:25.524 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 56, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:40:25.525 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:40:25.554 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 56, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 20:40:25.554 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 20:40:25.565 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 56, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:40:25.566 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 20:40:25.574 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 56, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:40:25.575 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 20:40:25.575 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:40:25.581 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:40:25.582 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:40:25.594 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:40:25.594 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:40:25.624 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 56, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 20:40:25.624 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 20:40:25.632 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:40:25.669 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:25.670 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 20:40:25.680 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:40:25.680 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 20:40:25.707 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:40:25.713 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:40:25.718 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:40:25.729 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:40:25.731 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:40:25.740 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 20:40:25.745 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 20:40:25.781 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:25.781 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 20:40:25.782 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:40:25.787 [main] GenericDao - **********Entity inserted: User{userId = '682', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:40:25.789 [main] GenericDao - **********Query database by using an ID: 682, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:25.797 [main] GenericDao - **********Query by ID Found: User{userId = '682', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:40:25.832 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:25.832 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:40:25.844 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:40:25.844 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:40:25.876 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:40:25.876 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 20:40:25.876 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:25.892 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 20:40:25.892 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:40:25.912 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 20:40:25.952 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:43:05.187 [http-nio-8080-exec-8] SearchRecipes - $$$$$$$$$$ New Recipe Search term recieved: pad+thai
[INFO ] 2019-05-12 20:43:06.904 [http-nio-8080-exec-8] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'pad thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 20:43:06.906 [http-nio-8080-exec-8] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 20:43:06.907 [http-nio-8080-exec-8] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 20:43:06.908 [http-nio-8080-exec-8] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 20:43:06.908 [http-nio-8080-exec-8] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 20:43:06.909 [http-nio-8080-exec-8] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 20:43:06.909 [http-nio-8080-exec-8] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 20:43:06.909 [http-nio-8080-exec-8] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 20:43:06.909 [http-nio-8080-exec-8] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 20:43:06.909 [http-nio-8080-exec-8] SearchRecipes - $$$$$$$$$$ New Recipe Search found: [Classic Pad Thai, Shrimp Pad-Thai, Pad Thai, Pad Thai, Shrimp Pad Thai, Chicken Pad Thai, Pad Thai, Quick Shrimp Pad Thai, Shrimp Pad Thai, Pad Thai]
[INFO ] 2019-05-12 20:43:15.092 [http-nio-8080-exec-2] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 20:43:20.089 [http-nio-8080-exec-2] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:43:20.099 [http-nio-8080-exec-2] GenericDao - **********Querying user recipes by ID: 8
[INFO ] 2019-05-12 20:43:20.130 [http-nio-8080-exec-2] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:43:20.132 [http-nio-8080-exec-2] SearchRecipes - $$$$$$$$$ Working on finding the ingredients: []
[INFO ] 2019-05-12 20:45:52.048 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 20:45:52.073 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 20:45:52.079 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 20:45:52.089 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 20:45:52.091 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 20:45:52.091 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 20:45:52.092 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 20:45:52.092 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 20:45:52.092 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 20:45:52.093 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 20:45:52.669 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:52.669 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 20:45:52.669 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 20:45:52.670 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:45:55.095 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:45:55.095 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:45:55.223 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:45:55.223 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 20:45:55.480 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:45:55.560 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:55.561 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 20:45:55.561 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:55.592 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 20:45:55.648 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:55.649 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 20:45:55.650 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:45:55.669 [main] GenericDao - **********Saved|Updated entity: User{userId = '683', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:45:55.670 [main] GenericDao - **********Query database by using an ID: 683, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:55.675 [main] GenericDao - **********Query by ID Found: User{userId = '683', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:45:55.676 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:55.690 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:45:55.690 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 20:45:55.690 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:45:55.711 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:45:55.711 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:55.724 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:45:55.798 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:55.798 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 20:45:55.799 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 20:45:55.831 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:45:55.832 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:45:55.888 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:55.889 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 20:45:55.889 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 20:45:55.909 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:45:55.966 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:55.966 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 20:45:55.967 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:55.978 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:45:55.978 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:55.989 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:45:55.990 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:45:55.993 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:56.004 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:45:56.005 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T20:45:55.967, ingredients = []}
[INFO ] 2019-05-12 20:45:56.050 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:56.050 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 20:45:56.051 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:56.073 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 20:45:56.073 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 20:45:56.094 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:45:56.095 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:45:56.139 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:56.140 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 20:45:56.141 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:45:56.203 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:45:56.251 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:56.252 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 20:45:56.252 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:56.260 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:45:56.260 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 20:45:56.281 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:45:56.282 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:45:56.285 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:45:56.293 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:45:56.294 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:45:56.299 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:56.303 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 20:45:56.381 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:56.381 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 20:45:56.382 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:56.452 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 20:45:56.517 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:56.517 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 20:45:56.517 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:45:56.555 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:45:56.606 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:56.607 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 20:45:56.608 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:45:56.612 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:45:56.612 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:45:56.612 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:45:56.614 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:45:56.620 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:45:56.624 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 20:45:56.655 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:56.656 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 20:45:56.656 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:56.664 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:45:56.664 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:45:56.656, ingredients = []}
[INFO ] 2019-05-12 20:45:56.665 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:45:56.656, ingredients = []}
[INFO ] 2019-05-12 20:45:56.673 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 590, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:45:56.656, ingredients = []}
[INFO ] 2019-05-12 20:45:56.674 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 20:45:56.675 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 20:45:56.688 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:45:56.688 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:45:56.693 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:45:56.693 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 20:45:56.708 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 590, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:45:57, ingredients = []}]
[INFO ] 2019-05-12 20:45:56.745 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:56.745 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 20:45:56.746 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:56.753 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:45:56.753 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:45:56.764 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:45:56.765 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:45:56.771 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:45:56.771 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:45:56.781 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:45:56.781 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:45:56.781 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:45:56.792 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 146, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:45:56.792 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:45:56.812 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 146, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:45:56.812 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:45:56.834 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 146, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:45:56.835 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:45:56.852 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 146, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:45:56.898 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:56.898 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 20:45:56.898 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:45:56.908 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 57, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:45:56.908 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:45:56.938 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 57, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 20:45:56.938 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 20:45:56.944 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 57, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:45:56.944 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 20:45:56.953 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 57, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:45:56.954 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 20:45:56.954 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:45:56.961 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:45:56.962 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:45:56.967 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:45:56.967 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:45:56.992 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 57, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 20:45:56.992 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 20:45:57.004 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:45:57.053 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:57.054 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 20:45:57.064 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:45:57.064 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 20:45:57.064 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:45:57.065 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:45:57.066 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:45:57.070 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:45:57.072 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:45:57.076 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 20:45:57.082 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 20:45:57.121 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:57.121 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 20:45:57.121 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:45:57.127 [main] GenericDao - **********Entity inserted: User{userId = '684', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:45:57.127 [main] GenericDao - **********Query database by using an ID: 684, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:57.131 [main] GenericDao - **********Query by ID Found: User{userId = '684', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:45:57.164 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:57.165 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:45:57.187 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:45:57.187 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:45:57.223 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:45:57.223 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 20:45:57.223 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:57.236 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 20:45:57.237 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:45:57.260 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 20:45:57.299 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:33.715 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 20:47:33.723 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 20:47:33.724 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 20:47:33.725 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 20:47:33.726 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 20:47:33.726 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 20:47:33.726 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 20:47:33.727 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 20:47:33.727 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 20:47:33.727 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 20:47:34.219 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:34.220 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 20:47:34.220 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 20:47:34.220 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:47:37.593 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:47:37.593 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:47:37.695 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:47:37.695 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 20:47:38.363 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:47:38.522 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:38.522 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 20:47:38.523 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:38.560 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 20:47:38.621 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:38.622 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 20:47:38.624 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:47:38.661 [main] GenericDao - **********Saved|Updated entity: User{userId = '685', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:47:38.661 [main] GenericDao - **********Query database by using an ID: 685, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:38.670 [main] GenericDao - **********Query by ID Found: User{userId = '685', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:47:38.670 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:38.745 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:47:38.747 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 20:47:38.750 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:47:38.781 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:47:38.782 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:38.800 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:47:38.921 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:38.922 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 20:47:38.922 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 20:47:38.977 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:47:38.978 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:47:39.047 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:39.048 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 20:47:39.049 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 20:47:39.119 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:47:39.207 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:39.208 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 20:47:39.212 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:39.248 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:47:39.249 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:39.265 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:47:39.265 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:47:39.266 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:39.280 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:47:39.280 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T20:47:39.211, ingredients = []}
[INFO ] 2019-05-12 20:47:39.364 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:39.366 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 20:47:39.366 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:39.408 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 20:47:39.408 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 20:47:39.453 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:47:39.454 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:47:39.523 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:39.523 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 20:47:39.524 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:47:39.643 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:47:39.745 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:39.745 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 20:47:39.747 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:39.760 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:47:39.760 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 20:47:39.785 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:47:39.786 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:47:39.791 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:47:39.806 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:47:39.811 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:47:39.819 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:39.829 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 20:47:39.881 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:39.882 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 20:47:39.882 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:39.972 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 20:47:40.037 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:40.038 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 20:47:40.038 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:47:40.097 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:47:40.140 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:40.140 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 20:47:40.140 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:47:40.146 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:47:40.147 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:47:40.147 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:47:40.150 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:47:40.155 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:47:40.164 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 20:47:40.201 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:40.201 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 20:47:40.202 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:40.212 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:47:40.212 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:47:40.201, ingredients = []}
[INFO ] 2019-05-12 20:47:40.212 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:47:40.201, ingredients = []}
[INFO ] 2019-05-12 20:47:40.220 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 591, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:47:40.201, ingredients = []}
[INFO ] 2019-05-12 20:47:40.220 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 20:47:40.221 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 20:47:40.233 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:47:40.234 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:47:40.242 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:47:40.242 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 20:47:40.261 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 591, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:47:40, ingredients = []}]
[INFO ] 2019-05-12 20:47:40.304 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:40.305 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 20:47:40.305 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:40.312 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:47:40.313 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:47:40.327 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:47:40.327 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:47:40.335 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:47:40.335 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:47:40.350 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:47:40.350 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:47:40.351 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:47:40.365 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 147, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:47:40.365 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:47:40.387 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 147, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:47:40.387 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:47:40.407 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 147, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:47:40.407 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:47:40.433 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 147, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:47:40.503 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:40.503 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 20:47:40.504 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:47:40.510 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 58, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:47:40.511 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:47:40.612 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 58, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 20:47:40.612 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 20:47:40.619 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 58, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:47:40.619 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 20:47:40.630 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 58, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:47:40.630 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 20:47:40.630 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:47:40.645 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:47:40.646 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:47:40.663 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:47:40.663 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:47:40.700 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 58, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 20:47:40.700 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 20:47:40.707 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:47:40.764 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:40.764 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 20:47:40.774 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:47:40.774 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 20:47:40.774 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:47:40.774 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:47:40.776 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:47:40.781 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:47:40.783 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:47:40.786 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 20:47:40.789 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 20:47:40.829 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:40.829 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 20:47:40.830 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:47:40.836 [main] GenericDao - **********Entity inserted: User{userId = '686', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:47:40.836 [main] GenericDao - **********Query database by using an ID: 686, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:40.840 [main] GenericDao - **********Query by ID Found: User{userId = '686', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:47:40.873 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:40.873 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:47:40.883 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:47:40.884 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:47:40.927 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:47:40.928 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 20:47:40.928 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:40.941 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 20:47:40.942 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:47:40.965 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 20:47:41.002 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:19.356 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 20:50:19.365 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 20:50:19.365 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 20:50:19.367 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 20:50:19.367 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 20:50:19.368 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 20:50:19.368 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 20:50:19.368 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 20:50:19.369 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 20:50:19.369 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 20:50:19.812 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:19.812 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 20:50:19.813 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 20:50:19.813 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:50:22.140 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:50:22.140 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:50:22.249 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:50:22.249 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 20:50:22.499 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:50:22.599 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:22.599 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 20:50:22.600 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:22.633 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 20:50:22.687 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:22.688 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 20:50:22.688 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:50:22.707 [main] GenericDao - **********Saved|Updated entity: User{userId = '687', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:50:22.707 [main] GenericDao - **********Query database by using an ID: 687, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:22.714 [main] GenericDao - **********Query by ID Found: User{userId = '687', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 20:50:22.715 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:22.731 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:50:22.731 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 20:50:22.732 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:50:22.752 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:50:22.753 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:22.766 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 20:50:22.844 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:22.844 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 20:50:22.844 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 20:50:22.873 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:50:22.874 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:50:22.943 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:22.944 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 20:50:22.945 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 20:50:22.966 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:50:23.017 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:23.018 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 20:50:23.019 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:23.035 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:50:23.035 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:23.048 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:50:23.048 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:50:23.049 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:23.062 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:50:23.064 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T20:50:23.019, ingredients = []}
[INFO ] 2019-05-12 20:50:23.111 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:23.112 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 20:50:23.112 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:23.134 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 20:50:23.134 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 20:50:23.147 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:50:23.147 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:50:23.201 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:23.202 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 20:50:23.202 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:50:23.256 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:50:23.314 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:23.314 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 20:50:23.314 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:23.324 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:50:23.324 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 20:50:23.343 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:50:23.344 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:50:23.351 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:50:23.362 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:50:23.364 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 20:50:23.369 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:23.374 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 20:50:23.426 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:23.427 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 20:50:23.427 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:23.485 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 20:50:23.528 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:23.529 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 20:50:23.529 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:50:23.571 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:50:23.615 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:23.615 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 20:50:23.616 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:50:23.620 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:50:23.620 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:50:23.621 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:50:23.622 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:50:23.626 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 20:50:23.630 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 20:50:23.676 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:23.676 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 20:50:23.677 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:23.686 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:50:23.687 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:50:23.677, ingredients = []}
[INFO ] 2019-05-12 20:50:23.687 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:50:23.677, ingredients = []}
[INFO ] 2019-05-12 20:50:23.694 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 592, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:50:23.677, ingredients = []}
[INFO ] 2019-05-12 20:50:23.695 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 20:50:23.695 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 20:50:23.710 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:50:23.711 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:50:23.719 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:50:23.719 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 20:50:23.732 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 592, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T20:50:24, ingredients = []}]
[INFO ] 2019-05-12 20:50:23.809 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:23.809 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 20:50:23.809 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:23.817 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 20:50:23.817 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:50:23.831 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:50:23.832 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:50:23.838 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:50:23.838 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:50:23.844 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:50:23.845 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:50:23.845 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:50:23.855 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 148, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:50:23.856 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:50:23.886 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 148, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:50:23.886 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:50:23.902 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 148, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:50:23.902 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 20:50:23.920 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 148, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:50:23.963 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:23.963 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 20:50:23.963 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:50:23.972 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 59, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:50:23.972 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:50:24.005 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 59, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 20:50:24.008 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 20:50:24.016 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 59, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:50:24.017 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 20:50:24.030 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 59, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 20:50:24.031 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 20:50:24.031 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:50:24.039 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:50:24.039 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:50:24.056 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:50:24.056 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 20:50:24.092 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 59, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 20:50:24.093 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 20:50:24.099 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 20:50:24.141 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:24.141 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 20:50:24.155 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:50:24.155 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 20:50:24.155 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 20:50:24.156 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:50:24.157 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:50:24.160 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:50:24.162 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:50:24.166 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 20:50:24.169 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 20:50:24.201 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:24.202 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 20:50:24.202 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:50:24.210 [main] GenericDao - **********Entity inserted: User{userId = '688', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:50:24.211 [main] GenericDao - **********Query database by using an ID: 688, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:24.215 [main] GenericDao - **********Query by ID Found: User{userId = '688', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 20:50:24.246 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:24.247 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 20:50:24.259 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:50:24.259 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 20:50:24.296 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:50:24.297 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 20:50:24.297 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:24.320 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 20:50:24.320 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:50:24.343 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 20:50:24.377 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 20:51:26.436 [http-nio-8080-exec-10] SearchGrocerylist - ********** Grabbing User Name to get all the users Grocery Lists: Tester1
[INFO ] 2019-05-12 20:51:26.448 [http-nio-8080-exec-10] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 20:51:30.848 [http-nio-8080-exec-10] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:51:30.858 [http-nio-8080-exec-10] GenericDao - **********Querying grocery list by user id: 8
[INFO ] 2019-05-12 20:51:30.953 [http-nio-8080-exec-10] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 10, grocerylistName = Test Grocery List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 17, grocerylistName = Hulk's List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 22, grocerylistName = Brand New Test, user_id = 8, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 36, grocerylistName = Best Week, user_id = 8, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 37, grocerylistName = Best Week Again, user_id = 8, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:51:30.954 [http-nio-8080-exec-10] SearchGrocerylist - ********** Grocery List Object by User Name Results: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 10, grocerylistName = Test Grocery List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 17, grocerylistName = Hulk's List, user_id = 8, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 22, grocerylistName = Brand New Test, user_id = 8, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 36, grocerylistName = Best Week, user_id = 8, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 37, grocerylistName = Best Week Again, user_id = 8, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 20:53:33.919 [http-nio-8080-exec-7] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-12 20:53:33.920 [http-nio-8080-exec-7] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 20:53:33.937 [http-nio-8080-exec-7] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:53:33.938 [http-nio-8080-exec-7] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:53:33.983 [http-nio-8080-exec-7] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:53:33.983 [http-nio-8080-exec-7] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:53:34.018 [http-nio-8080-exec-7] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:53:34.018 [http-nio-8080-exec-7] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 20:53:40.517 [http-nio-8080-exec-8] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-12 20:53:40.517 [http-nio-8080-exec-8] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 20:53:40.531 [http-nio-8080-exec-8] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:53:40.531 [http-nio-8080-exec-8] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:53:40.566 [http-nio-8080-exec-8] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:53:40.567 [http-nio-8080-exec-8] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:53:40.604 [http-nio-8080-exec-8] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:53:40.605 [http-nio-8080-exec-8] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 20:54:14.969 [http-nio-8080-exec-9] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-12 20:54:14.969 [http-nio-8080-exec-9] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-12 20:54:14.981 [http-nio-8080-exec-9] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:54:14.981 [http-nio-8080-exec-9] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 20:54:15.008 [http-nio-8080-exec-9] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 20:54:15.009 [http-nio-8080-exec-9] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 20:54:15.038 [http-nio-8080-exec-9] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:54:15.039 [http-nio-8080-exec-9] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 20:54:15.062 [http-nio-8080-exec-9] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 20:54:15.063 [http-nio-8080-exec-9] CreateGroceryList - **********Adding ingredients Kale, Onion, Carrots to the new/updated grocery list: Super Food
[INFO ] 2019-05-12 20:54:15.063 [http-nio-8080-exec-9] CreateGroceryList - **********Saving/Updating a Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Super Food, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }----- For User: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-12 20:54:15.063 [http-nio-8080-exec-9] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Super Food, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:54:15.146 [http-nio-8080-exec-9] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 38, grocerylistName = Super Food, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:54:15.146 [http-nio-8080-exec-9] CreateGroceryList - **********Grocery list with added Ingredient: GroceryLists{ groceryListId = 38, grocerylistName = Super Food, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 20:54:52.448 [http-nio-8080-exec-7] AddUserPage - User requested to add: User{userId = 'null', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-12 20:54:52.448 [http-nio-8080-exec-7] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-12 20:54:52.459 [http-nio-8080-exec-7] GenericDao - **********Entity inserted: User{userId = '22', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-12 20:58:23.380 [http-nio-8080-exec-2] GenericDao - **********Query database by using an ID: 22, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 20:58:23.391 [http-nio-8080-exec-2] GenericDao - **********Query by ID Found: User{userId = '22', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-12 20:58:23.392 [http-nio-8080-exec-2] DeleteUserPage - User ID requested to delete: User{userId = '22', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-12 21:00:54.825 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 21:00:54.833 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 21:00:54.833 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 21:00:54.835 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 21:00:54.835 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 21:00:54.835 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 21:00:54.836 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 21:00:54.836 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 21:00:54.836 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 21:00:54.836 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 21:00:55.280 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:55.281 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 21:00:55.281 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 21:00:55.282 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:00:57.639 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:00:57.641 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:00:57.720 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:00:57.721 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 21:00:57.976 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:00:58.060 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:58.061 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 21:00:58.061 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:58.089 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 21:00:58.133 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:58.133 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 21:00:58.134 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:00:58.153 [main] GenericDao - **********Saved|Updated entity: User{userId = '689', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:00:58.153 [main] GenericDao - **********Query database by using an ID: 689, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:58.159 [main] GenericDao - **********Query by ID Found: User{userId = '689', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:00:58.160 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:58.178 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:00:58.179 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 21:00:58.180 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:00:58.199 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:00:58.200 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:58.215 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:00:58.284 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:58.285 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 21:00:58.285 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 21:00:58.318 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:00:58.318 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:00:58.385 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:58.386 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 21:00:58.387 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 21:00:58.409 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:00:58.452 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:58.453 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 21:00:58.454 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:58.473 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:00:58.474 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:58.488 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:00:58.488 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:00:58.488 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:58.503 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:00:58.504 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T21:00:58.454, ingredients = []}
[INFO ] 2019-05-12 21:00:58.559 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:58.559 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 21:00:58.559 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:58.584 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 21:00:58.584 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 21:00:58.603 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:00:58.604 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:00:58.659 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:58.659 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 21:00:58.660 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:00:58.715 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:00:58.763 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:58.763 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 21:00:58.763 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:58.775 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:00:58.776 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 21:00:58.795 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:00:58.795 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:00:58.803 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:00:58.813 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:00:58.815 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:00:58.820 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:58.825 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 21:00:58.879 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:58.879 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 21:00:58.879 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:58.943 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 21:00:58.989 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:58.990 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 21:00:58.990 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 21:00:59.031 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:00:59.079 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:59.080 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 21:00:59.080 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:00:59.085 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:00:59.085 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:00:59.085 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:00:59.087 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:00:59.091 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:00:59.095 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 21:00:59.141 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:59.144 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 21:00:59.144 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:59.152 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:00:59.153 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:00:59.144, ingredients = []}
[INFO ] 2019-05-12 21:00:59.153 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:00:59.144, ingredients = []}
[INFO ] 2019-05-12 21:00:59.159 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 593, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:00:59.144, ingredients = []}
[INFO ] 2019-05-12 21:00:59.159 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 21:00:59.159 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 21:00:59.217 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:00:59.217 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:00:59.226 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:00:59.226 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 21:00:59.241 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 593, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:00:59, ingredients = []}]
[INFO ] 2019-05-12 21:00:59.274 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:59.274 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 21:00:59.274 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:59.282 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:00:59.282 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 21:00:59.294 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:00:59.294 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 21:00:59.303 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 21:00:59.303 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 21:00:59.311 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:00:59.311 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:00:59.311 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:00:59.322 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 149, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:00:59.323 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:00:59.348 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 149, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:00:59.348 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:00:59.365 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 149, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:00:59.365 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:00:59.385 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 149, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:00:59.455 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:59.456 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 21:00:59.456 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:00:59.465 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 60, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:00:59.466 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:00:59.493 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 60, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 21:00:59.493 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 21:00:59.499 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 60, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:00:59.499 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 21:00:59.509 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 60, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:00:59.509 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 21:00:59.510 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:00:59.522 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:00:59.523 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:00:59.537 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:00:59.537 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:00:59.562 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 60, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 21:00:59.562 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 21:00:59.568 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:00:59.612 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:59.612 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 21:00:59.633 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:00:59.633 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 21:00:59.633 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:00:59.634 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:00:59.635 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:00:59.643 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:00:59.645 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:00:59.649 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 21:00:59.652 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 21:00:59.686 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:59.686 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 21:00:59.686 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:00:59.691 [main] GenericDao - **********Entity inserted: User{userId = '690', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:00:59.692 [main] GenericDao - **********Query database by using an ID: 690, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:59.696 [main] GenericDao - **********Query by ID Found: User{userId = '690', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:00:59.728 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:59.728 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 21:00:59.738 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:00:59.739 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:00:59.772 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:00:59.773 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 21:00:59.773 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:59.787 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 21:00:59.787 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:00:59.814 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 21:00:59.858 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:02:44.693 [http-nio-8080-exec-1] AddUserPage - User requested to add: User{userId = 'null', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-12 21:02:44.706 [http-nio-8080-exec-1] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-12 21:03:03.983 [http-nio-8080-exec-2] AddUserPage - User requested to add: User{userId = 'null', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}
[INFO ] 2019-05-12 21:03:03.984 [http-nio-8080-exec-2] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}
[INFO ] 2019-05-12 21:03:04.045 [http-nio-8080-exec-2] GenericDao - **********Entity inserted: User{userId = '24', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}
[INFO ] 2019-05-12 21:03:26.970 [http-nio-8080-exec-9] GenericDao - **********Query database by using an ID: 24, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:03:27.020 [http-nio-8080-exec-9] GenericDao - **********Query by ID Found: User{userId = '24', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}
[INFO ] 2019-05-12 21:03:27.020 [http-nio-8080-exec-9] DeleteUserPage - User ID requested to delete: User{userId = '24', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}
[INFO ] 2019-05-12 21:07:33.637 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 21:07:33.649 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 21:07:33.650 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 21:07:33.652 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 21:07:33.652 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 21:07:33.653 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 21:07:33.653 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 21:07:33.654 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 21:07:33.654 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 21:07:33.654 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 21:07:34.071 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:34.071 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 21:07:34.072 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 21:07:34.072 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:07:36.495 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:07:36.495 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:07:36.630 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:07:36.630 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 21:07:36.898 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:07:36.969 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:36.969 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 21:07:36.969 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:37.004 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 21:07:37.059 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:37.060 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 21:07:37.060 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:07:37.079 [main] GenericDao - **********Saved|Updated entity: User{userId = '691', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:07:37.080 [main] GenericDao - **********Query database by using an ID: 691, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:37.087 [main] GenericDao - **********Query by ID Found: User{userId = '691', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:07:37.087 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:37.103 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:07:37.103 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 21:07:37.103 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:07:37.122 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:07:37.122 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:37.137 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:07:37.182 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:37.182 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 21:07:37.182 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 21:07:37.213 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:07:37.214 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:07:37.260 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:37.260 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 21:07:37.261 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 21:07:37.286 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:07:37.339 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:37.339 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 21:07:37.340 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:37.354 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:07:37.357 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:37.378 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:07:37.379 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:07:37.381 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:37.401 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:07:37.402 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T21:07:37.340, ingredients = []}
[INFO ] 2019-05-12 21:07:37.480 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:37.481 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 21:07:37.481 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:37.511 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 21:07:37.511 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 21:07:37.526 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:07:37.526 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:07:37.578 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:37.579 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 21:07:37.579 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:07:37.630 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:07:37.681 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:37.681 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 21:07:37.682 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:37.688 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:07:37.689 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 21:07:37.718 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:07:37.719 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:07:37.724 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:07:37.730 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:07:37.732 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:07:37.737 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:37.742 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 21:07:37.791 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:37.791 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 21:07:37.792 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:37.855 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 21:07:37.901 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:37.901 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 21:07:37.901 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 21:07:37.944 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:07:37.994 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:37.995 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 21:07:37.995 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:07:37.999 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:07:37.999 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:07:38.000 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:07:38.001 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:07:38.007 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:07:38.011 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 21:07:38.047 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:38.048 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 21:07:38.048 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:38.056 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:07:38.056 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:07:38.048, ingredients = []}
[INFO ] 2019-05-12 21:07:38.056 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:07:38.048, ingredients = []}
[INFO ] 2019-05-12 21:07:38.062 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 594, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:07:38.048, ingredients = []}
[INFO ] 2019-05-12 21:07:38.063 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 21:07:38.063 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 21:07:38.075 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:07:38.076 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:07:38.083 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:07:38.083 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 21:07:38.099 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 594, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:07:38, ingredients = []}]
[INFO ] 2019-05-12 21:07:38.135 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:38.136 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 21:07:38.136 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:38.143 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:07:38.143 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 21:07:38.157 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:07:38.158 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 21:07:38.164 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 21:07:38.164 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 21:07:38.171 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:07:38.171 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:07:38.171 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:07:38.183 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 150, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:07:38.183 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:07:38.205 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 150, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:07:38.206 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:07:38.230 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 150, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:07:38.230 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:07:38.249 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 150, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:07:38.294 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:38.295 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 21:07:38.295 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:07:38.303 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 61, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:07:38.303 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:07:38.331 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 61, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 21:07:38.332 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 21:07:38.338 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 61, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:07:38.338 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 21:07:38.349 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 61, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:07:38.349 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 21:07:38.349 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:07:38.355 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:07:38.355 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:07:38.361 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:07:38.361 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:07:38.388 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 61, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 21:07:38.389 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 21:07:38.395 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:07:38.448 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:38.448 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 21:07:38.461 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:07:38.461 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 21:07:38.461 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:07:38.462 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:07:38.463 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:07:38.469 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:07:38.471 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:07:38.476 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 21:07:38.480 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 21:07:38.566 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:38.567 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 21:07:38.567 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:07:38.572 [main] GenericDao - **********Entity inserted: User{userId = '692', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:07:38.573 [main] GenericDao - **********Query database by using an ID: 692, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:38.577 [main] GenericDao - **********Query by ID Found: User{userId = '692', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:07:38.613 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:38.613 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 21:07:38.623 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:07:38.623 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:07:38.663 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:07:38.663 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 21:07:38.664 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:38.681 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 21:07:38.681 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:07:38.702 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 21:07:38.751 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:08:25.376 [http-nio-8080-exec-1] GenericDao - **********Query Using Last Name:  Phil, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:08:29.828 [http-nio-8080-exec-1] GenericDao - **********Query by Last Name Found: []
[INFO ] 2019-05-12 21:11:34.357 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 21:11:34.367 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 21:11:34.368 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 21:11:34.369 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 21:11:34.370 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 21:11:34.371 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 21:11:34.371 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 21:11:34.371 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 21:11:34.371 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 21:11:34.372 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 21:11:34.842 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:34.842 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 21:11:34.842 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 21:11:34.843 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:11:37.342 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:11:37.342 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:11:37.483 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:11:37.483 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 21:11:37.767 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:11:37.861 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:37.861 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 21:11:37.861 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:37.889 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 21:11:37.940 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:37.941 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 21:11:37.941 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:11:37.967 [main] GenericDao - **********Saved|Updated entity: User{userId = '693', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:11:37.968 [main] GenericDao - **********Query database by using an ID: 693, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:37.978 [main] GenericDao - **********Query by ID Found: User{userId = '693', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:11:37.978 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:37.995 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:11:37.995 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 21:11:37.995 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:11:38.013 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:11:38.013 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:38.033 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:11:38.081 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:38.082 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 21:11:38.082 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 21:11:38.112 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:11:38.113 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:11:38.165 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:38.165 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 21:11:38.166 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 21:11:38.184 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:11:38.241 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:38.242 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 21:11:38.243 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:38.256 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:11:38.256 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:38.271 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:11:38.271 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:11:38.272 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:38.286 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:11:38.286 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T21:11:38.243, ingredients = []}
[INFO ] 2019-05-12 21:11:38.348 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:38.348 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 21:11:38.349 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:38.376 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 21:11:38.376 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 21:11:38.390 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:11:38.391 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:11:38.440 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:38.441 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 21:11:38.442 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:11:38.492 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:11:38.551 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:38.551 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 21:11:38.551 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:38.558 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:11:38.558 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 21:11:38.578 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:11:38.578 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:11:38.581 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:11:38.587 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:11:38.589 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:11:38.594 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:38.600 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 21:11:38.648 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:38.649 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 21:11:38.649 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:38.721 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 21:11:38.808 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:38.809 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 21:11:38.809 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 21:11:38.845 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:11:38.886 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:38.886 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 21:11:38.886 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:11:38.891 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:11:38.891 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:11:38.892 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:11:38.893 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:11:38.898 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:11:38.902 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 21:11:38.934 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:38.934 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 21:11:38.935 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:38.944 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:11:38.944 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:11:38.935, ingredients = []}
[INFO ] 2019-05-12 21:11:38.944 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:11:38.935, ingredients = []}
[INFO ] 2019-05-12 21:11:38.952 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 595, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:11:38.935, ingredients = []}
[INFO ] 2019-05-12 21:11:38.953 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 21:11:38.954 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 21:11:38.971 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:11:38.971 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:11:38.981 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:11:38.981 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 21:11:38.995 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 595, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:11:39, ingredients = []}]
[INFO ] 2019-05-12 21:11:39.028 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:39.029 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 21:11:39.029 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:39.036 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:11:39.037 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 21:11:39.051 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:11:39.051 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 21:11:39.058 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 21:11:39.058 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 21:11:39.064 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:11:39.064 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:11:39.065 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:11:39.074 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 151, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:11:39.075 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:11:39.097 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 151, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:11:39.097 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:11:39.117 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 151, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:11:39.118 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:11:39.135 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 151, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:11:39.189 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:39.190 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 21:11:39.190 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:11:39.203 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 62, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:11:39.203 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:11:39.227 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 62, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 21:11:39.228 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 21:11:39.235 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 62, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:11:39.235 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 21:11:39.245 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 62, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:11:39.246 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 21:11:39.246 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:11:39.255 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:11:39.255 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:11:39.271 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:11:39.272 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:11:39.302 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 62, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 21:11:39.302 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 21:11:39.315 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:11:39.354 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:39.354 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 21:11:39.366 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:11:39.366 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 21:11:39.366 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:11:39.366 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:11:39.368 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:11:39.373 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:11:39.374 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:11:39.378 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 21:11:39.382 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 21:11:39.418 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:39.419 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 21:11:39.420 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:11:39.425 [main] GenericDao - **********Entity inserted: User{userId = '694', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:11:39.426 [main] GenericDao - **********Query database by using an ID: 694, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:39.429 [main] GenericDao - **********Query by ID Found: User{userId = '694', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:11:39.460 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:39.460 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 21:11:39.473 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:11:39.473 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:11:39.512 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:11:39.512 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 21:11:39.513 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:39.526 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 21:11:39.526 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:11:39.549 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 21:11:39.586 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:12:26.790 [http-nio-8080-exec-10] GenericDao - **********Query Using Last Name:  phil, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:12:34.290 [http-nio-8080-exec-10] GenericDao - **********Query by Last Name Found: []
[INFO ] 2019-05-12 21:17:06.931 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 21:17:06.941 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 21:17:06.941 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 21:17:06.943 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 21:17:06.943 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 21:17:06.944 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 21:17:06.944 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 21:17:06.944 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 21:17:06.944 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 21:17:06.944 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 21:17:07.374 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:07.374 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 21:17:07.374 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 21:17:07.375 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:17:09.781 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:17:09.782 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:17:09.832 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:17:09.834 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 21:17:10.132 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:17:10.219 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:10.220 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 21:17:10.220 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:10.248 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 21:17:10.313 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:10.313 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 21:17:10.314 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:17:10.332 [main] GenericDao - **********Saved|Updated entity: User{userId = '695', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:17:10.333 [main] GenericDao - **********Query database by using an ID: 695, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:10.340 [main] GenericDao - **********Query by ID Found: User{userId = '695', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:17:10.340 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:10.357 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:17:10.358 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 21:17:10.359 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:17:10.374 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:17:10.375 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:10.390 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:17:10.452 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:10.452 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 21:17:10.452 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 21:17:10.482 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:17:10.482 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:17:10.556 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:10.556 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 21:17:10.557 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 21:17:10.573 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:17:10.624 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:10.625 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 21:17:10.626 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:10.637 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:17:10.637 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:10.651 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:17:10.651 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:17:10.651 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:10.663 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:17:10.663 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T21:17:10.626, ingredients = []}
[INFO ] 2019-05-12 21:17:10.707 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:10.707 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 21:17:10.707 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:10.729 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 21:17:10.730 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 21:17:10.744 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:17:10.744 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:17:10.793 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:10.793 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 21:17:10.794 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:17:10.843 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:17:10.902 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:10.903 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 21:17:10.905 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:10.927 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:17:10.927 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 21:17:10.944 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:17:10.945 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:17:10.948 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:17:10.960 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:17:10.962 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:17:10.966 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:10.973 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 21:17:11.028 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:11.028 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 21:17:11.028 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:11.089 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 21:17:11.140 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:11.140 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 21:17:11.140 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 21:17:11.180 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:17:11.225 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:11.225 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 21:17:11.225 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:17:11.230 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:17:11.230 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:17:11.230 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:17:11.232 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:17:11.236 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:17:11.240 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 21:17:11.326 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:11.326 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 21:17:11.327 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:11.334 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:17:11.335 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:17:11.327, ingredients = []}
[INFO ] 2019-05-12 21:17:11.335 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:17:11.327, ingredients = []}
[INFO ] 2019-05-12 21:17:11.344 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 596, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:17:11.327, ingredients = []}
[INFO ] 2019-05-12 21:17:11.344 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 21:17:11.344 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 21:17:11.354 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:17:11.355 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:17:11.359 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:17:11.360 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 21:17:11.373 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 596, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:17:11, ingredients = []}]
[INFO ] 2019-05-12 21:17:11.411 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:11.412 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 21:17:11.412 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:11.423 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:17:11.424 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 21:17:11.438 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:17:11.438 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 21:17:11.445 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 21:17:11.445 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 21:17:11.452 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:17:11.453 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:17:11.453 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:17:11.470 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 152, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:17:11.471 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:17:11.490 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 152, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:17:11.490 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:17:11.514 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 152, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:17:11.514 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:17:11.532 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 152, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:17:11.582 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:11.582 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 21:17:11.582 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:17:11.591 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 63, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:17:11.591 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:17:11.619 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 63, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 21:17:11.619 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 21:17:11.625 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 63, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:17:11.626 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 21:17:11.636 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 63, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:17:11.637 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 21:17:11.637 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:17:11.647 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:17:11.647 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:17:11.661 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:17:11.661 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:17:11.688 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 63, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 21:17:11.689 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 21:17:11.696 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:17:11.734 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:11.735 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 21:17:11.744 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:17:11.745 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 21:17:11.745 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:17:11.745 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:17:11.746 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:17:11.753 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:17:11.755 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:17:11.759 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 21:17:11.762 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 21:17:11.799 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:11.800 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 21:17:11.800 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:17:11.805 [main] GenericDao - **********Entity inserted: User{userId = '696', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:17:11.805 [main] GenericDao - **********Query database by using an ID: 696, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:11.809 [main] GenericDao - **********Query by ID Found: User{userId = '696', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:17:11.843 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:11.843 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 21:17:11.853 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:17:11.854 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:17:11.895 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:11.895 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 21:17:11.895 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:11.906 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 21:17:11.906 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:11.927 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 21:17:11.969 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:17:53.451 [http-nio-8080-exec-10] GenericDao - **********Query Using Last Name:  phil, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:17:57.804 [http-nio-8080-exec-10] GenericDao - **********Query by Last Name Found: []
[INFO ] 2019-05-12 21:18:01.223 [http-nio-8080-exec-3] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:18:01.395 [http-nio-8080-exec-3] GenericDao - **********Get All Query Found: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, User{userId = '18', firstName = 'Andrew', lastName = 'Park', userName = 'Apark', userPassword = 'AdminMan'}, User{userId = '22', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}, User{userId = '24', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}]
[INFO ] 2019-05-12 21:18:33.854 [http-nio-8080-exec-10] GenericDao - **********Query database by using an ID: 22, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:18:33.863 [http-nio-8080-exec-10] GenericDao - **********Query by ID Found: User{userId = '22', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-12 21:18:33.863 [http-nio-8080-exec-10] DeleteUserPage - User ID requested to delete: User{userId = '22', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-12 21:19:06.430 [http-nio-8080-exec-3] GenericDao - **********Query database by using an ID: 24, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:19:06.436 [http-nio-8080-exec-3] GenericDao - **********Query by ID Found: User{userId = '24', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}
[INFO ] 2019-05-12 21:19:06.437 [http-nio-8080-exec-3] DeleteUserPage - User ID requested to delete: User{userId = '24', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}
[INFO ] 2019-05-12 21:19:11.293 [http-nio-8080-exec-7] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:19:11.374 [http-nio-8080-exec-7] GenericDao - **********Get All Query Found: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, User{userId = '18', firstName = 'Andrew', lastName = 'Park', userName = 'Apark', userPassword = 'AdminMan'}, User{userId = '22', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}, User{userId = '24', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}]
[INFO ] 2019-05-12 21:19:31.522 [http-nio-8080-exec-2] GenericDao - **********Query database by using an ID: 22, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:19:31.527 [http-nio-8080-exec-2] GenericDao - **********Query by ID Found: User{userId = '22', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-12 21:19:31.527 [http-nio-8080-exec-2] DeleteUserPage - User ID requested to delete: User{userId = '22', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-12 21:21:12.473 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 21:21:12.482 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 21:21:12.483 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 21:21:12.485 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 21:21:12.485 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 21:21:12.486 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 21:21:12.487 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 21:21:12.487 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 21:21:12.488 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 21:21:12.488 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 21:21:12.928 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:12.928 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 21:21:12.929 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 21:21:12.929 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:21:15.275 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:21:15.275 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:21:15.382 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:21:15.383 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 21:21:15.631 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:21:15.729 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:15.730 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 21:21:15.730 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:15.762 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 21:21:15.818 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:15.818 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 21:21:15.819 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:21:15.837 [main] GenericDao - **********Saved|Updated entity: User{userId = '697', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:21:15.838 [main] GenericDao - **********Query database by using an ID: 697, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:15.846 [main] GenericDao - **********Query by ID Found: User{userId = '697', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 21:21:15.847 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:15.859 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:21:15.859 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 21:21:15.860 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:21:15.879 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:21:15.880 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:15.902 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 21:21:15.968 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:15.968 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 21:21:15.969 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 21:21:16.002 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:21:16.002 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:21:16.062 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:16.063 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 21:21:16.065 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 21:21:16.090 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:21:16.151 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:16.152 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 21:21:16.153 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:16.162 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:21:16.163 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:16.181 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:21:16.181 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:21:16.181 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:16.195 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:21:16.195 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T21:21:16.152, ingredients = []}
[INFO ] 2019-05-12 21:21:16.250 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:16.251 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 21:21:16.251 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:16.279 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 21:21:16.279 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 21:21:16.297 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:21:16.297 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:21:16.363 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:16.363 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 21:21:16.363 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:21:16.418 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:21:16.470 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:16.471 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 21:21:16.471 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:16.477 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:21:16.478 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 21:21:16.495 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:21:16.495 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:21:16.500 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:21:16.507 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:21:16.509 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 21:21:16.521 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:16.527 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 21:21:16.572 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:16.573 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 21:21:16.573 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:16.639 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 21:21:16.710 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:16.710 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 21:21:16.710 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 21:21:16.750 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:21:16.848 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:16.848 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 21:21:16.848 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:21:16.853 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:21:16.853 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:21:16.853 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:21:16.855 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:21:16.862 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 21:21:16.866 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 21:21:16.901 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:16.902 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 21:21:16.902 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:16.910 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:21:16.910 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:21:16.902, ingredients = []}
[INFO ] 2019-05-12 21:21:16.910 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:21:16.902, ingredients = []}
[INFO ] 2019-05-12 21:21:16.916 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 597, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:21:16.902, ingredients = []}
[INFO ] 2019-05-12 21:21:16.916 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 21:21:16.916 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 21:21:16.935 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:21:16.936 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:21:16.943 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:21:16.943 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 21:21:16.956 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 597, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T21:21:17, ingredients = []}]
[INFO ] 2019-05-12 21:21:16.993 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:16.994 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 21:21:16.994 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:17.002 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 21:21:17.002 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 21:21:17.021 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:21:17.022 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 21:21:17.029 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 21:21:17.030 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 21:21:17.036 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:21:17.037 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:21:17.037 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:21:17.051 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 153, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 21:21:17.052 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:21:17.073 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 153, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:21:17.074 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:21:17.091 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 153, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:21:17.091 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 21:21:17.123 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 153, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 21:21:17.182 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:17.182 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 21:21:17.182 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:21:17.190 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 64, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:21:17.190 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:21:17.219 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 64, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 21:21:17.220 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 21:21:17.226 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 64, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:21:17.226 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 21:21:17.234 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 64, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 21:21:17.234 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 21:21:17.234 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:21:17.240 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 21:21:17.241 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:21:17.250 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:21:17.251 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 21:21:17.275 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 64, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 21:21:17.275 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 21:21:17.288 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 21:21:17.323 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:17.323 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 21:21:17.334 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:21:17.335 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 21:21:17.336 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 21:21:17.336 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:21:17.337 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:21:17.341 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:21:17.343 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:21:17.347 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 21:21:17.350 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 21:21:17.391 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:17.392 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 21:21:17.392 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:21:17.397 [main] GenericDao - **********Entity inserted: User{userId = '698', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:21:17.397 [main] GenericDao - **********Query database by using an ID: 698, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:17.401 [main] GenericDao - **********Query by ID Found: User{userId = '698', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 21:21:17.430 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:17.431 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 21:21:17.442 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:21:17.442 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 21:21:17.480 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:21:17.480 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 21:21:17.480 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:17.492 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 21:21:17.493 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:21:17.513 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 21:21:17.556 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 21:32:17.521 [http-nio-8080-exec-9] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 21:32:22.827 [http-nio-8080-exec-9] GenericDao - **********Get All Query Found: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, User{userId = '18', firstName = 'Andrew', lastName = 'Park', userName = 'Apark', userPassword = 'AdminMan'}, User{userId = '22', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}, User{userId = '24', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}]
[INFO ] 2019-05-12 22:02:38.916 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 22:02:38.925 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 22:02:38.926 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 22:02:38.928 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 22:02:38.928 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 22:02:38.929 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 22:02:38.929 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 22:02:38.929 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 22:02:38.929 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 22:02:38.930 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 22:02:39.532 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:39.533 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 22:02:39.533 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 22:02:39.533 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:02:42.116 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:02:42.116 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:02:42.186 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:02:42.187 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 22:02:42.471 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:02:42.569 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:42.569 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 22:02:42.570 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:42.596 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 22:02:42.646 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:42.646 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 22:02:42.647 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:02:42.665 [main] GenericDao - **********Saved|Updated entity: User{userId = '699', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:02:42.665 [main] GenericDao - **********Query database by using an ID: 699, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:42.671 [main] GenericDao - **********Query by ID Found: User{userId = '699', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:02:42.671 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:42.683 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:02:42.684 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 22:02:42.685 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:02:42.707 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:02:42.708 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:42.726 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:02:42.792 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:42.793 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 22:02:42.793 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 22:02:42.822 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:02:42.822 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:02:42.884 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:42.885 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 22:02:42.885 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:02:42.905 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:02:42.963 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:42.965 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 22:02:42.968 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:42.992 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:02:42.992 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:43.019 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:02:43.019 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:02:43.019 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:43.051 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:02:43.052 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T22:02:42.968, ingredients = []}
[INFO ] 2019-05-12 22:02:43.129 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:43.132 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 22:02:43.134 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:43.157 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:02:43.157 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:02:43.174 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:02:43.175 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:02:43.246 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:43.247 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 22:02:43.248 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:02:43.308 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:02:43.380 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:43.380 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 22:02:43.381 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:43.390 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:02:43.390 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 22:02:43.419 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:02:43.419 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:02:43.423 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:02:43.431 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:02:43.435 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:02:43.446 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:43.450 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:02:43.515 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:43.516 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 22:02:43.516 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:43.589 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:02:43.644 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:43.645 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 22:02:43.645 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:02:43.700 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:02:43.748 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:43.749 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 22:02:43.749 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:02:43.754 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:02:43.754 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:02:43.754 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:02:43.756 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:02:43.760 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:02:43.771 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:02:43.843 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:43.843 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 22:02:43.843 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:43.851 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:02:43.852 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:02:43.843, ingredients = []}
[INFO ] 2019-05-12 22:02:43.852 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:02:43.843, ingredients = []}
[INFO ] 2019-05-12 22:02:43.858 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 598, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:02:43.843, ingredients = []}
[INFO ] 2019-05-12 22:02:43.859 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 22:02:43.859 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 22:02:43.878 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:02:43.878 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:02:43.884 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:02:43.885 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 22:02:43.904 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 598, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:02:44, ingredients = []}]
[INFO ] 2019-05-12 22:02:43.953 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:43.954 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 22:02:43.954 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:43.967 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:02:43.967 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 22:02:43.989 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:02:43.990 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 22:02:43.996 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 22:02:43.996 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 22:02:44.003 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:02:44.003 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:02:44.003 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:02:44.020 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 154, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:02:44.021 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:02:44.042 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 154, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:02:44.043 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:02:44.061 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 154, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:02:44.062 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:02:44.088 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 154, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:02:44.162 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:44.162 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 22:02:44.163 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:02:44.170 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 65, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:02:44.170 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:02:44.205 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 65, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:02:44.205 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 22:02:44.217 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 65, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:02:44.218 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 22:02:44.234 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 65, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:02:44.235 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 22:02:44.235 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:02:44.245 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:02:44.245 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:02:44.254 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:02:44.255 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:02:44.285 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 65, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:02:44.286 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 22:02:44.298 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:02:44.347 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:44.348 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:02:44.360 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:02:44.360 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 22:02:44.360 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:02:44.360 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:02:44.364 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:02:44.374 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:02:44.376 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:02:44.382 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:02:44.386 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 22:02:44.436 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:44.437 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 22:02:44.438 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:02:44.445 [main] GenericDao - **********Entity inserted: User{userId = '700', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:02:44.446 [main] GenericDao - **********Query database by using an ID: 700, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:44.450 [main] GenericDao - **********Query by ID Found: User{userId = '700', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:02:44.487 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:44.487 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:02:44.503 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:02:44.504 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:02:44.550 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:02:44.551 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 22:02:44.551 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:44.566 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:02:44.566 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:02:44.599 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:02:44.688 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:03:34.276 [http-nio-8080-exec-1] GenericDao - **********Query Using Last Name:  phil, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:03:38.820 [http-nio-8080-exec-1] GenericDao - **********Query by Last Name Found: []
[INFO ] 2019-05-12 22:15:50.373 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 22:15:50.384 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 22:15:50.385 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 22:15:50.387 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 22:15:50.388 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 22:15:50.389 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 22:15:50.389 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 22:15:50.390 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 22:15:50.390 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 22:15:50.390 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 22:15:50.923 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:50.923 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 22:15:50.924 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 22:15:50.925 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:15:53.784 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:15:53.785 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:15:53.871 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:15:53.871 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 22:15:54.147 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:15:54.212 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:54.212 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 22:15:54.213 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:54.256 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 22:15:54.322 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:54.323 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 22:15:54.323 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:15:54.351 [main] GenericDao - **********Saved|Updated entity: User{userId = '701', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:15:54.352 [main] GenericDao - **********Query database by using an ID: 701, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:54.359 [main] GenericDao - **********Query by ID Found: User{userId = '701', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:15:54.359 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:54.383 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:15:54.384 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 22:15:54.384 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:15:54.408 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:15:54.409 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:54.432 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:15:54.497 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:54.498 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 22:15:54.498 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 22:15:54.527 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:15:54.527 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:15:54.590 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:54.591 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 22:15:54.592 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:15:54.611 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:15:54.674 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:54.676 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 22:15:54.677 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:54.701 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:15:54.702 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:54.713 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:15:54.714 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:15:54.714 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:54.730 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:15:54.731 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T22:15:54.676, ingredients = []}
[INFO ] 2019-05-12 22:15:54.789 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:54.790 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 22:15:54.790 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:54.825 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:15:54.825 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:15:54.840 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:15:54.840 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:15:54.896 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:54.897 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 22:15:54.898 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:15:54.956 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:15:55.003 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:55.004 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 22:15:55.005 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:55.023 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:15:55.025 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 22:15:55.040 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:15:55.040 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:15:55.049 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:15:55.062 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:15:55.064 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:15:55.068 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:55.073 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:15:55.123 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:55.124 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 22:15:55.125 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:55.209 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:15:55.261 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:55.262 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 22:15:55.262 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:15:55.317 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:15:55.362 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:55.362 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 22:15:55.362 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:15:55.369 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:15:55.369 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:15:55.369 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:15:55.372 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:15:55.377 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:15:55.380 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:15:55.428 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:55.429 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 22:15:55.429 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:55.437 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:15:55.437 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:15:55.429, ingredients = []}
[INFO ] 2019-05-12 22:15:55.437 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:15:55.429, ingredients = []}
[INFO ] 2019-05-12 22:15:55.448 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 599, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:15:55.429, ingredients = []}
[INFO ] 2019-05-12 22:15:55.448 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 22:15:55.448 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 22:15:55.461 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:15:55.461 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:15:55.468 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:15:55.468 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 22:15:55.496 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 599, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:15:55, ingredients = []}]
[INFO ] 2019-05-12 22:15:55.532 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:55.533 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 22:15:55.534 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:55.541 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:15:55.542 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 22:15:55.554 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:15:55.555 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 22:15:55.561 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 22:15:55.562 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 22:15:55.591 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:15:55.591 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:15:55.591 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:15:55.608 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 155, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:15:55.608 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:15:55.633 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 155, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:15:55.633 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:15:55.651 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 155, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:15:55.651 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:15:55.682 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 155, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:15:55.751 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:55.752 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 22:15:55.752 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:15:55.775 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 66, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:15:55.776 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:15:55.808 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 66, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:15:55.809 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 22:15:55.821 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 66, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:15:55.822 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 22:15:55.831 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 66, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:15:55.831 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 22:15:55.831 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:15:55.841 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:15:55.842 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:15:55.859 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:15:55.859 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:15:55.895 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 66, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:15:55.896 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 22:15:55.904 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:15:55.962 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:55.963 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:15:55.980 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:15:55.980 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 22:15:55.981 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:15:55.981 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:15:55.982 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:15:55.990 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:15:55.992 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:15:55.998 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:15:56.002 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 22:15:56.043 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:56.043 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 22:15:56.043 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:15:56.049 [main] GenericDao - **********Entity inserted: User{userId = '702', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:15:56.049 [main] GenericDao - **********Query database by using an ID: 702, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:56.053 [main] GenericDao - **********Query by ID Found: User{userId = '702', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:15:56.101 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:56.101 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:15:56.120 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:15:56.120 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:15:56.165 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:15:56.165 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 22:15:56.165 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:56.193 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:15:56.194 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:15:56.220 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:15:56.270 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:17:00.288 [http-nio-8080-exec-9] GenericDao - **********Query Using Last Name:  phik, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:17:05.018 [http-nio-8080-exec-9] GenericDao - **********Query by Last Name Found: []
[INFO ] 2019-05-12 22:20:36.562 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 22:20:36.572 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 22:20:36.572 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 22:20:36.574 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 22:20:36.574 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 22:20:36.574 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 22:20:36.575 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 22:20:36.575 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 22:20:36.575 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 22:20:36.576 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 22:20:37.067 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:37.068 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 22:20:37.068 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 22:20:37.069 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:20:40.099 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:20:40.102 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:20:40.324 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:20:40.325 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 22:20:40.790 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:20:40.926 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:40.926 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 22:20:40.927 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:40.996 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 22:20:41.096 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:41.097 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 22:20:41.097 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:20:41.132 [main] GenericDao - **********Saved|Updated entity: User{userId = '703', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:20:41.133 [main] GenericDao - **********Query database by using an ID: 703, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:41.142 [main] GenericDao - **********Query by ID Found: User{userId = '703', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:20:41.142 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:41.170 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:20:41.170 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 22:20:41.171 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:20:41.196 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:20:41.198 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:41.220 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:20:41.406 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:41.406 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 22:20:41.407 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 22:20:41.486 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:20:41.487 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:20:41.668 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:41.669 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 22:20:41.670 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:20:41.697 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:20:41.824 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:41.825 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 22:20:41.826 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:41.842 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:20:41.844 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:41.864 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:20:41.865 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:20:41.865 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:41.885 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:20:41.885 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T22:20:41.826, ingredients = []}
[INFO ] 2019-05-12 22:20:42.027 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:42.029 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 22:20:42.029 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:42.078 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:20:42.078 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:20:42.103 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:20:42.103 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:20:42.155 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:42.182 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 22:20:42.185 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:20:42.318 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:20:42.423 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:42.424 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 22:20:42.424 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:42.430 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:20:42.430 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 22:20:42.443 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:20:42.444 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:20:42.451 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:20:42.463 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:20:42.464 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:20:42.469 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:42.473 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:20:42.526 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:42.526 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 22:20:42.526 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:42.592 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:20:42.689 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:42.689 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 22:20:42.690 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:20:42.738 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:20:42.778 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:42.778 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 22:20:42.779 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:20:42.788 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:20:42.789 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:20:42.790 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:20:42.795 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:20:42.803 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:20:42.807 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:20:42.859 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:42.860 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 22:20:42.860 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:42.871 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:20:42.871 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:20:42.860, ingredients = []}
[INFO ] 2019-05-12 22:20:42.871 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:20:42.860, ingredients = []}
[INFO ] 2019-05-12 22:20:42.877 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 600, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:20:42.860, ingredients = []}
[INFO ] 2019-05-12 22:20:42.878 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 22:20:42.878 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 22:20:42.889 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:20:42.890 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:20:42.903 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:20:42.903 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 22:20:42.919 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 600, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:20:43, ingredients = []}]
[INFO ] 2019-05-12 22:20:42.954 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:42.954 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 22:20:42.955 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:42.962 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:20:42.963 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 22:20:42.983 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:20:42.983 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 22:20:42.990 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 22:20:42.990 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 22:20:42.999 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:20:42.999 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:20:42.999 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:20:43.020 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 156, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:20:43.022 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:20:43.066 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 156, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:20:43.066 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:20:43.089 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 156, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:20:43.091 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:20:43.119 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 156, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:20:43.181 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:43.183 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 22:20:43.183 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:20:43.194 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 67, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:20:43.194 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:20:43.236 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 67, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:20:43.236 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 22:20:43.243 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 67, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:20:43.243 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 22:20:43.252 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 67, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:20:43.252 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 22:20:43.252 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:20:43.266 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:20:43.267 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:20:43.287 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:20:43.288 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:20:43.328 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 67, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:20:43.329 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 22:20:43.335 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:20:43.385 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:43.385 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:20:43.396 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:20:43.396 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 22:20:43.397 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:20:43.397 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:20:43.398 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:20:43.404 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:20:43.406 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:20:43.411 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:20:43.415 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 22:20:43.457 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:43.458 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 22:20:43.458 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:20:43.477 [main] GenericDao - **********Entity inserted: User{userId = '704', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:20:43.478 [main] GenericDao - **********Query database by using an ID: 704, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:43.482 [main] GenericDao - **********Query by ID Found: User{userId = '704', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:20:43.527 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:43.527 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:20:43.542 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:20:43.543 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:20:43.595 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:20:43.595 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 22:20:43.596 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:43.617 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:20:43.618 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:20:43.656 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:20:43.712 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:21:45.568 [http-nio-8080-exec-9] GenericDao - **********Query Using Last Name:  phil, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:21:50.492 [http-nio-8080-exec-9] GenericDao - **********Query by Last Name Found: []
[INFO ] 2019-05-12 22:26:40.495 [http-nio-8080-exec-10] GenericDao - **********Query database by using an ID: 609, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:26:40.529 [http-nio-8080-exec-10] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:26:40.530 [http-nio-8080-exec-10] GenericDao - **********Attempting to delete: null
[INFO ] 2019-05-12 22:29:34.583 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 22:29:34.595 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 22:29:34.596 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 22:29:34.598 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 22:29:34.599 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 22:29:34.599 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 22:29:34.600 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 22:29:34.601 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 22:29:34.602 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 22:29:34.602 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 22:29:35.204 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:35.205 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 22:29:35.205 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 22:29:35.205 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:29:38.878 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:29:38.879 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:29:38.984 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:29:38.984 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 22:29:39.456 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:29:39.532 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:39.533 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 22:29:39.533 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:39.575 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 22:29:39.633 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:39.633 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 22:29:39.633 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:29:39.652 [main] GenericDao - **********Saved|Updated entity: User{userId = '705', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:29:39.653 [main] GenericDao - **********Query database by using an ID: 705, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:39.662 [main] GenericDao - **********Query by ID Found: User{userId = '705', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:29:39.662 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:39.692 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:29:39.692 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 22:29:39.693 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:29:39.715 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:29:39.716 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:39.735 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:29:39.837 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:39.839 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 22:29:39.840 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 22:29:39.873 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:29:39.873 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:29:39.941 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:39.942 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 22:29:39.943 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:29:39.962 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:29:40.021 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:40.021 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 22:29:40.022 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:40.034 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:29:40.034 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:40.054 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:29:40.054 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:29:40.055 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:40.066 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:29:40.067 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T22:29:40.022, ingredients = []}
[INFO ] 2019-05-12 22:29:40.120 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:40.121 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 22:29:40.121 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:40.141 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:29:40.142 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:29:40.156 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:29:40.157 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:29:40.208 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:40.209 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 22:29:40.209 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:29:40.284 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:29:40.340 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:40.341 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 22:29:40.341 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:40.346 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:29:40.347 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 22:29:40.366 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:29:40.366 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:29:40.370 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:29:40.377 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:29:40.378 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:29:40.384 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:40.388 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:29:40.436 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:40.436 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 22:29:40.436 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:40.510 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:29:40.589 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:40.590 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 22:29:40.590 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:29:40.632 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:29:40.674 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:40.675 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 22:29:40.675 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:29:40.681 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:29:40.681 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:29:40.682 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:29:40.683 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:29:40.686 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:29:40.690 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:29:40.723 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:40.724 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 22:29:40.724 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:40.733 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:29:40.733 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:29:40.724, ingredients = []}
[INFO ] 2019-05-12 22:29:40.733 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:29:40.724, ingredients = []}
[INFO ] 2019-05-12 22:29:40.741 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 601, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:29:40.724, ingredients = []}
[INFO ] 2019-05-12 22:29:40.741 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 22:29:40.741 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 22:29:40.755 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:29:40.755 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:29:40.764 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:29:40.764 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 22:29:40.781 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 601, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:29:41, ingredients = []}]
[INFO ] 2019-05-12 22:29:40.831 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:40.831 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 22:29:40.831 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:40.841 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:29:40.841 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 22:29:40.864 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:29:40.864 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 22:29:40.872 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 22:29:40.873 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 22:29:40.880 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:29:40.880 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:29:40.880 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:29:40.900 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 157, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:29:40.900 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:29:40.925 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 157, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:29:40.926 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:29:40.942 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 157, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:29:40.942 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:29:40.975 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 157, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:29:41.047 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:41.048 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 22:29:41.053 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:29:41.071 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 68, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:29:41.072 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:29:41.122 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 68, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:29:41.123 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 22:29:41.133 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 68, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:29:41.133 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 22:29:41.151 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 68, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:29:41.153 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 22:29:41.154 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:29:41.174 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:29:41.174 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:29:41.190 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:29:41.191 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:29:41.220 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 68, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:29:41.220 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 22:29:41.227 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:29:41.271 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:41.272 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:29:41.284 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:29:41.284 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 22:29:41.284 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:29:41.284 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:29:41.285 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:29:41.289 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:29:41.291 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:29:41.304 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:29:41.309 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 22:29:41.366 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:41.366 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 22:29:41.366 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:29:41.372 [main] GenericDao - **********Entity inserted: User{userId = '706', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:29:41.373 [main] GenericDao - **********Query database by using an ID: 706, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:41.380 [main] GenericDao - **********Query by ID Found: User{userId = '706', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:29:41.426 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:41.427 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:29:41.441 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:29:41.441 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:29:41.494 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:29:41.494 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 22:29:41.494 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:41.512 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:29:41.512 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:29:41.536 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:29:41.575 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:30:37.560 [http-nio-8080-exec-6] GenericDao - **********Query database by using an ID: 69, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:30:41.464 [http-nio-8080-exec-6] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:30:41.464 [http-nio-8080-exec-6] GenericDao - **********Attempting to delete: null
[INFO ] 2019-05-12 22:33:30.558 [http-nio-8080-exec-1] GenericDao - **********Query database by using an ID: 69, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:33:30.570 [http-nio-8080-exec-1] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:33:30.570 [http-nio-8080-exec-1] GenericDao - **********Attempting to delete: null
[INFO ] 2019-05-12 22:36:25.278 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 22:36:25.288 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 22:36:25.289 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 22:36:25.291 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 22:36:25.292 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 22:36:25.292 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 22:36:25.292 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 22:36:25.293 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 22:36:25.293 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 22:36:25.293 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 22:36:25.790 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:25.791 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 22:36:25.791 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 22:36:25.791 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:36:29.021 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:36:29.021 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:36:29.150 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:36:29.151 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 22:36:29.419 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:36:29.546 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:29.548 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 22:36:29.548 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:29.590 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 22:36:29.655 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:29.656 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 22:36:29.656 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:36:29.682 [main] GenericDao - **********Saved|Updated entity: User{userId = '707', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:36:29.683 [main] GenericDao - **********Query database by using an ID: 707, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:29.690 [main] GenericDao - **********Query by ID Found: User{userId = '707', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:36:29.690 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:29.709 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:36:29.709 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 22:36:29.709 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:36:29.745 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:36:29.745 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:29.766 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:36:29.839 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:29.839 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 22:36:29.839 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 22:36:29.883 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:36:29.883 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:36:29.972 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:29.976 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 22:36:29.978 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:36:30.017 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:36:30.113 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:30.113 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 22:36:30.114 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:30.141 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:36:30.142 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:30.177 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:36:30.177 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:36:30.181 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:30.206 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:36:30.206 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T22:36:30.114, ingredients = []}
[INFO ] 2019-05-12 22:36:30.279 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:30.280 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 22:36:30.280 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:30.305 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:36:30.306 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:36:30.321 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:36:30.321 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:36:30.377 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:30.378 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 22:36:30.380 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:36:30.469 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:36:30.532 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:30.533 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 22:36:30.534 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:30.541 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:36:30.542 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 22:36:30.558 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:36:30.559 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:36:30.563 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:36:30.571 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:36:30.573 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:36:30.581 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:30.593 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:36:30.648 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:30.649 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 22:36:30.649 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:30.752 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:36:30.809 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:30.810 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 22:36:30.810 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:36:30.869 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:36:30.964 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:30.964 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 22:36:30.964 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:36:30.970 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:36:30.971 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:36:30.971 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:36:30.972 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:36:30.976 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:36:30.981 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:36:31.029 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:31.029 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 22:36:31.029 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:31.038 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:36:31.039 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:36:31.029, ingredients = []}
[INFO ] 2019-05-12 22:36:31.039 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:36:31.029, ingredients = []}
[INFO ] 2019-05-12 22:36:31.047 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 602, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:36:31.029, ingredients = []}
[INFO ] 2019-05-12 22:36:31.048 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 22:36:31.050 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 22:36:31.069 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:36:31.069 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:36:31.076 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:36:31.077 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 22:36:31.103 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 602, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:36:31, ingredients = []}]
[INFO ] 2019-05-12 22:36:31.149 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:31.149 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 22:36:31.150 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:31.161 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:36:31.161 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 22:36:31.177 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:36:31.177 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 22:36:31.188 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 22:36:31.188 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 22:36:31.195 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:36:31.196 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:36:31.196 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:36:31.216 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 158, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:36:31.217 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:36:31.245 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 158, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:36:31.245 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:36:31.277 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 158, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:36:31.277 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:36:31.314 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 158, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:36:31.385 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:31.386 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 22:36:31.386 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:36:31.399 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 69, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:36:31.399 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:36:31.434 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 69, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:36:31.434 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 22:36:31.441 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 69, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:36:31.441 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 22:36:31.459 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 69, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:36:31.460 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 22:36:31.460 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:36:31.469 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:36:31.469 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:36:31.490 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:36:31.490 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:36:31.515 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 69, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:36:31.516 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 22:36:31.528 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:36:31.578 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:31.578 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:36:31.594 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:36:31.594 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 22:36:31.595 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:36:31.595 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:36:31.596 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:36:31.601 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:36:31.602 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:36:31.611 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:36:31.615 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 22:36:31.653 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:31.653 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 22:36:31.654 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:36:31.659 [main] GenericDao - **********Entity inserted: User{userId = '708', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:36:31.659 [main] GenericDao - **********Query database by using an ID: 708, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:31.664 [main] GenericDao - **********Query by ID Found: User{userId = '708', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:36:31.717 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:31.717 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:36:31.729 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:36:31.729 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:36:31.784 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:36:31.784 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 22:36:31.785 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:31.819 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:36:31.819 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:36:31.853 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:36:31.896 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:54.323 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 22:37:54.333 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 22:37:54.334 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 22:37:54.337 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 22:37:54.338 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 22:37:54.339 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 22:37:54.339 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 22:37:54.339 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 22:37:54.339 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 22:37:54.340 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 22:37:54.755 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:54.756 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 22:37:54.756 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 22:37:54.757 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:37:57.249 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:37:57.250 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:37:57.299 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:37:57.300 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 22:37:57.584 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:37:57.678 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:57.679 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 22:37:57.679 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:57.711 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 22:37:57.763 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:57.763 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 22:37:57.764 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:37:57.784 [main] GenericDao - **********Saved|Updated entity: User{userId = '709', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:37:57.784 [main] GenericDao - **********Query database by using an ID: 709, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:57.790 [main] GenericDao - **********Query by ID Found: User{userId = '709', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:37:57.790 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:57.803 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:37:57.803 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 22:37:57.804 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:37:57.826 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:37:57.826 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:57.840 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:37:57.891 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:57.891 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 22:37:57.892 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 22:37:57.931 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:37:57.932 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:37:57.998 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:57.999 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 22:37:57.999 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:37:58.020 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:37:58.075 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:58.076 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 22:37:58.080 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:58.100 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:37:58.100 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:58.120 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:37:58.121 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:37:58.125 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:58.143 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:37:58.143 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T22:37:58.080, ingredients = []}
[INFO ] 2019-05-12 22:37:58.211 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:58.211 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 22:37:58.212 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:58.234 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:37:58.235 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:37:58.256 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:37:58.256 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:37:58.321 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:58.322 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 22:37:58.323 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:37:58.400 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:37:58.456 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:58.457 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 22:37:58.457 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:58.463 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:37:58.463 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 22:37:58.487 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:37:58.487 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:37:58.491 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:37:58.499 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:37:58.500 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:37:58.509 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:58.517 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:37:58.572 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:58.573 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 22:37:58.573 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:58.648 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:37:58.709 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:58.710 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 22:37:58.710 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:37:58.759 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:37:58.869 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:58.870 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 22:37:58.870 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:37:58.875 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:37:58.875 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:37:58.875 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:37:58.876 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:37:58.881 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:37:58.887 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:37:58.925 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:58.926 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 22:37:58.926 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:58.934 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:37:58.934 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:37:58.926, ingredients = []}
[INFO ] 2019-05-12 22:37:58.935 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:37:58.926, ingredients = []}
[INFO ] 2019-05-12 22:37:58.941 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 603, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:37:58.926, ingredients = []}
[INFO ] 2019-05-12 22:37:58.942 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 22:37:58.942 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 22:37:58.957 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:37:58.958 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:37:58.964 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:37:58.964 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 22:37:58.978 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 603, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:37:59, ingredients = []}]
[INFO ] 2019-05-12 22:37:59.020 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:59.022 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 22:37:59.023 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:59.037 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:37:59.038 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 22:37:59.050 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:37:59.051 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 22:37:59.062 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 22:37:59.063 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 22:37:59.077 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:37:59.077 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:37:59.078 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:37:59.089 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 159, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:37:59.089 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:37:59.126 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 159, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:37:59.126 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:37:59.145 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 159, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:37:59.146 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:37:59.171 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 159, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:37:59.234 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:59.235 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 22:37:59.235 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:37:59.246 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 70, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:37:59.247 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:37:59.281 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 70, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:37:59.281 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 22:37:59.287 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 70, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:37:59.287 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 22:37:59.313 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 70, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:37:59.313 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 22:37:59.314 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:37:59.323 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:37:59.324 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:37:59.340 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:37:59.340 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:37:59.376 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 70, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:37:59.377 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 22:37:59.383 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:37:59.440 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:59.441 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:37:59.459 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:37:59.460 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 22:37:59.460 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:37:59.460 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:37:59.462 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:37:59.470 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:37:59.472 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:37:59.475 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:37:59.481 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 22:37:59.525 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:59.525 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 22:37:59.526 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:37:59.533 [main] GenericDao - **********Entity inserted: User{userId = '710', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:37:59.533 [main] GenericDao - **********Query database by using an ID: 710, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:59.537 [main] GenericDao - **********Query by ID Found: User{userId = '710', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:37:59.574 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:59.574 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:37:59.584 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:37:59.584 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:37:59.631 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:37:59.631 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 22:37:59.632 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:59.644 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:37:59.644 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:37:59.673 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:37:59.722 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:38:54.068 [http-nio-8080-exec-7] GenericDao - **********Query database by using an ID: 908, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:38:58.156 [http-nio-8080-exec-7] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:38:58.156 [http-nio-8080-exec-7] GenericDao - **********Attempting to delete: null
[ERROR] 2019-05-12 22:38:58.162 [http-nio-8080-exec-7] GenericDao - **********Error while trying to delete entity: null - java.lang.IllegalArgumentException: attempt to create delete event with null entity
[INFO ] 2019-05-12 22:38:58.163 [http-nio-8080-exec-7] DeleteUserPage - User ID requested to delete: null
[INFO ] 2019-05-12 22:39:16.437 [http-nio-8080-exec-8] GenericDao - **********Query database by using an ID: 69, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:39:16.449 [http-nio-8080-exec-8] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:39:16.449 [http-nio-8080-exec-8] GenericDao - **********Attempting to delete: null
[ERROR] 2019-05-12 22:39:16.450 [http-nio-8080-exec-8] GenericDao - **********Error while trying to delete entity: null - java.lang.IllegalArgumentException: attempt to create delete event with null entity
[INFO ] 2019-05-12 22:39:16.450 [http-nio-8080-exec-8] DeleteUserPage - User ID requested to delete: null
[INFO ] 2019-05-12 22:39:37.628 [http-nio-8080-exec-9] GenericDao - **********Query database by using an ID: 69, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:39:37.640 [http-nio-8080-exec-9] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:39:37.641 [http-nio-8080-exec-9] GenericDao - **********Attempting to delete: null
[ERROR] 2019-05-12 22:39:37.643 [http-nio-8080-exec-9] GenericDao - **********Error while trying to delete entity: null - java.lang.IllegalArgumentException: attempt to create delete event with null entity
[INFO ] 2019-05-12 22:39:37.644 [http-nio-8080-exec-9] DeleteUserPage - User ID requested to delete: null
[INFO ] 2019-05-12 22:43:03.819 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 22:43:03.829 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 22:43:03.830 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 22:43:03.832 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 22:43:03.832 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 22:43:03.833 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 22:43:03.833 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 22:43:03.833 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 22:43:03.833 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 22:43:03.833 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 22:43:04.308 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:04.309 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 22:43:04.309 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 22:43:04.309 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:43:06.875 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:43:06.875 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:43:06.969 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:43:06.971 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 22:43:07.230 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:43:07.316 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:07.316 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 22:43:07.316 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:07.347 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 22:43:07.405 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:07.405 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 22:43:07.406 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:43:07.425 [main] GenericDao - **********Saved|Updated entity: User{userId = '711', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:43:07.426 [main] GenericDao - **********Query database by using an ID: 711, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:07.433 [main] GenericDao - **********Query by ID Found: User{userId = '711', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:43:07.433 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:07.449 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:43:07.449 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 22:43:07.450 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:43:07.466 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:43:07.467 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:07.481 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:43:07.553 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:07.554 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 22:43:07.556 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 22:43:07.592 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:43:07.595 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:43:07.684 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:07.684 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 22:43:07.684 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:43:07.707 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:43:07.776 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:07.777 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 22:43:07.779 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:07.792 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:43:07.792 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:07.814 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:43:07.816 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:43:07.818 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:07.830 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:43:07.830 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T22:43:07.778, ingredients = []}
[INFO ] 2019-05-12 22:43:07.876 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:07.876 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 22:43:07.876 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:07.903 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:43:07.903 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:43:07.917 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:43:07.917 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:43:07.974 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:07.975 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 22:43:07.975 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:43:08.057 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:43:08.115 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:08.115 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 22:43:08.115 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:08.122 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:43:08.122 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 22:43:08.146 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:43:08.146 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:43:08.149 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:43:08.155 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:43:08.157 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:43:08.161 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:08.170 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:43:08.220 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:08.220 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 22:43:08.221 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:08.293 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:43:08.350 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:08.351 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 22:43:08.351 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:43:08.402 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:43:08.452 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:08.452 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 22:43:08.452 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:43:08.457 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:43:08.457 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:43:08.457 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:43:08.458 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:43:08.462 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:43:08.470 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:43:08.525 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:08.526 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 22:43:08.526 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:08.541 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:43:08.542 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:43:08.526, ingredients = []}
[INFO ] 2019-05-12 22:43:08.542 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:43:08.526, ingredients = []}
[INFO ] 2019-05-12 22:43:08.553 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 604, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:43:08.526, ingredients = []}
[INFO ] 2019-05-12 22:43:08.553 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 22:43:08.553 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 22:43:08.567 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:43:08.567 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:43:08.576 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:43:08.577 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 22:43:08.592 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 604, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:43:09, ingredients = []}]
[INFO ] 2019-05-12 22:43:08.690 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:08.691 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 22:43:08.691 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:08.702 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:43:08.702 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 22:43:08.721 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:43:08.722 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 22:43:08.727 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 22:43:08.728 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 22:43:08.738 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:43:08.740 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:43:08.740 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:43:08.756 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 160, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:43:08.757 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:43:08.786 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 160, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:43:08.787 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:43:08.810 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 160, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:43:08.811 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:43:08.835 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 160, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:43:08.894 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:08.894 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 22:43:08.895 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:43:08.902 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 71, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:43:08.902 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:43:08.939 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 71, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:43:08.940 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 22:43:08.954 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 71, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:43:08.954 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 22:43:08.963 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 71, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:43:08.963 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 22:43:08.963 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:43:08.972 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:43:08.973 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:43:08.986 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:43:08.987 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:43:09.019 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 71, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:43:09.020 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 22:43:09.026 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:43:09.093 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:09.093 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:43:09.104 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:43:09.104 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 22:43:09.105 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:43:09.105 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:43:09.106 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:43:09.116 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:43:09.119 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:43:09.128 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:43:09.132 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 22:43:09.172 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:09.172 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 22:43:09.172 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:43:09.179 [main] GenericDao - **********Entity inserted: User{userId = '712', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:43:09.179 [main] GenericDao - **********Query database by using an ID: 712, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:09.187 [main] GenericDao - **********Query by ID Found: User{userId = '712', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:43:09.230 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:09.230 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:43:09.240 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:43:09.240 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:43:09.275 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:43:09.275 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 22:43:09.276 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:09.309 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:43:09.309 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:43:09.343 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:43:09.410 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:44:04.700 [http-nio-8080-exec-7] GenericDao - **********Query database by using an ID: 89, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:44:08.655 [http-nio-8080-exec-7] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:44:08.656 [http-nio-8080-exec-7] GenericDao - **********Attempting to delete: null
[ERROR] 2019-05-12 22:44:08.661 [http-nio-8080-exec-7] GenericDao - **********Error while trying to delete entity: null - java.lang.IllegalArgumentException: attempt to create delete event with null entity
[INFO ] 2019-05-12 22:44:08.662 [http-nio-8080-exec-7] DeleteUserPage - User ID requested to delete: null
[INFO ] 2019-05-12 22:48:27.179 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 22:48:27.187 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 22:48:27.188 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 22:48:27.190 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 22:48:27.191 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 22:48:27.192 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 22:48:27.192 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 22:48:27.192 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 22:48:27.192 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 22:48:27.193 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 22:48:27.738 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:27.739 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 22:48:27.739 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 22:48:27.739 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:48:30.338 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:48:30.339 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:48:30.385 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:48:30.385 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 22:48:30.654 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:48:30.717 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:30.718 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 22:48:30.718 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:30.746 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 22:48:30.811 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:30.812 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 22:48:30.812 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:48:30.830 [main] GenericDao - **********Saved|Updated entity: User{userId = '713', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:48:30.831 [main] GenericDao - **********Query database by using an ID: 713, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:30.837 [main] GenericDao - **********Query by ID Found: User{userId = '713', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:48:30.838 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:30.862 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:48:30.862 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 22:48:30.863 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:48:30.880 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:48:30.883 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:30.903 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:48:30.961 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:30.961 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 22:48:30.962 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 22:48:31.008 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:48:31.009 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:48:31.062 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:31.063 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 22:48:31.063 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:48:31.082 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:48:31.158 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:31.158 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 22:48:31.159 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:31.187 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:48:31.187 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:31.205 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:48:31.207 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:48:31.208 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:31.232 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:48:31.233 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T22:48:31.159, ingredients = []}
[INFO ] 2019-05-12 22:48:31.303 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:31.304 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 22:48:31.304 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:31.348 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:48:31.348 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:48:31.371 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:48:31.371 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:48:31.445 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:31.446 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 22:48:31.446 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:48:31.508 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:48:31.582 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:31.582 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 22:48:31.582 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:31.589 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:48:31.589 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 22:48:31.626 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:48:31.626 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:48:31.630 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:48:31.644 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:48:31.646 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:48:31.651 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:31.657 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:48:31.706 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:31.707 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 22:48:31.707 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:31.814 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:48:31.886 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:31.887 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 22:48:31.887 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:48:31.936 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:48:31.980 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:31.981 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 22:48:31.981 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:48:31.990 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:48:31.990 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:48:31.991 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:48:31.992 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:48:31.997 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:48:32.000 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:48:32.048 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:32.048 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 22:48:32.049 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:32.057 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:48:32.058 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:48:32.048, ingredients = []}
[INFO ] 2019-05-12 22:48:32.058 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:48:32.048, ingredients = []}
[INFO ] 2019-05-12 22:48:32.064 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 605, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:48:32.048, ingredients = []}
[INFO ] 2019-05-12 22:48:32.064 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 22:48:32.064 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 22:48:32.075 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:48:32.075 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:48:32.080 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:48:32.080 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 22:48:32.097 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 605, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:48:32, ingredients = []}]
[INFO ] 2019-05-12 22:48:32.143 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:32.144 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 22:48:32.144 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:32.151 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:48:32.151 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 22:48:32.163 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:48:32.163 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 22:48:32.175 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 22:48:32.175 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 22:48:32.181 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:48:32.182 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:48:32.182 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:48:32.193 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 161, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:48:32.193 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:48:32.234 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 161, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:48:32.234 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:48:32.261 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 161, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:48:32.261 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:48:32.292 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 161, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:48:32.353 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:32.354 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 22:48:32.354 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:48:32.365 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 72, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:48:32.365 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:48:32.396 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 72, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:48:32.397 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 22:48:32.404 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 72, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:48:32.404 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 22:48:32.415 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 72, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:48:32.415 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 22:48:32.415 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:48:32.423 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:48:32.423 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:48:32.437 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:48:32.437 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:48:32.463 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 72, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:48:32.464 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 22:48:32.480 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:48:32.523 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:32.524 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:48:32.534 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:48:32.534 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 22:48:32.534 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:48:32.535 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:48:32.536 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:48:32.542 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:48:32.548 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:48:32.553 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:48:32.556 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 22:48:32.600 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:32.601 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 22:48:32.601 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:48:32.607 [main] GenericDao - **********Entity inserted: User{userId = '714', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:48:32.607 [main] GenericDao - **********Query database by using an ID: 714, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:32.614 [main] GenericDao - **********Query by ID Found: User{userId = '714', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:48:32.662 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:32.663 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:48:32.675 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:48:32.675 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:48:32.730 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:48:32.730 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 22:48:32.730 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:32.746 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:48:32.746 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:48:32.775 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:48:32.822 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:49:25.200 [http-nio-8080-exec-8] GenericDao - **********Query database by using an ID: 890, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:49:29.791 [http-nio-8080-exec-8] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:52:57.608 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1365',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-12 22:52:57.621 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-12 22:52:57.622 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-12 22:52:57.624 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-12 22:52:57.624 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-12 22:52:57.624 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1365
[INFO ] 2019-05-12 22:52:57.625 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-12 22:52:57.625 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-12 22:52:57.625 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-12 22:52:57.626 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-12 22:52:58.103 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:52:58.104 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-12 22:52:58.104 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-12 22:52:58.106 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:53:00.606 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:53:00.607 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:53:00.740 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:53:00.740 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-12 22:53:01.020 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:53:01.080 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:01.081 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-12 22:53:01.081 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:01.111 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-12 22:53:01.167 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:01.168 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-12 22:53:01.168 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:53:01.192 [main] GenericDao - **********Saved|Updated entity: User{userId = '715', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:53:01.192 [main] GenericDao - **********Query database by using an ID: 715, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:01.199 [main] GenericDao - **********Query by ID Found: User{userId = '715', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-12 22:53:01.199 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:01.213 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:53:01.213 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-12 22:53:01.214 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:53:01.234 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:53:01.235 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:01.250 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-12 22:53:01.313 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:01.313 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-12 22:53:01.314 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-12 22:53:01.355 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:53:01.356 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:53:01.449 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:01.450 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-12 22:53:01.450 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:53:01.472 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:53:01.535 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:01.539 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-12 22:53:01.541 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:01.558 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:53:01.559 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:01.575 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:53:01.576 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:53:01.577 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:01.598 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:53:01.598 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-12T22:53:01.541, ingredients = []}
[INFO ] 2019-05-12 22:53:01.646 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:01.647 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-12 22:53:01.647 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:01.670 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:53:01.671 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-12 22:53:01.686 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:53:01.686 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:53:01.745 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:01.745 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-12 22:53:01.746 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:53:01.818 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:53:01.886 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:01.887 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-12 22:53:01.887 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:01.905 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:53:01.906 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-12 22:53:01.928 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:53:01.929 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:53:01.938 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:53:01.947 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:53:01.949 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-12 22:53:01.954 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:01.964 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:53:02.021 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:02.022 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-12 22:53:02.022 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:02.091 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:53:02.136 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:02.137 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-12 22:53:02.137 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:53:02.183 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:53:02.233 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:02.236 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-12 22:53:02.239 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:53:02.250 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:53:02.251 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:53:02.251 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:53:02.252 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:53:02.261 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-12 22:53:02.265 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-12 22:53:02.352 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:02.353 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-12 22:53:02.353 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:02.367 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:53:02.367 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:53:02.353, ingredients = []}
[INFO ] 2019-05-12 22:53:02.367 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:53:02.353, ingredients = []}
[INFO ] 2019-05-12 22:53:02.374 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 606, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:53:02.353, ingredients = []}
[INFO ] 2019-05-12 22:53:02.375 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-12 22:53:02.375 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-12 22:53:02.388 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:53:02.389 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:53:02.403 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:53:02.403 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-12 22:53:02.417 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 606, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-12T22:53:02, ingredients = []}]
[INFO ] 2019-05-12 22:53:02.469 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:02.470 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-12 22:53:02.471 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:02.483 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-12 22:53:02.483 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-12 22:53:02.499 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:53:02.499 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-12 22:53:02.504 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-12 22:53:02.505 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-12 22:53:02.513 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:53:02.513 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:53:02.513 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:53:02.526 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 162, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-12 22:53:02.526 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:53:02.544 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 162, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:53:02.544 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:53:02.568 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 162, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:53:02.568 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-12 22:53:02.592 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 162, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-12 22:53:02.668 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:02.668 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-12 22:53:02.668 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:53:02.676 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 73, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:53:02.676 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:53:02.710 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 73, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:53:02.710 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-12 22:53:02.716 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 73, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:53:02.717 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-12 22:53:02.733 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 73, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-12 22:53:02.734 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-12 22:53:02.734 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:53:02.750 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-12 22:53:02.750 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:53:02.761 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:53:02.762 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-12 22:53:02.790 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 73, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-12 22:53:02.791 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-12 22:53:02.797 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-12 22:53:02.856 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:02.857 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:53:02.867 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:53:02.867 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-12 22:53:02.868 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-12 22:53:02.868 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:53:02.870 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:53:02.876 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:53:02.883 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:53:02.890 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-12 22:53:02.894 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-12 22:53:02.938 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:02.939 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-12 22:53:02.939 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:53:02.944 [main] GenericDao - **********Entity inserted: User{userId = '716', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:53:02.944 [main] GenericDao - **********Query database by using an ID: 716, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:02.953 [main] GenericDao - **********Query by ID Found: User{userId = '716', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-12 22:53:02.993 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:02.994 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-12 22:53:03.010 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:53:03.010 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-12 22:53:03.049 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:03.050 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-12 22:53:03.050 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:03.078 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-12 22:53:03.078 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:53:03.105 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-12 22:53:03.167 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-12 22:53:58.524 [http-nio-8080-exec-7] GenericDao - **********Query database by using an ID: 567, of Type: class edu.matc.entity.User
[INFO ] 2019-05-12 22:54:02.775 [http-nio-8080-exec-7] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 06:55:32.694 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1367',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 06:55:32.702 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-13 06:55:32.703 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-13 06:55:32.705 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 06:55:32.706 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 06:55:32.709 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1367
[INFO ] 2019-05-13 06:55:32.709 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 06:55:32.710 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 06:55:32.710 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 06:55:32.710 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-13 06:55:33.319 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:33.319 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-13 06:55:33.319 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-13 06:55:33.320 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 06:55:36.150 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 06:55:36.150 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 06:55:36.276 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 06:55:36.277 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-13 06:55:36.528 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 06:55:36.620 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:36.620 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-13 06:55:36.620 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:36.657 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-13 06:55:36.711 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:36.711 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-13 06:55:36.712 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 06:55:36.730 [main] GenericDao - **********Saved|Updated entity: User{userId = '717', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 06:55:36.730 [main] GenericDao - **********Query database by using an ID: 717, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:36.736 [main] GenericDao - **********Query by ID Found: User{userId = '717', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 06:55:36.737 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:36.752 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-13 06:55:36.752 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-13 06:55:36.752 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 06:55:36.766 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 06:55:36.767 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:36.803 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 06:55:36.870 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:36.871 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-13 06:55:36.872 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-13 06:55:36.934 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 06:55:36.934 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 06:55:36.994 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:36.994 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-13 06:55:36.994 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 06:55:37.032 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 06:55:37.120 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:37.120 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-13 06:55:37.121 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:37.138 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 06:55:37.138 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:37.151 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 06:55:37.152 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 06:55:37.152 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:37.173 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 06:55:37.174 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-13T06:55:37.121, ingredients = []}
[INFO ] 2019-05-13 06:55:37.225 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:37.225 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-13 06:55:37.226 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:37.259 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 06:55:37.260 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 06:55:37.275 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 06:55:37.277 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 06:55:37.365 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:37.365 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-13 06:55:37.366 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 06:55:37.451 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 06:55:37.512 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:37.512 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-13 06:55:37.512 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:37.519 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 06:55:37.520 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-13 06:55:37.552 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 06:55:37.553 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 06:55:37.558 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 06:55:37.574 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 06:55:37.577 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 06:55:37.589 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:37.598 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 06:55:37.656 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:37.657 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-13 06:55:37.657 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:37.760 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 06:55:37.838 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:37.839 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-13 06:55:37.839 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 06:55:37.888 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 06:55:37.931 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:37.932 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-13 06:55:37.932 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 06:55:37.937 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 06:55:37.937 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 06:55:37.937 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 06:55:37.938 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 06:55:37.943 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 06:55:37.946 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 06:55:37.996 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:37.998 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-13 06:55:37.999 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:38.010 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 06:55:38.011 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T06:55:37.999, ingredients = []}
[INFO ] 2019-05-13 06:55:38.011 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T06:55:37.999, ingredients = []}
[INFO ] 2019-05-13 06:55:38.018 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 607, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T06:55:37.999, ingredients = []}
[INFO ] 2019-05-13 06:55:38.018 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-13 06:55:38.018 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-13 06:55:38.033 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 06:55:38.034 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 06:55:38.040 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 06:55:38.040 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-13 06:55:38.059 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 607, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T06:55:38, ingredients = []}]
[INFO ] 2019-05-13 06:55:38.111 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:38.112 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-13 06:55:38.112 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:38.121 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 06:55:38.121 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-13 06:55:38.141 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 06:55:38.141 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-13 06:55:38.148 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-13 06:55:38.148 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-13 06:55:38.154 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 06:55:38.155 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 06:55:38.155 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 06:55:38.181 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 163, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 06:55:38.182 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 06:55:38.215 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 163, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 06:55:38.215 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 06:55:38.238 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 163, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 06:55:38.239 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 06:55:38.297 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 163, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 06:55:38.367 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:38.368 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-13 06:55:38.368 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 06:55:38.412 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 74, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 06:55:38.413 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 06:55:38.444 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 74, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 06:55:38.444 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-13 06:55:38.457 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 74, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 06:55:38.457 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-13 06:55:38.473 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 74, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 06:55:38.473 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-13 06:55:38.474 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 06:55:38.481 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 06:55:38.482 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 06:55:38.492 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 06:55:38.493 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 06:55:38.526 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 74, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 06:55:38.527 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-13 06:55:38.539 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 06:55:38.596 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:38.596 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 06:55:38.607 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 06:55:38.607 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-13 06:55:38.607 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 06:55:38.607 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 06:55:38.609 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 06:55:38.619 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 06:55:38.622 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 06:55:38.627 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 06:55:38.630 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-13 06:55:38.688 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:38.688 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-13 06:55:38.689 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 06:55:38.698 [main] GenericDao - **********Entity inserted: User{userId = '718', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 06:55:38.698 [main] GenericDao - **********Query database by using an ID: 718, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:38.703 [main] GenericDao - **********Query by ID Found: User{userId = '718', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 06:55:38.748 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:38.749 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 06:55:38.772 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 06:55:38.773 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 06:55:38.819 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:55:38.820 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-13 06:55:38.821 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:38.847 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 06:55:38.847 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:55:38.892 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 06:55:38.955 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 06:57:37.667 [http-nio-8080-exec-9] GenericDao - **********Query database by using an ID: 798, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 06:57:41.924 [http-nio-8080-exec-9] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 07:01:28.332 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1367',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 07:01:28.343 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-13 07:01:28.344 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-13 07:01:28.347 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 07:01:28.347 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 07:01:28.348 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1367
[INFO ] 2019-05-13 07:01:28.348 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 07:01:28.348 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 07:01:28.348 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 07:01:28.349 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-13 07:01:29.294 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:29.295 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-13 07:01:29.295 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-13 07:01:29.295 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:01:33.148 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:01:33.149 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:01:33.270 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:01:33.270 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-13 07:01:33.750 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:01:33.819 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:33.819 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-13 07:01:33.819 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:33.907 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-13 07:01:34.001 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:34.002 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-13 07:01:34.004 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:01:34.043 [main] GenericDao - **********Saved|Updated entity: User{userId = '719', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:01:34.043 [main] GenericDao - **********Query database by using an ID: 719, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:34.050 [main] GenericDao - **********Query by ID Found: User{userId = '719', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:01:34.051 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:34.063 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:01:34.063 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-13 07:01:34.066 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:01:34.088 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:01:34.088 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:34.102 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:01:34.161 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:34.162 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-13 07:01:34.162 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-13 07:01:34.247 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:01:34.248 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:01:34.429 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:34.429 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-13 07:01:34.429 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 07:01:34.470 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:01:34.563 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:34.563 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-13 07:01:34.567 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:34.582 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:01:34.582 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:34.598 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:01:34.599 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:01:34.600 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:34.618 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:01:34.618 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-13T07:01:34.566, ingredients = []}
[INFO ] 2019-05-13 07:01:34.666 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:34.666 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-13 07:01:34.666 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:34.702 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 07:01:34.702 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 07:01:34.735 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:01:34.736 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:01:34.806 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:34.806 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-13 07:01:34.807 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:01:34.902 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:01:34.989 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:34.991 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-13 07:01:34.991 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:35.014 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:01:35.014 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-13 07:01:35.030 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:01:35.030 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:01:35.038 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:01:35.061 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:01:35.063 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:01:35.073 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:35.082 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 07:01:35.146 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:35.147 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-13 07:01:35.147 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:35.275 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 07:01:35.342 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:35.343 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-13 07:01:35.345 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 07:01:35.424 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:01:35.491 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:35.491 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-13 07:01:35.491 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:01:35.496 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:01:35.496 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:01:35.496 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:01:35.498 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:01:35.502 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:01:35.508 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 07:01:35.558 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:35.558 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-13 07:01:35.558 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:35.572 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:01:35.572 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:01:35.558, ingredients = []}
[INFO ] 2019-05-13 07:01:35.572 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:01:35.558, ingredients = []}
[INFO ] 2019-05-13 07:01:35.581 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 608, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:01:35.558, ingredients = []}
[INFO ] 2019-05-13 07:01:35.581 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-13 07:01:35.582 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-13 07:01:35.602 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:01:35.602 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:01:35.612 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:01:35.612 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-13 07:01:35.638 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 608, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:01:36, ingredients = []}]
[INFO ] 2019-05-13 07:01:35.692 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:35.692 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-13 07:01:35.692 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:35.704 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:01:35.705 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-13 07:01:35.749 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:01:35.751 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-13 07:01:35.769 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-13 07:01:35.769 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-13 07:01:35.785 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:01:35.786 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:01:35.788 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:01:35.808 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 164, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:01:35.810 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:01:35.853 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 164, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:01:35.853 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:01:35.892 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 164, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:01:35.893 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:01:35.934 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 164, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:01:36.028 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:36.028 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-13 07:01:36.029 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:01:36.036 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 75, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:01:36.036 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:01:36.086 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 75, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 07:01:36.087 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-13 07:01:36.096 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 75, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:01:36.096 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-13 07:01:36.122 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 75, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:01:36.123 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-13 07:01:36.123 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:01:36.133 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:01:36.133 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:01:36.160 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:01:36.161 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:01:36.198 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 75, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 07:01:36.198 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-13 07:01:36.206 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:01:36.246 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:36.246 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 07:01:36.263 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:01:36.264 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-13 07:01:36.264 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:01:36.264 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:01:36.265 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:01:36.272 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:01:36.273 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:01:36.280 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 07:01:36.289 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-13 07:01:36.334 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:36.334 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-13 07:01:36.334 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:01:36.342 [main] GenericDao - **********Entity inserted: User{userId = '720', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:01:36.342 [main] GenericDao - **********Query database by using an ID: 720, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:36.356 [main] GenericDao - **********Query by ID Found: User{userId = '720', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:01:36.408 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:36.408 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 07:01:36.420 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:01:36.421 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:01:36.482 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:01:36.483 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-13 07:01:36.483 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:36.509 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 07:01:36.510 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:01:36.542 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 07:01:36.622 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:05:33.477 [http-nio-8080-exec-9] GenericDao - **********Query database by using an ID: 609, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:05:37.993 [http-nio-8080-exec-9] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 07:07:23.218 [http-nio-8080-exec-6] GenericDao - **********Query Using Last Name:  phil, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:07:23.615 [http-nio-8080-exec-6] GenericDao - **********Query by Last Name Found: []
[INFO ] 2019-05-13 07:28:22.953 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1367',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 07:28:22.964 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-13 07:28:22.965 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-13 07:28:22.967 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 07:28:22.967 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 07:28:22.968 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1367
[INFO ] 2019-05-13 07:28:22.969 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 07:28:22.969 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 07:28:22.969 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 07:28:22.970 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-13 07:28:23.430 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:23.431 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-13 07:28:23.431 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-13 07:28:23.431 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:28:25.987 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:28:25.987 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:28:26.081 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:28:26.082 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-13 07:28:26.365 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:28:26.471 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:26.471 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-13 07:28:26.472 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:26.499 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-13 07:28:26.549 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:26.551 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-13 07:28:26.551 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:28:26.574 [main] GenericDao - **********Saved|Updated entity: User{userId = '721', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:28:26.574 [main] GenericDao - **********Query database by using an ID: 721, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:26.582 [main] GenericDao - **********Query by ID Found: User{userId = '721', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:28:26.582 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:26.605 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:28:26.605 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-13 07:28:26.605 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:28:26.621 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:28:26.621 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:26.641 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:28:26.701 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:26.702 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-13 07:28:26.702 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-13 07:28:26.739 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:28:26.739 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:28:26.812 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:26.813 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-13 07:28:26.813 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 07:28:26.843 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:28:26.916 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:26.917 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-13 07:28:26.920 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:26.931 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:28:26.931 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:26.950 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:28:26.950 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:28:26.950 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:26.965 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:28:26.966 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-13T07:28:26.920, ingredients = []}
[INFO ] 2019-05-13 07:28:27.025 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:27.025 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-13 07:28:27.026 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:27.053 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 07:28:27.053 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 07:28:27.081 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:28:27.083 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:28:27.139 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:27.139 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-13 07:28:27.140 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:28:27.206 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:28:27.279 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:27.280 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-13 07:28:27.280 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:27.286 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:28:27.287 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-13 07:28:27.312 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:28:27.312 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:28:27.322 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:28:27.330 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:28:27.332 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:28:27.336 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:27.341 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 07:28:27.391 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:27.391 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-13 07:28:27.391 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:27.479 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 07:28:27.548 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:27.549 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-13 07:28:27.549 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 07:28:27.599 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:28:27.646 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:27.646 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-13 07:28:27.646 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:28:27.651 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:28:27.652 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:28:27.652 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:28:27.653 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:28:27.658 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:28:27.667 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 07:28:27.716 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:27.717 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-13 07:28:27.717 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:27.726 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:28:27.726 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:28:27.717, ingredients = []}
[INFO ] 2019-05-13 07:28:27.726 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:28:27.717, ingredients = []}
[INFO ] 2019-05-13 07:28:27.777 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 609, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:28:27.717, ingredients = []}
[INFO ] 2019-05-13 07:28:27.778 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-13 07:28:27.778 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-13 07:28:27.801 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:28:27.802 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:28:27.809 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:28:27.809 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-13 07:28:27.826 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 609, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:28:28, ingredients = []}]
[INFO ] 2019-05-13 07:28:27.885 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:27.886 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-13 07:28:27.886 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:27.894 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:28:27.895 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-13 07:28:27.920 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:28:27.926 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-13 07:28:27.950 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-13 07:28:27.952 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-13 07:28:27.967 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:28:27.968 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:28:27.969 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:28:28.004 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 165, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:28:28.004 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:28:28.032 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 165, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:28:28.032 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:28:28.055 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 165, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:28:28.055 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:28:28.088 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 165, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:28:28.146 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:28.146 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-13 07:28:28.147 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:28:28.154 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 76, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:28:28.154 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:28:28.193 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 76, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 07:28:28.193 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-13 07:28:28.200 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 76, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:28:28.201 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-13 07:28:28.210 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 76, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:28:28.210 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-13 07:28:28.211 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:28:28.228 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:28:28.229 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:28:28.236 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:28:28.236 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:28:28.274 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 76, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 07:28:28.275 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-13 07:28:28.281 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:28:28.345 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:28.345 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 07:28:28.357 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:28:28.358 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-13 07:28:28.358 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:28:28.358 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:28:28.363 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:28:28.371 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:28:28.378 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:28:28.386 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 07:28:28.391 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-13 07:28:28.430 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:28.431 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-13 07:28:28.431 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:28:28.445 [main] GenericDao - **********Entity inserted: User{userId = '722', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:28:28.446 [main] GenericDao - **********Query database by using an ID: 722, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:28.452 [main] GenericDao - **********Query by ID Found: User{userId = '722', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:28:28.492 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:28.492 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 07:28:28.504 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:28:28.505 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:28:28.564 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:28:28.564 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-13 07:28:28.564 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:28.585 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 07:28:28.586 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:28:28.614 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 07:28:28.663 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:29:55.731 [http-nio-8080-exec-4] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-13 07:29:55.744 [http-nio-8080-exec-4] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-13 07:30:00.164 [http-nio-8080-exec-4] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-13 07:30:00.170 [http-nio-8080-exec-4] GenericDao - **********Querying Exact Name: Turd
[INFO ] 2019-05-13 07:34:17.185 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1367',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 07:34:17.193 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-13 07:34:17.193 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-13 07:34:17.195 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 07:34:17.196 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 07:34:17.196 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1367
[INFO ] 2019-05-13 07:34:17.196 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 07:34:17.196 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 07:34:17.197 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 07:34:17.197 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-13 07:34:17.660 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:17.660 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-13 07:34:17.660 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-13 07:34:17.661 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:34:20.226 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:34:20.226 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:34:20.316 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:34:20.317 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-13 07:34:20.577 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:34:20.651 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:20.652 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-13 07:34:20.652 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:20.683 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-13 07:34:20.737 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:20.738 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-13 07:34:20.738 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:34:20.760 [main] GenericDao - **********Saved|Updated entity: User{userId = '723', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:34:20.760 [main] GenericDao - **********Query database by using an ID: 723, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:20.767 [main] GenericDao - **********Query by ID Found: User{userId = '723', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:34:20.767 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:20.785 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:34:20.786 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-13 07:34:20.786 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:34:20.803 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:34:20.803 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:20.819 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:34:20.889 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:20.890 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-13 07:34:20.890 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-13 07:34:20.930 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:34:20.932 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:34:21.003 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:21.003 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-13 07:34:21.003 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 07:34:21.020 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:34:21.093 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:21.095 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-13 07:34:21.096 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:21.124 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:34:21.124 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:21.163 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:34:21.164 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:34:21.165 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:21.182 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:34:21.183 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-13T07:34:21.096, ingredients = []}
[INFO ] 2019-05-13 07:34:21.271 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:21.271 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-13 07:34:21.272 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:21.299 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 07:34:21.299 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 07:34:21.320 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:34:21.320 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:34:21.369 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:21.369 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-13 07:34:21.369 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:34:21.434 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:34:21.530 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:21.531 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-13 07:34:21.531 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:21.543 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:34:21.543 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-13 07:34:21.573 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:34:21.573 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:34:21.579 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:34:21.595 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:34:21.598 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:34:21.603 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:21.609 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 07:34:21.675 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:21.676 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-13 07:34:21.676 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:21.734 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 07:34:21.773 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:21.774 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-13 07:34:21.774 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 07:34:21.823 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:34:21.873 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:21.874 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-13 07:34:21.874 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:34:21.878 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:34:21.879 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:34:21.879 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:34:21.881 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:34:21.885 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:34:21.894 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 07:34:21.947 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:21.948 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-13 07:34:21.948 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:21.958 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:34:21.958 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:34:21.948, ingredients = []}
[INFO ] 2019-05-13 07:34:21.958 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:34:21.948, ingredients = []}
[INFO ] 2019-05-13 07:34:21.966 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 610, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:34:21.948, ingredients = []}
[INFO ] 2019-05-13 07:34:21.967 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-13 07:34:21.967 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-13 07:34:21.979 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:34:21.979 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:34:21.990 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:34:21.990 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-13 07:34:22.003 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 610, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:34:22, ingredients = []}]
[INFO ] 2019-05-13 07:34:22.107 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:22.108 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-13 07:34:22.108 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:22.116 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:34:22.116 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-13 07:34:22.132 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:34:22.133 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-13 07:34:22.146 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-13 07:34:22.146 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-13 07:34:22.156 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:34:22.157 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:34:22.157 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:34:22.173 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 166, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:34:22.174 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:34:22.202 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 166, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:34:22.202 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:34:22.227 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 166, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:34:22.228 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:34:22.253 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 166, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:34:22.312 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:22.312 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-13 07:34:22.312 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:34:22.324 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 77, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:34:22.324 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:34:22.359 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 77, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 07:34:22.359 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-13 07:34:22.376 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 77, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:34:22.376 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-13 07:34:22.412 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 77, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:34:22.412 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-13 07:34:22.412 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:34:22.441 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:34:22.442 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:34:22.488 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:34:22.489 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:34:22.544 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 77, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 07:34:22.545 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-13 07:34:22.558 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:34:22.609 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:22.609 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 07:34:22.624 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:34:22.625 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-13 07:34:22.625 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:34:22.625 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:34:22.627 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:34:22.637 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:34:22.639 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:34:22.644 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 07:34:22.649 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-13 07:34:22.693 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:22.693 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-13 07:34:22.693 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:34:22.700 [main] GenericDao - **********Entity inserted: User{userId = '724', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:34:22.700 [main] GenericDao - **********Query database by using an ID: 724, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:22.704 [main] GenericDao - **********Query by ID Found: User{userId = '724', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:34:22.765 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:22.765 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 07:34:22.779 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:34:22.779 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:34:22.824 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:34:22.824 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-13 07:34:22.824 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:22.847 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 07:34:22.848 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:34:22.887 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 07:34:22.944 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:35:24.901 [http-nio-8080-exec-3] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-13 07:35:24.914 [http-nio-8080-exec-3] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-13 07:35:29.514 [http-nio-8080-exec-3] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-13 07:35:29.523 [http-nio-8080-exec-3] GenericDao - **********Querying Exact Name: Turd
[ERROR] 2019-05-13 07:35:29.548 [http-nio-8080-exec-3] CreateGroceryList - Error looking for ingredients: javax.persistence.NoResultException: No entity found for query
[INFO ] 2019-05-13 07:36:06.558 [http-nio-8080-exec-5] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-13 07:36:06.559 [http-nio-8080-exec-5] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-13 07:36:06.575 [http-nio-8080-exec-5] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-13 07:36:06.576 [http-nio-8080-exec-5] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-13 07:36:06.641 [http-nio-8080-exec-5] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:36:06.641 [http-nio-8080-exec-5] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-13 07:36:06.693 [http-nio-8080-exec-5] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-13 07:36:06.694 [http-nio-8080-exec-5] GenericDao - **********Querying Exact Name: Pork Sausage (Sweet)
[INFO ] 2019-05-13 07:36:06.705 [http-nio-8080-exec-5] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}
[INFO ] 2019-05-13 07:36:06.705 [http-nio-8080-exec-5] CreateGroceryList - **********Adding ingredients Onion, Kale, Pork Sausage (Sweet) to the new/updated grocery list: Hulk's Favorite Week 2
[INFO ] 2019-05-13 07:36:06.705 [http-nio-8080-exec-5] CreateGroceryList - **********Saving/Updating a Grocerylist: GroceryLists{ groceryListId = null, grocerylistName = Hulk's Favorite Week 2, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}]}, userRecipes = {[]}, user = {[]} }----- For User: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-13 07:36:06.705 [http-nio-8080-exec-5] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Hulk's Favorite Week 2, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:36:06.839 [http-nio-8080-exec-5] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 39, grocerylistName = Hulk's Favorite Week 2, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:36:06.839 [http-nio-8080-exec-5] CreateGroceryList - **********Grocery list with added Ingredient: GroceryLists{ groceryListId = 39, grocerylistName = Hulk's Favorite Week 2, user_id = 8, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:37:52.768 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1367',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 07:37:52.779 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-13 07:37:52.780 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-13 07:37:52.781 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 07:37:52.782 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 07:37:52.782 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1367
[INFO ] 2019-05-13 07:37:52.782 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 07:37:52.783 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 07:37:52.783 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 07:37:52.783 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-13 07:37:53.293 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:53.295 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-13 07:37:53.296 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-13 07:37:53.297 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:37:55.823 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:37:55.823 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:37:55.957 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:37:55.958 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-13 07:37:56.220 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:37:56.292 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:56.293 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-13 07:37:56.293 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:56.322 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-13 07:37:56.372 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:56.373 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-13 07:37:56.373 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:37:56.394 [main] GenericDao - **********Saved|Updated entity: User{userId = '725', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:37:56.394 [main] GenericDao - **********Query database by using an ID: 725, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:56.401 [main] GenericDao - **********Query by ID Found: User{userId = '725', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:37:56.401 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:56.416 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:37:56.416 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-13 07:37:56.416 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:37:56.435 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:37:56.435 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:56.446 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:37:56.498 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:56.498 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-13 07:37:56.498 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-13 07:37:56.529 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:37:56.530 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:37:56.590 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:56.591 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-13 07:37:56.592 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 07:37:56.619 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:37:56.697 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:56.697 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-13 07:37:56.698 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:56.719 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:37:56.720 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:56.746 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:37:56.746 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:37:56.747 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:56.761 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:37:56.762 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-13T07:37:56.698, ingredients = []}
[INFO ] 2019-05-13 07:37:56.839 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:56.840 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-13 07:37:56.842 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:56.880 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 07:37:56.880 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 07:37:56.902 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:37:56.902 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:37:56.982 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:56.983 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-13 07:37:56.983 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:37:57.034 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:37:57.092 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:57.093 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-13 07:37:57.093 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:57.099 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:37:57.099 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-13 07:37:57.116 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:37:57.117 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:37:57.127 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:37:57.137 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:37:57.139 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:37:57.144 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:57.152 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 07:37:57.213 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:57.214 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-13 07:37:57.214 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:57.281 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 07:37:57.323 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:57.323 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-13 07:37:57.323 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 07:37:57.387 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:37:57.454 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:57.455 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-13 07:37:57.455 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:37:57.464 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:37:57.464 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:37:57.464 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:37:57.467 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:37:57.472 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:37:57.477 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 07:37:57.558 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:57.560 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-13 07:37:57.560 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:57.575 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:37:57.576 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:37:57.560, ingredients = []}
[INFO ] 2019-05-13 07:37:57.576 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:37:57.560, ingredients = []}
[INFO ] 2019-05-13 07:37:57.582 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 611, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:37:57.560, ingredients = []}
[INFO ] 2019-05-13 07:37:57.582 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-13 07:37:57.582 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-13 07:37:57.595 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:37:57.595 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:37:57.607 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:37:57.607 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-13 07:37:57.619 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 611, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:37:58, ingredients = []}]
[INFO ] 2019-05-13 07:37:57.672 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:57.673 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-13 07:37:57.675 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:57.686 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:37:57.686 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-13 07:37:57.699 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:37:57.699 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-13 07:37:57.714 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-13 07:37:57.714 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-13 07:37:57.729 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:37:57.730 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:37:57.730 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:37:57.742 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 167, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:37:57.743 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:37:57.767 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 167, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:37:57.768 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:37:57.789 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 167, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:37:57.790 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:37:57.814 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 167, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:37:57.882 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:57.883 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-13 07:37:57.883 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:37:57.890 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 78, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:37:57.890 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:37:57.924 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 78, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 07:37:57.924 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-13 07:37:57.933 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 78, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:37:57.933 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-13 07:37:57.951 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 78, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:37:57.951 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-13 07:37:57.951 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:37:57.960 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:37:57.960 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:37:57.979 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:37:57.979 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:37:58.012 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 78, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 07:37:58.013 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-13 07:37:58.019 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:37:58.065 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:58.066 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 07:37:58.080 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:37:58.081 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-13 07:37:58.081 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:37:58.082 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:37:58.083 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:37:58.093 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:37:58.095 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:37:58.099 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 07:37:58.102 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-13 07:37:58.142 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:58.143 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-13 07:37:58.143 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:37:58.149 [main] GenericDao - **********Entity inserted: User{userId = '726', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:37:58.150 [main] GenericDao - **********Query database by using an ID: 726, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:58.161 [main] GenericDao - **********Query by ID Found: User{userId = '726', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:37:58.202 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:58.202 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 07:37:58.212 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:37:58.212 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:37:58.261 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:37:58.261 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-13 07:37:58.261 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:58.276 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 07:37:58.276 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:37:58.306 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 07:37:58.361 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:38:50.411 [http-nio-8080-exec-10] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-13 07:38:50.423 [http-nio-8080-exec-10] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-13 07:38:55.292 [http-nio-8080-exec-10] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-13 07:38:55.299 [http-nio-8080-exec-10] GenericDao - **********Querying Exact Name: Turd
[ERROR] 2019-05-13 07:38:55.317 [http-nio-8080-exec-10] CreateGroceryList - Error looking for ingredients: javax.persistence.NoResultException: No entity found for query
[INFO ] 2019-05-13 07:39:50.557 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1367',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 07:39:50.565 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-13 07:39:50.566 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-13 07:39:50.567 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 07:39:50.568 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 07:39:50.568 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1367
[INFO ] 2019-05-13 07:39:50.568 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 07:39:50.569 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 07:39:50.569 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 07:39:50.570 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-13 07:39:51.086 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:51.087 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-13 07:39:51.087 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-13 07:39:51.087 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:39:53.656 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:39:53.656 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:39:53.727 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:39:53.727 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-13 07:39:53.982 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:39:54.062 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:54.063 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-13 07:39:54.063 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:54.099 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-13 07:39:54.151 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:54.151 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-13 07:39:54.152 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:39:54.174 [main] GenericDao - **********Saved|Updated entity: User{userId = '727', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:39:54.174 [main] GenericDao - **********Query database by using an ID: 727, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:54.181 [main] GenericDao - **********Query by ID Found: User{userId = '727', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:39:54.181 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:54.195 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:39:54.197 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-13 07:39:54.198 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:39:54.219 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:39:54.219 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:54.232 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:39:54.301 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:54.301 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-13 07:39:54.302 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-13 07:39:54.342 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:39:54.344 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:39:54.413 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:54.414 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-13 07:39:54.414 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 07:39:54.431 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:39:54.494 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:54.496 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-13 07:39:54.497 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:54.525 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:39:54.526 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:54.538 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:39:54.538 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:39:54.538 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:54.557 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:39:54.558 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-13T07:39:54.497, ingredients = []}
[INFO ] 2019-05-13 07:39:54.624 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:54.625 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-13 07:39:54.625 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:54.650 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 07:39:54.650 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 07:39:54.674 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:39:54.675 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:39:54.737 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:54.738 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-13 07:39:54.738 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:39:54.807 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:39:54.875 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:54.876 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-13 07:39:54.877 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:54.885 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:39:54.886 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-13 07:39:54.910 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:39:54.910 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:39:54.914 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:39:54.922 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:39:54.924 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:39:54.929 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:54.936 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 07:39:54.986 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:54.986 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-13 07:39:54.987 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:55.061 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 07:39:55.119 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:55.120 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-13 07:39:55.121 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 07:39:55.174 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:39:55.286 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:55.287 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-13 07:39:55.287 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:39:55.293 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:39:55.293 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:39:55.294 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:39:55.295 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:39:55.299 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:39:55.302 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 07:39:55.339 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:55.340 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-13 07:39:55.340 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:55.349 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:39:55.350 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:39:55.340, ingredients = []}
[INFO ] 2019-05-13 07:39:55.350 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:39:55.340, ingredients = []}
[INFO ] 2019-05-13 07:39:55.357 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 612, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:39:55.340, ingredients = []}
[INFO ] 2019-05-13 07:39:55.357 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-13 07:39:55.357 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-13 07:39:55.375 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:39:55.375 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:39:55.383 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:39:55.383 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-13 07:39:55.401 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 612, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:39:55, ingredients = []}]
[INFO ] 2019-05-13 07:39:55.452 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:55.453 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-13 07:39:55.455 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:55.464 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:39:55.464 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-13 07:39:55.476 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:39:55.477 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-13 07:39:55.494 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-13 07:39:55.494 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-13 07:39:55.501 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:39:55.502 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:39:55.502 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:39:55.521 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 168, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:39:55.521 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:39:55.549 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 168, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:39:55.550 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:39:55.569 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 168, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:39:55.570 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:39:55.594 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 168, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:39:55.659 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:55.659 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-13 07:39:55.659 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:39:55.668 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 79, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:39:55.668 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:39:55.705 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 79, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 07:39:55.705 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-13 07:39:55.711 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 79, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:39:55.711 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-13 07:39:55.722 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 79, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:39:55.723 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-13 07:39:55.723 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:39:55.741 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:39:55.741 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:39:55.751 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:39:55.752 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:39:55.784 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 79, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 07:39:55.785 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-13 07:39:55.796 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:39:55.842 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:55.842 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 07:39:55.854 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:39:55.854 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-13 07:39:55.854 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:39:55.855 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:39:55.859 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:39:55.869 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:39:55.872 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:39:55.876 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 07:39:55.879 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-13 07:39:55.922 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:55.922 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-13 07:39:55.922 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:39:55.927 [main] GenericDao - **********Entity inserted: User{userId = '728', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:39:55.927 [main] GenericDao - **********Query database by using an ID: 728, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:55.931 [main] GenericDao - **********Query by ID Found: User{userId = '728', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:39:55.972 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:55.972 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 07:39:55.984 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:39:55.984 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:39:56.029 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:39:56.030 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-13 07:39:56.031 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:56.048 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 07:39:56.048 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:39:56.079 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 07:39:56.131 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:41:17.347 [http-nio-8080-exec-1] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-13 07:41:17.364 [http-nio-8080-exec-1] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-13 07:41:22.865 [http-nio-8080-exec-1] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-13 07:41:22.874 [http-nio-8080-exec-1] GenericDao - **********Querying Exact Name: Turd
[ERROR] 2019-05-13 07:41:22.906 [http-nio-8080-exec-1] CreateGroceryList - Error looking for ingredients: javax.persistence.NoResultException: No entity found for query
[INFO ] 2019-05-13 07:44:42.229 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1367',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 07:44:42.238 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-13 07:44:42.238 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-13 07:44:42.240 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 07:44:42.240 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 07:44:42.240 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1367
[INFO ] 2019-05-13 07:44:42.240 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 07:44:42.241 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 07:44:42.241 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 07:44:42.241 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-13 07:44:42.736 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:42.737 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-13 07:44:42.737 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-13 07:44:42.737 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:44:45.265 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:44:45.265 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:44:45.373 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:44:45.373 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-13 07:44:45.656 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:44:45.751 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:45.751 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-13 07:44:45.752 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:45.781 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-13 07:44:45.838 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:45.839 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-13 07:44:45.839 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:44:45.856 [main] GenericDao - **********Saved|Updated entity: User{userId = '729', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:44:45.857 [main] GenericDao - **********Query database by using an ID: 729, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:45.862 [main] GenericDao - **********Query by ID Found: User{userId = '729', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 07:44:45.863 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:45.884 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:44:45.885 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-13 07:44:45.885 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:44:45.901 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:44:45.902 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:45.919 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 07:44:45.987 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:45.988 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-13 07:44:45.988 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-13 07:44:46.024 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:44:46.026 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:44:46.082 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:46.083 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-13 07:44:46.084 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 07:44:46.109 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:44:46.174 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:46.175 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-13 07:44:46.175 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:46.187 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:44:46.187 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:46.210 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:44:46.210 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:44:46.211 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:46.224 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:44:46.225 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-13T07:44:46.175, ingredients = []}
[INFO ] 2019-05-13 07:44:46.281 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:46.282 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-13 07:44:46.282 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:46.305 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 07:44:46.306 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 07:44:46.321 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:44:46.321 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:44:46.375 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:46.375 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-13 07:44:46.376 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:44:46.438 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:44:46.507 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:46.507 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-13 07:44:46.508 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:46.523 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:44:46.524 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-13 07:44:46.548 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:44:46.548 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:44:46.552 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:44:46.570 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:44:46.573 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 07:44:46.584 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:46.592 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 07:44:46.641 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:46.642 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-13 07:44:46.642 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:46.732 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 07:44:46.811 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:46.811 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-13 07:44:46.811 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 07:44:46.857 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:44:46.919 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:46.919 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-13 07:44:46.919 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:44:46.924 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:44:46.924 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:44:46.924 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:44:46.926 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:44:46.931 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 07:44:46.935 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 07:44:47.017 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:47.018 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-13 07:44:47.027 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:47.037 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:44:47.037 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:44:47.022, ingredients = []}
[INFO ] 2019-05-13 07:44:47.038 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:44:47.022, ingredients = []}
[INFO ] 2019-05-13 07:44:47.053 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 613, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:44:47.022, ingredients = []}
[INFO ] 2019-05-13 07:44:47.053 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-13 07:44:47.054 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-13 07:44:47.076 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:44:47.076 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:44:47.085 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:44:47.086 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-13 07:44:47.098 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 613, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T07:44:47, ingredients = []}]
[INFO ] 2019-05-13 07:44:47.145 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:47.145 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-13 07:44:47.146 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:47.154 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 07:44:47.155 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-13 07:44:47.167 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:44:47.167 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-13 07:44:47.173 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-13 07:44:47.174 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-13 07:44:47.184 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:44:47.185 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:44:47.186 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:44:47.196 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 169, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 07:44:47.196 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:44:47.225 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 169, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:44:47.226 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:44:47.250 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 169, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:44:47.252 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 07:44:47.278 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 169, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 07:44:47.347 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:47.347 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-13 07:44:47.348 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:44:47.355 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 80, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:44:47.355 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:44:47.406 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 80, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 07:44:47.406 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-13 07:44:47.414 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 80, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:44:47.414 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-13 07:44:47.438 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 80, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 07:44:47.438 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-13 07:44:47.438 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:44:47.449 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 07:44:47.449 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:44:47.463 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:44:47.463 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 07:44:47.495 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 80, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 07:44:47.495 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-13 07:44:47.508 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 07:44:47.562 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:47.562 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 07:44:47.574 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:44:47.575 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-13 07:44:47.575 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 07:44:47.575 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:44:47.576 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:44:47.581 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:44:47.583 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:44:47.588 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 07:44:47.591 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-13 07:44:47.632 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:47.632 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-13 07:44:47.632 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:44:47.643 [main] GenericDao - **********Entity inserted: User{userId = '730', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:44:47.643 [main] GenericDao - **********Query database by using an ID: 730, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:47.647 [main] GenericDao - **********Query by ID Found: User{userId = '730', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 07:44:47.688 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:47.689 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 07:44:47.700 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:44:47.701 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 07:44:47.746 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:44:47.746 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-13 07:44:47.746 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:47.771 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 07:44:47.772 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 07:44:47.798 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 07:44:47.849 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 07:45:55.553 [http-nio-8080-exec-10] CreateGroceryList - **********Grabbing User Name to add a new Grocery list: Tester1
[INFO ] 2019-05-13 07:45:55.567 [http-nio-8080-exec-10] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-13 07:46:00.268 [http-nio-8080-exec-10] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-13 07:46:00.274 [http-nio-8080-exec-10] GenericDao - **********Querying Exact Name: Turd
[ERROR] 2019-05-13 07:46:00.291 [http-nio-8080-exec-10] CreateGroceryList - Error looking for ingredients: javax.persistence.NoResultException: No entity found for query
[INFO ] 2019-05-13 16:22:58.831 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1367',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 16:22:58.842 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-13 16:22:58.843 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-13 16:22:58.847 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 16:22:58.849 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 16:22:58.850 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1367
[INFO ] 2019-05-13 16:22:58.851 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 16:22:58.852 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 16:22:58.852 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 16:22:58.853 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-13 16:22:59.434 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:22:59.435 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-13 16:22:59.436 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-13 16:22:59.437 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:23:02.183 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:23:02.183 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:23:02.265 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:23:02.266 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-13 16:23:02.548 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:23:02.638 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:02.639 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-13 16:23:02.640 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:02.671 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-13 16:23:02.730 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:02.730 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-13 16:23:02.731 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:23:02.749 [main] GenericDao - **********Saved|Updated entity: User{userId = '731', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:23:02.749 [main] GenericDao - **********Query database by using an ID: 731, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:02.756 [main] GenericDao - **********Query by ID Found: User{userId = '731', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:23:02.756 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:02.785 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:23:02.785 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-13 16:23:02.786 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:23:02.805 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:23:02.806 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:02.827 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:23:02.981 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:02.984 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-13 16:23:02.985 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-13 16:23:03.044 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:23:03.044 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:23:03.152 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:03.153 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-13 16:23:03.153 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 16:23:03.182 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:23:03.247 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:03.249 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-13 16:23:03.252 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:03.272 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:23:03.273 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:03.305 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:23:03.306 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:23:03.306 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:03.336 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:23:03.336 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-13T16:23:03.252, ingredients = []}
[INFO ] 2019-05-13 16:23:03.406 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:03.410 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-13 16:23:03.412 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:03.441 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 16:23:03.441 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 16:23:03.459 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:23:03.461 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:23:03.572 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:03.577 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-13 16:23:03.579 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:23:03.665 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:23:03.732 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:03.734 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-13 16:23:03.734 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:03.751 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:23:03.751 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-13 16:23:03.766 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:23:03.766 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:23:03.771 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:23:03.812 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:23:03.815 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:23:03.837 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:03.847 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 16:23:03.943 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:03.943 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-13 16:23:03.944 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:04.048 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 16:23:04.102 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:04.103 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-13 16:23:04.103 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 16:23:04.146 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:23:04.212 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:04.212 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-13 16:23:04.212 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:23:04.222 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:23:04.223 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:23:04.228 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:23:04.231 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:23:04.237 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:23:04.243 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 16:23:04.306 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:04.306 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-13 16:23:04.306 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:04.314 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:23:04.314 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:23:04.306, ingredients = []}
[INFO ] 2019-05-13 16:23:04.314 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:23:04.306, ingredients = []}
[INFO ] 2019-05-13 16:23:04.321 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 614, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:23:04.306, ingredients = []}
[INFO ] 2019-05-13 16:23:04.321 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-13 16:23:04.322 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-13 16:23:04.340 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:23:04.341 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:23:04.351 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:23:04.352 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-13 16:23:04.379 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 614, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:23:04, ingredients = []}]
[INFO ] 2019-05-13 16:23:04.430 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:04.431 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-13 16:23:04.431 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:04.440 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:23:04.441 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-13 16:23:04.528 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:23:04.528 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-13 16:23:04.538 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-13 16:23:04.539 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-13 16:23:04.564 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:23:04.568 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:23:04.568 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:23:04.597 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 170, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:23:04.598 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:23:04.635 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 170, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:23:04.636 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:23:04.660 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 170, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:23:04.662 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:23:04.685 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 170, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:23:04.751 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:04.752 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-13 16:23:04.753 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:23:04.760 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 81, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:23:04.760 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:23:04.845 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 81, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 16:23:04.846 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-13 16:23:04.860 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 81, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:23:04.861 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-13 16:23:04.874 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 81, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:23:04.875 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-13 16:23:04.877 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:23:04.897 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:23:04.897 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:23:04.923 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:23:04.924 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:23:04.973 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 81, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 16:23:04.987 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-13 16:23:05.000 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:23:05.068 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:05.069 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 16:23:05.081 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:23:05.082 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-13 16:23:05.082 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:23:05.082 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:23:05.088 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:23:05.094 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:23:05.095 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:23:05.101 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 16:23:05.105 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-13 16:23:05.152 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:05.152 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-13 16:23:05.152 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:23:05.157 [main] GenericDao - **********Entity inserted: User{userId = '732', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:23:05.157 [main] GenericDao - **********Query database by using an ID: 732, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:05.164 [main] GenericDao - **********Query by ID Found: User{userId = '732', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:23:05.209 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:05.209 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 16:23:05.220 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:23:05.221 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:23:05.266 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:23:05.266 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-13 16:23:05.266 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:05.283 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 16:23:05.283 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:23:05.332 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 16:23:05.375 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:24:25.406 [http-nio-8080-exec-3] GenericDao - **********Query database by using an ID: 22, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:24:30.427 [http-nio-8080-exec-3] GenericDao - **********Query by ID Found: User{userId = '22', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-13 16:24:30.427 [http-nio-8080-exec-3] GenericDao - **********Attempting to delete: User{userId = '22', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-13 16:24:30.453 [http-nio-8080-exec-3] GenericDao - **********Successfully deleted: User{userId = '22', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-13 16:24:30.577 [http-nio-8080-exec-3] DeleteUserPage - User ID requested to delete: User{userId = '22', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-13 16:26:07.891 [http-nio-8080-exec-1] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:26:08.460 [http-nio-8080-exec-1] GenericDao - **********Get All Query Found: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, User{userId = '18', firstName = 'Andrew', lastName = 'Park', userName = 'Apark', userPassword = 'AdminMan'}, User{userId = '24', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}]
[INFO ] 2019-05-13 16:27:26.372 [http-nio-8080-exec-3] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:27:26.481 [http-nio-8080-exec-3] GenericDao - **********Get All Query Found: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, User{userId = '18', firstName = 'Andrew', lastName = 'Park', userName = 'Apark', userPassword = 'AdminMan'}, User{userId = '24', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}]
[INFO ] 2019-05-13 16:28:00.587 [http-nio-8080-exec-10] GenericDao - **********Query database by using an ID: 24, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:28:00.597 [http-nio-8080-exec-10] GenericDao - **********Query by ID Found: User{userId = '24', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}
[INFO ] 2019-05-13 16:28:00.599 [http-nio-8080-exec-10] GenericDao - **********Attempting to delete: User{userId = '24', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}
[INFO ] 2019-05-13 16:28:00.604 [http-nio-8080-exec-10] GenericDao - **********Successfully deleted: User{userId = '24', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}
[INFO ] 2019-05-13 16:28:00.613 [http-nio-8080-exec-10] DeleteUserPage - User ID requested to delete: User{userId = '24', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe1', userPassword = 'General'}
[INFO ] 2019-05-13 16:31:22.626 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1367',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 16:31:22.637 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-13 16:31:22.638 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-13 16:31:22.640 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 16:31:22.640 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 16:31:22.641 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1367
[INFO ] 2019-05-13 16:31:22.642 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 16:31:22.642 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 16:31:22.642 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 16:31:22.643 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-13 16:31:23.073 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:23.073 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-13 16:31:23.073 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-13 16:31:23.074 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:31:25.558 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:31:25.559 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:31:25.702 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:31:25.703 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-13 16:31:25.955 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:31:26.039 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:26.040 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-13 16:31:26.040 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:26.065 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-13 16:31:26.119 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:26.119 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-13 16:31:26.119 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:31:26.141 [main] GenericDao - **********Saved|Updated entity: User{userId = '733', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:31:26.142 [main] GenericDao - **********Query database by using an ID: 733, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:26.148 [main] GenericDao - **********Query by ID Found: User{userId = '733', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:31:26.149 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:26.161 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:31:26.161 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-13 16:31:26.161 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:31:26.175 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:31:26.175 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:26.190 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:31:26.245 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:26.246 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-13 16:31:26.246 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-13 16:31:26.297 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:31:26.297 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:31:26.352 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:26.352 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-13 16:31:26.353 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 16:31:26.370 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:31:26.429 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:26.430 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-13 16:31:26.431 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:26.451 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:31:26.453 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:26.471 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:31:26.471 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:31:26.472 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:26.497 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:31:26.498 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-13T16:31:26.430, ingredients = []}
[INFO ] 2019-05-13 16:31:26.581 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:26.582 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-13 16:31:26.582 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:26.614 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 16:31:26.615 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 16:31:26.638 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:31:26.647 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:31:26.726 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:26.727 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-13 16:31:26.727 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:31:26.790 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:31:26.864 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:26.864 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-13 16:31:26.864 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:26.870 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:31:26.871 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-13 16:31:26.892 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:31:26.892 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:31:26.896 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:31:26.905 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:31:26.907 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:31:26.919 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:26.923 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 16:31:26.975 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:26.976 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-13 16:31:26.976 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:27.036 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 16:31:27.086 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:27.086 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-13 16:31:27.086 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 16:31:27.182 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:31:27.234 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:27.234 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-13 16:31:27.235 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:31:27.239 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:31:27.240 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:31:27.240 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:31:27.242 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:31:27.250 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:31:27.259 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 16:31:27.301 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:27.303 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-13 16:31:27.305 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:27.316 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:31:27.316 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:31:27.304, ingredients = []}
[INFO ] 2019-05-13 16:31:27.316 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:31:27.304, ingredients = []}
[INFO ] 2019-05-13 16:31:27.323 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 615, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:31:27.304, ingredients = []}
[INFO ] 2019-05-13 16:31:27.324 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-13 16:31:27.324 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-13 16:31:27.343 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:31:27.345 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:31:27.356 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:31:27.356 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-13 16:31:27.369 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 615, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:31:27, ingredients = []}]
[INFO ] 2019-05-13 16:31:27.415 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:27.416 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-13 16:31:27.416 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:27.423 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:31:27.423 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-13 16:31:27.435 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:31:27.435 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-13 16:31:27.440 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-13 16:31:27.441 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-13 16:31:27.450 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:31:27.451 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:31:27.451 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:31:27.468 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 171, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:31:27.469 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:31:27.488 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 171, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:31:27.489 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:31:27.508 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 171, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:31:27.508 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:31:27.531 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 171, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:31:27.602 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:27.603 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-13 16:31:27.603 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:31:27.621 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 82, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:31:27.622 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:31:27.649 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 82, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 16:31:27.649 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-13 16:31:27.655 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 82, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:31:27.656 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-13 16:31:27.677 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 82, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:31:27.678 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-13 16:31:27.678 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:31:27.702 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:31:27.702 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:31:27.723 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:31:27.725 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:31:27.767 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 82, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 16:31:27.767 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-13 16:31:27.777 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:31:27.832 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:27.832 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 16:31:27.844 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:31:27.845 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-13 16:31:27.845 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:31:27.845 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:31:27.847 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:31:27.852 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:31:27.853 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:31:27.860 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 16:31:27.865 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-13 16:31:27.920 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:27.921 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-13 16:31:27.921 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:31:27.929 [main] GenericDao - **********Entity inserted: User{userId = '734', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:31:27.929 [main] GenericDao - **********Query database by using an ID: 734, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:27.941 [main] GenericDao - **********Query by ID Found: User{userId = '734', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:31:27.987 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:27.988 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 16:31:28.007 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:31:28.008 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:31:28.050 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:31:28.050 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-13 16:31:28.050 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:28.067 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 16:31:28.068 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:31:28.094 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 16:31:28.138 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:33:16.664 [http-nio-8080-exec-9] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:33:21.268 [http-nio-8080-exec-9] GenericDao - **********Get All Query Found: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, User{userId = '18', firstName = 'Andrew', lastName = 'Park', userName = 'Apark', userPassword = 'AdminMan'}]
[INFO ] 2019-05-13 16:33:58.684 [http-nio-8080-exec-4] AddUserPage - User requested to add: User{userId = 'null', firstName = 'John', lastName = 'Doe', userName = 'John', userPassword = 'General'}
[INFO ] 2019-05-13 16:33:58.685 [http-nio-8080-exec-4] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'John', lastName = 'Doe', userName = 'John', userPassword = 'General'}
[INFO ] 2019-05-13 16:33:58.841 [http-nio-8080-exec-4] GenericDao - **********Entity inserted: User{userId = '25', firstName = 'John', lastName = 'Doe', userName = 'John', userPassword = 'General'}
[INFO ] 2019-05-13 16:34:21.102 [http-nio-8080-exec-1] GenericDao - **********Query database by using an ID: 25, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:34:21.117 [http-nio-8080-exec-1] GenericDao - **********Query by ID Found: User{userId = '25', firstName = 'John', lastName = 'Doe', userName = 'John', userPassword = 'General'}
[INFO ] 2019-05-13 16:34:33.624 [http-nio-8080-exec-3] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:34:33.712 [http-nio-8080-exec-3] GenericDao - **********Get All Query Found: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, User{userId = '18', firstName = 'Andrew', lastName = 'Park', userName = 'Apark', userPassword = 'AdminMan'}, User{userId = '25', firstName = 'John', lastName = 'Doe', userName = 'John', userPassword = 'General'}]
[INFO ] 2019-05-13 16:34:45.456 [http-nio-8080-exec-6] GenericDao - **********Query database by using an ID: 25, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:34:45.463 [http-nio-8080-exec-6] GenericDao - **********Query by ID Found: User{userId = '25', firstName = 'John', lastName = 'Doe', userName = 'John', userPassword = 'General'}
[INFO ] 2019-05-13 16:35:44.650 [http-nio-8080-exec-3] GenericDao - **********Query database using the User Name: Tester1
[INFO ] 2019-05-13 16:35:44.701 [http-nio-8080-exec-3] GenericDao - Found User Name: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}]
[INFO ] 2019-05-13 16:35:44.702 [http-nio-8080-exec-3] GenericDao - **********Querying user recipes by ID: 8
[INFO ] 2019-05-13 16:35:44.729 [http-nio-8080-exec-3] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:35:44.730 [http-nio-8080-exec-3] SearchRecipes - $$$$$$$$$ Working on finding the ingredients: []
[INFO ] 2019-05-13 16:36:01.519 [http-nio-8080-exec-5] SearchRecipes - $$$$$$$$$$ New Recipe Search term recieved: chicken
[INFO ] 2019-05-13 16:36:03.192 [http-nio-8080-exec-5] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'chicken',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Best Easy Honey Lemon Chicken',flavors = 'Flavors{meaty = '0.8333333333333334',salty = '0.8333333333333334',sweet = '0.16666666666666666',sour = '0.6666666666666666',bitter = '0.5',piquant = '0.0'}',sourceDisplayName = 'Julie's Cafe Bakery',smallImageUrls = '[https://lh3.googleusercontent.com/QLVn6pH36VfGGX2Bi1w4gImlhrN_TKDptQpxi3J_eWy8rXKlu-eLltfE6wnpNAeMQD2yM-p6S7JgAdHSA7Zk=s90]',totalTimeInSeconds = '2700',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/WsQxj9WAGux_XhWzkOATcVuji-rQ0pXjsOQAX3t6GI_q0h6hysPodlnvMd84xdJl-hMGu4Z7T3-ewjkZlWyodQ=s90-c'}',ingredients = '[chicken thighs, lemon juice, olive oil, minced garlic, sea salt, dried oregano, honey]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = 'null'}',id = 'Best-Easy-Honey-Lemon-Chicken-2721136'}, MatchesItem{recipeName = 'Man-Pleasing Chicken',flavors = 'null',sourceDisplayName = 'Witty in the City',smallImageUrls = '[http://lh4.ggpht.com/gInMhsmcQ708LZAw4ryeheSm6cOuvDtlzpHpbrE1RW01kYudZlWoRBcEiS-gj_2mj_8Xdl-dzgNY2CJxbHbT=s90]',totalTimeInSeconds = '3300',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/UwNbjIdEdFmkETuO0pjnBvhuPkgXVskHco3qA5lV1xInenr6jiXt3zljBt9-TptV_oi-xcG_TQuS3dltp-gURQ=s90-c'}',ingredients = '[chicken thighs, dijon mustard, maple syrup, rice vinegar, fresh rosemary, salt, pepper]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = 'null'}',id = 'Man-Pleasing-Chicken-608913'}, MatchesItem{recipeName = 'Easy Pan-Seared Chicken',flavors = 'Flavors{meaty = '0.8333333333333334',salty = '0.6666666666666666',sweet = '0.0',sour = '0.16666666666666666',bitter = '0.5',piquant = '0.0'}',sourceDisplayName = 'What's In The Pan?',smallImageUrls = '[https://lh3.googleusercontent.com/Xua4I8z6KNgft_iiq4ON_iDg1FQXoMLp12luFoj32NcvNltI_xWvWbkSOC5m-zxwSMCSfHOBtj41Q-gI50z1RL8=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/19ObImbOqWinuzGsBdTKSusD0TlswvQjVoCQwM3PYJUfF4QwIeyEEqqtwOp8gnElAqunnLGXoIsTw0G7HO56zw=s90-c'}',ingredients = '[chicken breasts, flour, salt, black pepper, garlic powder, italian seasoning, olive oil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = 'null'}',id = 'Easy-Pan-Seared-Chicken-2301853'}, MatchesItem{recipeName = 'Lemon Chicken Scallopini With Spinach',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.5',sweet = '0.16666666666666666',sour = '0.8333333333333334',bitter = '0.16666666666666666',piquant = '0.0'}',sourceDisplayName = 'Going My Wayz',smallImageUrls = '[https://lh3.googleusercontent.com/ZcOm5mZVh71HUnEk84bqyCztpZyAptVjMzR_bQo7Sa6En8Sd_dDQ5OKJT2TEgUrWUuA6QU7KUkWiJ8X2ukZa=s90]',totalTimeInSeconds = '1500',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/lZePtEa3lwMgTsKWFwHKEYx38DqfWBO1Sd7SjbfPrAOhaKauClyVbN0rGEM3PvBTwdyxygiEIRvDU45-lnabidQ=s90-c'}',ingredients = '[lemon, olive oil, skinless, boneless chicken breast halves, garlic, unsalted chicken stock, cream of celery soup, baby spinach]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = 'null'}',id = 'Lemon-Chicken-Scallopini-With-Spinach-2594925'}, MatchesItem{recipeName = 'Three Ingredient Italian BBQ Chicken',flavors = 'Flavors{meaty = '0.6666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.0'}',sourceDisplayName = 'Plain Chicken',smallImageUrls = '[https://lh3.googleusercontent.com/opnoS7pQbEsYeR4el701Jv2DPpqkf5o2qOUOCtZviyxGWjIzTyke9PBXcY35q59wsEHLnQO8-1VBAEqIJvMYcg=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/TSBIrjNcVPgUn3LKBVIiQb1AA3T5Ei_47JTIVcfr0Q6j9627PhByi9451rw6RIU8rtAD9uIZt8UWYN50FkTbXA=s90-c'}',ingredients = '[bbq sauce, italian dressing, boneless chicken breasts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Barbecue, Italian]'}',id = 'Three-Ingredient-Italian-BBQ-Chicken-2592658'}, MatchesItem{recipeName = 'Easy Chicken Enchilada Casserole',flavors = 'Flavors{meaty = '0.8333333333333334',salty = '0.8333333333333334',sweet = '0.16666666666666666',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'Jo Cooks',smallImageUrls = '[https://lh3.googleusercontent.com/UO-H1MlQnHkkD3qOyDbCvl4-ys0K8OW5ox7WCXt9aj8-WOc4I9M2peZ7inKYVw5-MTcZx018cRQgggTy5Iwi=s90]',totalTimeInSeconds = '4200',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/vnXGK_qRnnk8_Hsa7SIyWrX2e2EqzZyjsxtFZQ2wyo9uIyoO8CRCUMpc9j3tJC4m7Zm81AU4f7YVKV54NPpr=s90-c'}',ingredients = '[chicken breasts boneless, enchilada sauce, corn tortillas, monterey jack cheese]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Kid-Friendly]'}',id = 'Easy-Chicken-Enchilada-Casserole-2350097'}, MatchesItem{recipeName = 'Crack Chicken Spaghetti',flavors = 'null',sourceDisplayName = 'Plain Chicken',smallImageUrls = '[https://lh3.googleusercontent.com/i7ddbz2aAJ82gO6IrW-Zjk95i0dBG6Cx6LgQuN2wrTZs1G3UUrseflbhdJ0r1pLPA8kCPqw9pd4qi0v4ehGb=s90]',totalTimeInSeconds = '3300',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/125GvuwNbapAqI8xp392zhpGJ_sL_WDO1IxFV-4xSdZHKKSSl__xM35Uq-1QD2iuS4Gi8hnveWR2WkaXT57h=s90-c'}',ingredients = '[spaghetti, cream of chicken soup, velveeta cheese, chicken broth, ranch dressing mix, chicken, bacon bits, shredded cheddar cheese]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Kid-Friendly]'}',id = 'Crack-Chicken-Spaghetti-2572120'}, MatchesItem{recipeName = 'Chicken Nachatta',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.16666666666666666',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.16666666666666666',piquant = '0.0'}',sourceDisplayName = 'We Heart Food',smallImageUrls = '[https://lh3.googleusercontent.com/wamVa8PKX51j1J7sCA06zYiiFOIDitH__VjcQCfwUncipkzRu0sh_qmV2qH_dy95iZy1PyI5b4PMGBLoKsFgMTM=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/rjE7aW3p4i4hE8Lfi84SniCU7bI1IWCDTMZUPZI9dj7I5mDWhpX-v9qB87Nlb-D9jmfltOnR3SIRJn8rsS2wRg=s90-c'}',ingredients = '[unsalted butter, red onion, boneless chicken breasts, all purpose flour, olive oil, light brown sugar, chicken broth, marsala wine, sliced mushrooms, dried cranberries, heavy cream]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = 'null'}',id = 'Chicken-Nachatta-1757165'}, MatchesItem{recipeName = 'Healthy Spinach Artichoke Chicken Bake',flavors = 'Flavors{meaty = '0.6666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.16666666666666666',bitter = '0.5',piquant = '0.16666666666666666'}',sourceDisplayName = 'the Schmidty wife',smallImageUrls = '[https://lh3.googleusercontent.com/7eSL4Xtyxol-KPXyo57HnzQTW3-Dc40vOZuL9mA3d2donqL6decKJnkZW0sfjVTGaQ9BplmlaZmRUPUw_mo=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/SDXoraKwL3v7Xj-8cF9crlfyQr664pGvZcTObHSd5vfND-w1iKL78gCsWmjD3YMbBIXgSOEsOWaAyc_DrSiwJA=s90-c'}',ingredients = '[chicken breasts, baby spinach, plain low fat yogurt, marinated artichoke hearts, dijon mustard, garlic powder, mozzarella cheese]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Kid-Friendly]'}',id = 'Healthy-Spinach-Artichoke-Chicken-Bake-2719666'}, MatchesItem{recipeName = 'Low Carb Fried Chicken',flavors = 'null',sourceDisplayName = 'Killer Keto-Blog',smallImageUrls = '[https://lh3.googleusercontent.com/2rgzaH_RWw9ea1ZfwrlRtXV1DrhY879tzWgpyvi8tq6mANgR0EhK7PrLwzHMwIFejQ1H_VVJXy_j8VQKRh0_PA=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/X9JvOuR--4kNKkYFxG5_htQxBx8t1wxIbEfXhyGWom5BokSstoel8YvnrA_6X9BijZe05ZMdYQfYgv5rSkt76w=s90-c'}',ingredients = '[egg, chicken, pork rinds, salt, pepper, avocado oil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Southern & Soul Food]'}',id = 'Low-Carb-Fried-Chicken-2516074'}]',totalMatchCount = '240928',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 16:36:03.196 [http-nio-8080-exec-5] YummlyDataGrabber - $$$$$$$$$$ Ingredients: chicken thighs
[INFO ] 2019-05-13 16:36:03.196 [http-nio-8080-exec-5] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Best Easy Honey Lemon Chicken',flavors = 'Flavors{meaty = '0.8333333333333334',salty = '0.8333333333333334',sweet = '0.16666666666666666',sour = '0.6666666666666666',bitter = '0.5',piquant = '0.0'}',sourceDisplayName = 'Julie's Cafe Bakery',smallImageUrls = '[https://lh3.googleusercontent.com/QLVn6pH36VfGGX2Bi1w4gImlhrN_TKDptQpxi3J_eWy8rXKlu-eLltfE6wnpNAeMQD2yM-p6S7JgAdHSA7Zk=s90]',totalTimeInSeconds = '2700',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/WsQxj9WAGux_XhWzkOATcVuji-rQ0pXjsOQAX3t6GI_q0h6hysPodlnvMd84xdJl-hMGu4Z7T3-ewjkZlWyodQ=s90-c'}',ingredients = '[chicken thighs, lemon juice, olive oil, minced garlic, sea salt, dried oregano, honey]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = 'null'}',id = 'Best-Easy-Honey-Lemon-Chicken-2721136'}, MatchesItem{recipeName = 'Man-Pleasing Chicken',flavors = 'null',sourceDisplayName = 'Witty in the City',smallImageUrls = '[http://lh4.ggpht.com/gInMhsmcQ708LZAw4ryeheSm6cOuvDtlzpHpbrE1RW01kYudZlWoRBcEiS-gj_2mj_8Xdl-dzgNY2CJxbHbT=s90]',totalTimeInSeconds = '3300',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/UwNbjIdEdFmkETuO0pjnBvhuPkgXVskHco3qA5lV1xInenr6jiXt3zljBt9-TptV_oi-xcG_TQuS3dltp-gURQ=s90-c'}',ingredients = '[chicken thighs, dijon mustard, maple syrup, rice vinegar, fresh rosemary, salt, pepper]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = 'null'}',id = 'Man-Pleasing-Chicken-608913'}, MatchesItem{recipeName = 'Easy Pan-Seared Chicken',flavors = 'Flavors{meaty = '0.8333333333333334',salty = '0.6666666666666666',sweet = '0.0',sour = '0.16666666666666666',bitter = '0.5',piquant = '0.0'}',sourceDisplayName = 'What's In The Pan?',smallImageUrls = '[https://lh3.googleusercontent.com/Xua4I8z6KNgft_iiq4ON_iDg1FQXoMLp12luFoj32NcvNltI_xWvWbkSOC5m-zxwSMCSfHOBtj41Q-gI50z1RL8=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/19ObImbOqWinuzGsBdTKSusD0TlswvQjVoCQwM3PYJUfF4QwIeyEEqqtwOp8gnElAqunnLGXoIsTw0G7HO56zw=s90-c'}',ingredients = '[chicken breasts, flour, salt, black pepper, garlic powder, italian seasoning, olive oil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = 'null'}',id = 'Easy-Pan-Seared-Chicken-2301853'}, MatchesItem{recipeName = 'Lemon Chicken Scallopini With Spinach',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.5',sweet = '0.16666666666666666',sour = '0.8333333333333334',bitter = '0.16666666666666666',piquant = '0.0'}',sourceDisplayName = 'Going My Wayz',smallImageUrls = '[https://lh3.googleusercontent.com/ZcOm5mZVh71HUnEk84bqyCztpZyAptVjMzR_bQo7Sa6En8Sd_dDQ5OKJT2TEgUrWUuA6QU7KUkWiJ8X2ukZa=s90]',totalTimeInSeconds = '1500',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/lZePtEa3lwMgTsKWFwHKEYx38DqfWBO1Sd7SjbfPrAOhaKauClyVbN0rGEM3PvBTwdyxygiEIRvDU45-lnabidQ=s90-c'}',ingredients = '[lemon, olive oil, skinless, boneless chicken breast halves, garlic, unsalted chicken stock, cream of celery soup, baby spinach]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = 'null'}',id = 'Lemon-Chicken-Scallopini-With-Spinach-2594925'}, MatchesItem{recipeName = 'Three Ingredient Italian BBQ Chicken',flavors = 'Flavors{meaty = '0.6666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.0'}',sourceDisplayName = 'Plain Chicken',smallImageUrls = '[https://lh3.googleusercontent.com/opnoS7pQbEsYeR4el701Jv2DPpqkf5o2qOUOCtZviyxGWjIzTyke9PBXcY35q59wsEHLnQO8-1VBAEqIJvMYcg=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/TSBIrjNcVPgUn3LKBVIiQb1AA3T5Ei_47JTIVcfr0Q6j9627PhByi9451rw6RIU8rtAD9uIZt8UWYN50FkTbXA=s90-c'}',ingredients = '[bbq sauce, italian dressing, boneless chicken breasts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Barbecue, Italian]'}',id = 'Three-Ingredient-Italian-BBQ-Chicken-2592658'}, MatchesItem{recipeName = 'Easy Chicken Enchilada Casserole',flavors = 'Flavors{meaty = '0.8333333333333334',salty = '0.8333333333333334',sweet = '0.16666666666666666',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'Jo Cooks',smallImageUrls = '[https://lh3.googleusercontent.com/UO-H1MlQnHkkD3qOyDbCvl4-ys0K8OW5ox7WCXt9aj8-WOc4I9M2peZ7inKYVw5-MTcZx018cRQgggTy5Iwi=s90]',totalTimeInSeconds = '4200',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/vnXGK_qRnnk8_Hsa7SIyWrX2e2EqzZyjsxtFZQ2wyo9uIyoO8CRCUMpc9j3tJC4m7Zm81AU4f7YVKV54NPpr=s90-c'}',ingredients = '[chicken breasts boneless, enchilada sauce, corn tortillas, monterey jack cheese]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Kid-Friendly]'}',id = 'Easy-Chicken-Enchilada-Casserole-2350097'}, MatchesItem{recipeName = 'Crack Chicken Spaghetti',flavors = 'null',sourceDisplayName = 'Plain Chicken',smallImageUrls = '[https://lh3.googleusercontent.com/i7ddbz2aAJ82gO6IrW-Zjk95i0dBG6Cx6LgQuN2wrTZs1G3UUrseflbhdJ0r1pLPA8kCPqw9pd4qi0v4ehGb=s90]',totalTimeInSeconds = '3300',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/125GvuwNbapAqI8xp392zhpGJ_sL_WDO1IxFV-4xSdZHKKSSl__xM35Uq-1QD2iuS4Gi8hnveWR2WkaXT57h=s90-c'}',ingredients = '[spaghetti, cream of chicken soup, velveeta cheese, chicken broth, ranch dressing mix, chicken, bacon bits, shredded cheddar cheese]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Kid-Friendly]'}',id = 'Crack-Chicken-Spaghetti-2572120'}, MatchesItem{recipeName = 'Chicken Nachatta',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.16666666666666666',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.16666666666666666',piquant = '0.0'}',sourceDisplayName = 'We Heart Food',smallImageUrls = '[https://lh3.googleusercontent.com/wamVa8PKX51j1J7sCA06zYiiFOIDitH__VjcQCfwUncipkzRu0sh_qmV2qH_dy95iZy1PyI5b4PMGBLoKsFgMTM=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/rjE7aW3p4i4hE8Lfi84SniCU7bI1IWCDTMZUPZI9dj7I5mDWhpX-v9qB87Nlb-D9jmfltOnR3SIRJn8rsS2wRg=s90-c'}',ingredients = '[unsalted butter, red onion, boneless chicken breasts, all purpose flour, olive oil, light brown sugar, chicken broth, marsala wine, sliced mushrooms, dried cranberries, heavy cream]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = 'null'}',id = 'Chicken-Nachatta-1757165'}, MatchesItem{recipeName = 'Healthy Spinach Artichoke Chicken Bake',flavors = 'Flavors{meaty = '0.6666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.16666666666666666',bitter = '0.5',piquant = '0.16666666666666666'}',sourceDisplayName = 'the Schmidty wife',smallImageUrls = '[https://lh3.googleusercontent.com/7eSL4Xtyxol-KPXyo57HnzQTW3-Dc40vOZuL9mA3d2donqL6decKJnkZW0sfjVTGaQ9BplmlaZmRUPUw_mo=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/SDXoraKwL3v7Xj-8cF9crlfyQr664pGvZcTObHSd5vfND-w1iKL78gCsWmjD3YMbBIXgSOEsOWaAyc_DrSiwJA=s90-c'}',ingredients = '[chicken breasts, baby spinach, plain low fat yogurt, marinated artichoke hearts, dijon mustard, garlic powder, mozzarella cheese]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Kid-Friendly]'}',id = 'Healthy-Spinach-Artichoke-Chicken-Bake-2719666'}, MatchesItem{recipeName = 'Low Carb Fried Chicken',flavors = 'null',sourceDisplayName = 'Killer Keto-Blog',smallImageUrls = '[https://lh3.googleusercontent.com/2rgzaH_RWw9ea1ZfwrlRtXV1DrhY879tzWgpyvi8tq6mANgR0EhK7PrLwzHMwIFejQ1H_VVJXy_j8VQKRh0_PA=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/X9JvOuR--4kNKkYFxG5_htQxBx8t1wxIbEfXhyGWom5BokSstoel8YvnrA_6X9BijZe05ZMdYQfYgv5rSkt76w=s90-c'}',ingredients = '[egg, chicken, pork rinds, salt, pepper, avocado oil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Southern & Soul Food]'}',id = 'Low-Carb-Fried-Chicken-2516074'}]
[INFO ] 2019-05-13 16:36:03.198 [http-nio-8080-exec-5] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 16:36:03.198 [http-nio-8080-exec-5] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 16:36:03.199 [http-nio-8080-exec-5] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 240928
[INFO ] 2019-05-13 16:36:03.199 [http-nio-8080-exec-5] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 16:36:03.199 [http-nio-8080-exec-5] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 16:36:03.199 [http-nio-8080-exec-5] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 16:36:03.199 [http-nio-8080-exec-5] SearchRecipes - $$$$$$$$$$ New Recipe Search found: [Best Easy Honey Lemon Chicken, Man-Pleasing Chicken, Easy Pan-Seared Chicken, Lemon Chicken Scallopini With Spinach, Three Ingredient Italian BBQ Chicken, Easy Chicken Enchilada Casserole, Crack Chicken Spaghetti, Chicken Nachatta, Healthy Spinach Artichoke Chicken Bake, Low Carb Fried Chicken]
[INFO ] 2019-05-13 16:36:32.830 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1367',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 16:36:32.838 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-13 16:36:32.839 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-13 16:36:32.841 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 16:36:32.841 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 16:36:32.842 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1367
[INFO ] 2019-05-13 16:36:32.842 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 16:36:32.843 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 16:36:32.844 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 16:36:32.845 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-13 16:36:33.363 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:33.363 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-13 16:36:33.363 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-13 16:36:33.364 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:36:35.859 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:36:35.860 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:36:36.001 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:36:36.002 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-13 16:36:36.271 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:36:36.334 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:36.334 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-13 16:36:36.334 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:36.367 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-13 16:36:36.424 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:36.425 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-13 16:36:36.425 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:36:36.443 [main] GenericDao - **********Saved|Updated entity: User{userId = '735', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:36:36.443 [main] GenericDao - **********Query database by using an ID: 735, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:36.450 [main] GenericDao - **********Query by ID Found: User{userId = '735', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:36:36.451 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:36.476 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:36:36.477 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-13 16:36:36.477 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:36:36.503 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:36:36.504 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:36.527 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:36:36.593 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:36.593 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-13 16:36:36.594 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-13 16:36:36.635 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:36:36.636 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:36:36.687 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:36.688 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-13 16:36:36.688 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 16:36:36.727 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:36:36.798 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:36.798 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-13 16:36:36.799 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:36.814 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:36:36.816 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:36.840 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:36:36.840 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:36:36.840 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:36.855 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:36:36.856 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-13T16:36:36.799, ingredients = []}
[INFO ] 2019-05-13 16:36:36.916 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:36.917 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-13 16:36:36.917 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:36.950 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 16:36:36.950 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 16:36:36.962 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:36:36.962 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:36:37.025 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:37.026 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-13 16:36:37.028 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:36:37.090 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:36:37.172 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:37.173 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-13 16:36:37.173 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:37.180 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:36:37.180 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-13 16:36:37.210 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:36:37.210 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:36:37.214 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:36:37.231 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:36:37.236 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:36:37.246 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:37.256 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 16:36:37.309 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:37.309 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-13 16:36:37.309 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:37.424 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 16:36:37.496 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:37.496 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-13 16:36:37.497 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 16:36:37.590 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:36:37.660 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:37.661 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-13 16:36:37.661 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:36:37.665 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:36:37.665 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:36:37.666 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:36:37.667 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:36:37.672 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:36:37.680 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 16:36:37.727 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:37.727 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-13 16:36:37.728 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:37.735 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:36:37.735 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:36:37.728, ingredients = []}
[INFO ] 2019-05-13 16:36:37.736 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:36:37.728, ingredients = []}
[INFO ] 2019-05-13 16:36:37.747 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 616, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:36:37.728, ingredients = []}
[INFO ] 2019-05-13 16:36:37.747 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-13 16:36:37.748 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-13 16:36:37.760 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:36:37.760 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:36:37.765 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:36:37.766 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-13 16:36:37.790 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 616, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:36:38, ingredients = []}]
[INFO ] 2019-05-13 16:36:37.836 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:37.836 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-13 16:36:37.837 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:37.848 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:36:37.848 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-13 16:36:37.871 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:36:37.871 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-13 16:36:37.879 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-13 16:36:37.879 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-13 16:36:37.896 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:36:37.896 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:36:37.897 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:36:37.913 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 172, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:36:37.913 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:36:37.936 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 172, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:36:37.936 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:36:37.960 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 172, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:36:37.961 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:36:37.993 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 172, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:36:38.051 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:38.052 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-13 16:36:38.052 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:36:38.059 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 83, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:36:38.060 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:36:38.090 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 83, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 16:36:38.090 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-13 16:36:38.103 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 83, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:36:38.104 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-13 16:36:38.119 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 83, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:36:38.119 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-13 16:36:38.120 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:36:38.132 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:36:38.132 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:36:38.145 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:36:38.146 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:36:38.174 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 83, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 16:36:38.175 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-13 16:36:38.186 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:36:38.238 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:38.239 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 16:36:38.250 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:36:38.250 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-13 16:36:38.250 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:36:38.250 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:36:38.252 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:36:38.257 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:36:38.262 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:36:38.271 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 16:36:38.274 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-13 16:36:38.314 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:38.314 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-13 16:36:38.314 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:36:38.320 [main] GenericDao - **********Entity inserted: User{userId = '736', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:36:38.320 [main] GenericDao - **********Query database by using an ID: 736, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:38.328 [main] GenericDao - **********Query by ID Found: User{userId = '736', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:36:38.387 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:38.387 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 16:36:38.404 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:36:38.404 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:36:38.447 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:36:38.448 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-13 16:36:38.448 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:38.469 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 16:36:38.470 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:36:38.495 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 16:36:38.544 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:43:29.701 [http-nio-8080-exec-3] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:43:34.451 [http-nio-8080-exec-3] GenericDao - **********Get All Query Found: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, User{userId = '18', firstName = 'Andrew', lastName = 'Park', userName = 'Apark', userPassword = 'AdminMan'}, User{userId = '25', firstName = 'John', lastName = 'Doe', userName = 'John', userPassword = 'General'}]
[INFO ] 2019-05-13 16:43:52.364 [http-nio-8080-exec-4] GenericDao - **********Query database by using an ID: 25, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:43:52.375 [http-nio-8080-exec-4] GenericDao - **********Query by ID Found: User{userId = '25', firstName = 'John', lastName = 'Doe', userName = 'John', userPassword = 'General'}
[INFO ] 2019-05-13 16:43:52.375 [http-nio-8080-exec-4] GenericDao - **********Attempting to delete: User{userId = '25', firstName = 'John', lastName = 'Doe', userName = 'John', userPassword = 'General'}
[INFO ] 2019-05-13 16:43:52.404 [http-nio-8080-exec-4] GenericDao - **********Successfully deleted: User{userId = '25', firstName = 'John', lastName = 'Doe', userName = 'John', userPassword = 'General'}
[INFO ] 2019-05-13 16:43:52.471 [http-nio-8080-exec-4] DeleteUserPage - User ID requested to delete: User{userId = '25', firstName = 'John', lastName = 'Doe', userName = 'John', userPassword = 'General'}
[INFO ] 2019-05-13 16:45:12.905 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1367',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 16:45:12.915 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-13 16:45:12.916 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-13 16:45:12.917 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 16:45:12.917 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 16:45:12.918 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1367
[INFO ] 2019-05-13 16:45:12.918 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 16:45:12.918 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 16:45:12.918 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 16:45:12.919 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-13 16:45:13.448 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:13.448 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-13 16:45:13.449 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-13 16:45:13.449 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:45:16.019 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:45:16.019 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:45:16.104 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:45:16.105 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-13 16:45:16.362 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:45:16.444 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:16.444 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-13 16:45:16.444 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:16.473 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-13 16:45:16.530 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:16.530 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-13 16:45:16.531 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:45:16.552 [main] GenericDao - **********Saved|Updated entity: User{userId = '737', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:45:16.553 [main] GenericDao - **********Query database by using an ID: 737, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:16.560 [main] GenericDao - **********Query by ID Found: User{userId = '737', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:45:16.561 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:16.579 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:45:16.579 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-13 16:45:16.579 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:45:16.597 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:45:16.597 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:16.611 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:45:16.685 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:16.686 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-13 16:45:16.687 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-13 16:45:16.725 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:45:16.726 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:45:16.791 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:16.792 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-13 16:45:16.792 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 16:45:16.812 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:45:16.872 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:16.873 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-13 16:45:16.874 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:16.902 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:45:16.902 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:16.917 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:45:16.917 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:45:16.917 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:16.943 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:45:16.944 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-13T16:45:16.874, ingredients = []}
[INFO ] 2019-05-13 16:45:17.022 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:17.023 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-13 16:45:17.023 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:17.060 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 16:45:17.061 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 16:45:17.087 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:45:17.088 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:45:17.153 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:17.154 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-13 16:45:17.155 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:45:17.228 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:45:17.288 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:17.289 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-13 16:45:17.289 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:17.296 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:45:17.296 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-13 16:45:17.323 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:45:17.324 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:45:17.329 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:45:17.336 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:45:17.338 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:45:17.346 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:17.355 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 16:45:17.423 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:17.423 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-13 16:45:17.423 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:17.532 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 16:45:17.611 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:17.612 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-13 16:45:17.612 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 16:45:17.721 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:45:17.769 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:17.770 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-13 16:45:17.770 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:45:17.773 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:45:17.774 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:45:17.774 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:45:17.775 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:45:17.778 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:45:17.784 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 16:45:17.817 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:17.817 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-13 16:45:17.818 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:17.827 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:45:17.829 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:45:17.818, ingredients = []}
[INFO ] 2019-05-13 16:45:17.829 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:45:17.818, ingredients = []}
[INFO ] 2019-05-13 16:45:17.837 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 617, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:45:17.818, ingredients = []}
[INFO ] 2019-05-13 16:45:17.837 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-13 16:45:17.837 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-13 16:45:17.850 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:45:17.850 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:45:17.859 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:45:17.859 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-13 16:45:17.873 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 617, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:45:18, ingredients = []}]
[INFO ] 2019-05-13 16:45:17.913 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:17.914 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-13 16:45:17.914 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:17.921 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:45:17.921 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-13 16:45:17.943 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:45:17.944 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-13 16:45:17.951 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-13 16:45:17.951 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-13 16:45:17.966 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:45:17.967 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:45:17.968 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:45:17.988 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 173, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:45:17.989 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:45:18.028 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 173, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:45:18.029 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:45:18.059 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 173, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:45:18.059 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:45:18.088 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 173, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:45:18.147 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:18.147 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-13 16:45:18.148 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:45:18.162 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 84, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:45:18.162 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:45:18.205 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 84, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 16:45:18.206 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-13 16:45:18.212 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 84, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:45:18.212 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-13 16:45:18.227 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 84, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:45:18.227 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-13 16:45:18.228 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:45:18.240 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:45:18.240 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:45:18.257 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:45:18.257 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:45:18.288 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 84, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 16:45:18.288 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-13 16:45:18.306 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:45:18.349 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:18.349 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 16:45:18.361 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:45:18.361 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-13 16:45:18.361 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:45:18.362 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:45:18.363 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:45:18.368 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:45:18.369 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:45:18.382 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 16:45:18.389 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-13 16:45:18.428 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:18.428 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-13 16:45:18.428 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:45:18.433 [main] GenericDao - **********Entity inserted: User{userId = '738', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:45:18.433 [main] GenericDao - **********Query database by using an ID: 738, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:18.437 [main] GenericDao - **********Query by ID Found: User{userId = '738', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:45:18.480 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:18.481 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 16:45:18.492 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:45:18.492 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:45:18.536 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:45:18.537 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-13 16:45:18.537 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:18.563 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 16:45:18.564 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:45:18.595 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 16:45:18.654 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:46:18.670 [http-nio-8080-exec-10] AddUserPage - User requested to add: User{userId = 'null', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-13 16:46:18.684 [http-nio-8080-exec-10] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-13 16:46:23.067 [http-nio-8080-exec-10] GenericDao - **********Entity inserted: User{userId = '26', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-13 16:46:33.151 [http-nio-8080-exec-7] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:46:33.823 [http-nio-8080-exec-7] GenericDao - **********Get All Query Found: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, User{userId = '18', firstName = 'Andrew', lastName = 'Park', userName = 'Apark', userPassword = 'AdminMan'}, User{userId = '26', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}]
[INFO ] 2019-05-13 16:46:43.539 [http-nio-8080-exec-3] GenericDao - **********Query database by using an ID: 26, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:46:43.548 [http-nio-8080-exec-3] GenericDao - **********Query by ID Found: User{userId = '26', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-13 16:46:43.548 [http-nio-8080-exec-3] GenericDao - **********Attempting to delete: User{userId = '26', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-13 16:46:43.563 [http-nio-8080-exec-3] GenericDao - **********Successfully deleted: User{userId = '26', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-13 16:46:43.634 [http-nio-8080-exec-3] DeleteUserPage - User ID requested to delete: User{userId = '26', firstName = 'John', lastName = 'Doe', userName = 'JohnDoe', userPassword = 'General'}
[INFO ] 2019-05-13 16:46:54.938 [http-nio-8080-exec-5] GenericDao - **********Query database by using an ID: 209, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:46:54.943 [http-nio-8080-exec-5] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 16:49:16.563 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1367',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 16:49:16.577 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-13 16:49:16.578 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-13 16:49:16.580 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 16:49:16.580 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 16:49:16.580 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1367
[INFO ] 2019-05-13 16:49:16.581 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 16:49:16.581 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 16:49:16.581 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 16:49:16.581 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-13 16:49:17.063 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:17.064 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-13 16:49:17.064 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-13 16:49:17.064 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:49:19.537 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:49:19.537 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:49:19.604 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:49:19.605 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-13 16:49:19.885 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:49:19.982 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:19.982 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-13 16:49:19.983 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:20.011 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-13 16:49:20.067 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:20.067 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-13 16:49:20.068 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:49:20.091 [main] GenericDao - **********Saved|Updated entity: User{userId = '739', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:49:20.092 [main] GenericDao - **********Query database by using an ID: 739, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:20.098 [main] GenericDao - **********Query by ID Found: User{userId = '739', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 16:49:20.099 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:20.112 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:49:20.114 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-13 16:49:20.116 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:49:20.134 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:49:20.134 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:20.147 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 16:49:20.224 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:20.225 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-13 16:49:20.226 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-13 16:49:20.265 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:49:20.266 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:49:20.336 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:20.336 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-13 16:49:20.337 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 16:49:20.362 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:49:20.428 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:20.429 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-13 16:49:20.430 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:20.442 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:49:20.442 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:20.464 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:49:20.464 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:49:20.464 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:20.482 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:49:20.482 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-13T16:49:20.430, ingredients = []}
[INFO ] 2019-05-13 16:49:20.541 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:20.541 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-13 16:49:20.542 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:20.589 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 16:49:20.589 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 16:49:20.606 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:49:20.607 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:49:20.712 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:20.713 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-13 16:49:20.714 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:49:20.794 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:49:20.880 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:20.881 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-13 16:49:20.881 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:20.886 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:49:20.887 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-13 16:49:20.903 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:49:20.904 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:49:20.908 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:49:20.918 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:49:20.920 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 16:49:20.926 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:20.933 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 16:49:20.987 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:20.988 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-13 16:49:20.988 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:21.107 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 16:49:21.176 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:21.176 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-13 16:49:21.176 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 16:49:21.239 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:49:21.331 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:21.332 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-13 16:49:21.332 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:49:21.336 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:49:21.336 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:49:21.336 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:49:21.338 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:49:21.341 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 16:49:21.345 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 16:49:21.387 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:21.387 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-13 16:49:21.388 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:21.397 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:49:21.397 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:49:21.388, ingredients = []}
[INFO ] 2019-05-13 16:49:21.397 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:49:21.388, ingredients = []}
[INFO ] 2019-05-13 16:49:21.404 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 618, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:49:21.388, ingredients = []}
[INFO ] 2019-05-13 16:49:21.404 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-13 16:49:21.404 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-13 16:49:21.419 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:49:21.421 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:49:21.429 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:49:21.430 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-13 16:49:21.445 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 618, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T16:49:21, ingredients = []}]
[INFO ] 2019-05-13 16:49:21.495 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:21.495 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-13 16:49:21.495 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:21.503 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 16:49:21.504 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-13 16:49:21.526 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:49:21.527 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-13 16:49:21.538 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-13 16:49:21.539 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-13 16:49:21.552 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:49:21.552 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:49:21.553 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:49:21.580 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 174, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 16:49:21.580 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:49:21.615 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 174, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:49:21.616 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:49:21.646 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 174, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:49:21.646 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 16:49:21.672 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 174, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 16:49:21.746 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:21.747 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-13 16:49:21.747 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:49:21.758 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 85, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:49:21.759 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:49:21.805 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 85, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 16:49:21.806 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-13 16:49:21.811 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 85, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:49:21.811 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-13 16:49:21.823 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 85, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 16:49:21.823 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-13 16:49:21.823 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:49:21.834 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 16:49:21.834 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:49:21.846 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:49:21.846 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 16:49:21.888 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 85, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 16:49:21.888 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-13 16:49:21.895 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 16:49:21.950 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:21.950 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 16:49:21.962 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:49:21.962 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-13 16:49:21.963 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 16:49:21.963 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:49:21.964 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:49:21.969 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:49:21.971 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:49:21.980 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 16:49:21.986 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-13 16:49:22.024 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:22.025 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-13 16:49:22.025 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:49:22.030 [main] GenericDao - **********Entity inserted: User{userId = '740', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:49:22.030 [main] GenericDao - **********Query database by using an ID: 740, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:22.034 [main] GenericDao - **********Query by ID Found: User{userId = '740', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 16:49:22.075 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:22.076 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 16:49:22.098 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:49:22.098 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 16:49:22.138 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:49:22.139 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-13 16:49:22.139 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:22.161 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 16:49:22.161 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:49:22.189 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 16:49:22.227 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 16:50:23.804 [http-nio-8080-exec-10] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:50:28.618 [http-nio-8080-exec-10] GenericDao - **********Get All Query Found: [User{userId = '8', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'AdminMan'}, User{userId = '9', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'AdminMan'}, User{userId = '10', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'General'}, User{userId = '11', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'General'}, User{userId = '13', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'General'}, User{userId = '14', firstName = 'Thor', lastName = 'Odinson', userName = 'Thor33', userPassword = 'General'}, User{userId = '15', firstName = 'Iron', lastName = 'Man', userName = 'Iman33', userPassword = 'General'}, User{userId = '16', firstName = 'Star', lastName = 'Lord', userName = 'LordOfStars', userPassword = 'General'}, User{userId = '18', firstName = 'Andrew', lastName = 'Park', userName = 'Apark', userPassword = 'AdminMan'}]
[INFO ] 2019-05-13 16:50:52.281 [http-nio-8080-exec-6] GenericDao - **********Query database by using an ID: 230, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 16:50:52.295 [http-nio-8080-exec-6] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 16:51:06.560 [http-nio-8080-exec-1] SearchRecipes - $$$$$$$$$$ New Recipe Search term recieved: pad+thai
[INFO ] 2019-05-13 16:51:08.406 [http-nio-8080-exec-1] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'pad thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1367',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 16:51:08.408 [http-nio-8080-exec-1] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-13 16:51:08.409 [http-nio-8080-exec-1] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-13 16:51:08.412 [http-nio-8080-exec-1] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 16:51:08.412 [http-nio-8080-exec-1] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 16:51:08.412 [http-nio-8080-exec-1] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1367
[INFO ] 2019-05-13 16:51:08.413 [http-nio-8080-exec-1] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 16:51:08.413 [http-nio-8080-exec-1] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 16:51:08.413 [http-nio-8080-exec-1] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 16:51:08.415 [http-nio-8080-exec-1] SearchRecipes - $$$$$$$$$$ New Recipe Search found: [Classic Pad Thai, Shrimp Pad-Thai, Pad Thai, Pad Thai, Shrimp Pad Thai, Chicken Pad Thai, Pad Thai, Quick Shrimp Pad Thai, Shrimp Pad Thai, Pad Thai]
[INFO ] 2019-05-13 17:27:47.259 [main] YummlyDataGrabber - $$$$$$$$$$ Criteria Request returned Object: Criteria{facetCounts = 'FacetCounts{}',criteria = 'Criteria{facetCounts = 'null',criteria = 'null',attribution = 'null',matches = 'null',totalMatchCount = '0',q = 'Pad Thai',allowedIngredient = 'null',excludedIngredient = 'null'}',attribution = 'Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}',matches = '[MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]',totalMatchCount = '1367',q = 'null',allowedIngredient = 'null',excludedIngredient = 'null'}
[INFO ] 2019-05-13 17:27:47.272 [main] YummlyDataGrabber - $$$$$$$$$$ Ingredients: minced garlic
[INFO ] 2019-05-13 17:27:47.273 [main] YummlyDataGrabber - $$$$$$$$$$ Matches: [MatchesItem{recipeName = 'Classic Pad Thai',flavors = 'null',sourceDisplayName = 'Taste',smallImageUrls = '[https://lh3.googleusercontent.com/n6-iEQ-eB_tZ2xZ_9MQ7VrviKyNUG22WwXOrQ4sCnoc3k_R3ROGhVruW2nf74SqKiqTYVpIHj4WEVPROsUEBnH0=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9YxdRCk-f2qJ6aVEuyFIfBOyK2ae_qMABx-WAboDFPkt-V_4rk3OCW6zqbBGDlq8XkPBo7v7m_FMoqhaRBHLM0=s90-c'}',ingredients = '[minced garlic, thai chiles, palm sugar, tamarind paste, asian fish sauce, fresh lime juice, pad thai noodles, canola oil, large shrimp, red pepper flakes, eggs, extra firm tofu, carrots, bean sprouts, green onions, cilantro leaves, roasted peanuts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Classic-Pad-Thai-2151767'}, MatchesItem{recipeName = 'Shrimp Pad-Thai',flavors = 'null',sourceDisplayName = 'simple.artistic.cooking',smallImageUrls = '[https://lh3.googleusercontent.com/THkysjs-7NkPHvVlAHnMQ8QJbB83_v7glyf_LjGs6buHIusQixQ5OzzNrfiTxVUxuqbHXn4MHZ6gXJ4FN3u7qBU=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/F-3Ds9UUGjz6puJq4xVBr4ISkYWN2gxjRQHpwph7YLG54JSL13A0cJVVsErotaNDg8JPdubKEE0iv1-kTiSt=s90-c'}',ingredients = '[rice noodles, low sodium soy sauce, fish sauce, fresh lime juice, dark brown sugar, Sriracha, crushed red pepper flakes, peanut oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh cilantro, limes, ginger, unsalted peanuts]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-2694178'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'null',sourceDisplayName = 'Bookcooker',smallImageUrls = '[https://lh3.googleusercontent.com/oRA3RBaVweVu-mbgLigmJBT1a5dK8mZGJgWBijAIz5kSfGy5ctOulTP3iF7HCJR3d3rnK2h2H0BEztVoGAjb3j4=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/GHOVr9l6K3s3_MIlQRGmGjE1cLy-Xnvlj94n3-RF7JdYXM-hWfFXtAJqPIkfxHTZAAbiVjeA-F57kRpXHJ7-ww=s90-c'}',ingredients = '[pad thai noodles, raw sugar, tamarind paste, fish sauce, rice vinegar, minced ginger, minced garlic, shallot, lemongrass, peanut oil, large eggs, cooked shrimp, extra firm tofu, scallions, peanuts, bean sprouts, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1753549'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.3333333333333333',sweet = '0.16666666666666666',sour = '0.3333333333333333',bitter = '0.16666666666666666',piquant = '0.6666666666666666'}',sourceDisplayName = 'The Hungry Mouse',smallImageUrls = '[https://lh3.googleusercontent.com/kjWQ0yDHnfexuAGuUUb3pkrELmSDKiox3NVVVcf2qUNac9z4GdWsXu30RQomuRLuDXWUoNAJkDA-oyXOGyeT=s90]',totalTimeInSeconds = '1800',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/taNW2mFGX9SDg4tgPbUjD5VyOulKfgmBf07EgFKYxXy1wdJXSrvZbGIKA0dYfKhKEgid5NprMS5vrv9GlwfnfA=s90-c'}',ingredients = '[rice noodles, boiling water, vegetable oil, cilantro, red chile, large shrimp, shallots, large eggs, sugar, oyster sauce, Thai fish sauce, fresh lime juice, bean sprouts, scallions, unsalted roasted peanuts, lime]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-1764933'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'A Day In The Kitchen',smallImageUrls = '[https://lh3.googleusercontent.com/GlwJwX-yAdImsrz97yzYyRAGSlPAXKIk8Bj7itYPzjLUDvmoXnBBF58avmrlL1DlnHTsB_HgQfiAndOT_cmr5mI=s90]',totalTimeInSeconds = '3600',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/A9o1lAlM-DruGaSqqvBMNbEwDQjkKAaT88P84Z86YQaEicB206-ria1E6xnNUeq3kOgjWmvs5kgIlh-jEUOQ=s90-c'}',ingredients = '[pad thai noodles, deveined shrimp, eggs, small carrot, green onion, garlic cloves, light olive oil, water, tamarind paste, oyster sauce, coconut sugar, fish sauce, soy sauce, bean sprouts, chopped peanuts, dried chili flakes, lime wedges]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Shrimp-Pad-Thai-2511725'}, MatchesItem{recipeName = 'Chicken Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.8333333333333334',bitter = '0.6666666666666666',piquant = '0.5'}',sourceDisplayName = 'Cooking Classy',smallImageUrls = '[https://lh3.googleusercontent.com/wxHAOLhlPjO1Vm0nUPYfLdhlSY9fy-_LiJheciGzbVSmFY3TwK0vUD6Squ3EbFslSyzfJm_LxV8yO2mg8GoZ=s90]',totalTimeInSeconds = '2100',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'https://lh3.googleusercontent.com/e2DuGFKLDaj_lzdDoTUQSHq-9KeUFtlsv7-W2meNBkzn42n308SAqVC1W1BEMw_zFkAg_K1SIvAg-EFcEbcREA=s90-c'}',ingredients = '[rice noodles, boneless, skinless chicken breasts, vegetable oil, dark brown sugar, soy sauce, rice vinegar, lime juice, fish sauce, red bell pepper, matchstick carrots, garlic, green onions, bean sprouts, large eggs, unsalted peanuts, cilantro, red pepper flakes, sesame seeds]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Asian]'}',id = 'Chicken-Pad-Thai-2213155'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.3333333333333333',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.3333333333333333',bitter = '0.6666666666666666',piquant = '0.3333333333333333'}',sourceDisplayName = 'From Jessica's Kitchen',smallImageUrls = '[http://lh5.ggpht.com/tG9DQTsQN-Q7Vgy7mt0QAEDGtpy5xIjucpNpemEpZ4FwhrhvlN-7PoNF3-ZYRBtRzXCvv8VtuxjP2py7o9PhTrY=s90]',totalTimeInSeconds = '2400',rating = '4',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh5.ggpht.com/2okQfHyuVIWk5uokYUkxoKUcQGvWkoY0QMbDClsnhfFj8I125HhW-zO7TFmsSusOiqRbFJoZ8cR6hpwxJM8v1jM=s90-c'}',ingredients = '[fresh lime juice, sugar, fish sauce, chili sauce, tamarind paste, brown sugar, chicken stock, red pepper flakes, kosher salt, vegetable oil, garlic cloves, shallots, chicken, shrimp, eggs, bean sprouts, fresh cilantro, roasted peanuts, scallions, rice noodles]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Pad-Thai-972593'}, MatchesItem{recipeName = 'Quick Shrimp Pad Thai',flavors = 'null',sourceDisplayName = 'Food & Wine',smallImageUrls = '[http://lh3.googleusercontent.com/WFJa5dApcA64f4YS5W7w-Q38pzXL8e5f1f7QNKLW9NrokqF4z5_T0k8Q01eOgECYojSj5ritfz49OYQMr3_CxS4=s90]',totalTimeInSeconds = '1800',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/18irSqmW3lj0CrrGnEUn9FaiyuzU5CLxMAYeRU-U43knhaaXzDW6hOvw_FK0uEWkZB8VrESVnd6J6WMEI1wBnow=s90-c'}',ingredients = '[thai noodles, asian fish sauce, light brown sugar, fresh lime juice, Thai bird chiles, canola oil, shallots, large garlic cloves, medium shrimp, large eggs, scallions, roasted peanuts, bean sprouts, chopped cilantro]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Quick-Shrimp-Pad-Thai-1095426'}, MatchesItem{recipeName = 'Shrimp Pad Thai',flavors = 'Flavors{meaty = '0.16666666666666666',salty = '0.8333333333333334',sweet = '0.5',sour = '0.3333333333333333',bitter = '0.8333333333333334',piquant = '0.6666666666666666'}',sourceDisplayName = 'MyRecipes',smallImageUrls = '[http://lh3.googleusercontent.com/X3vmGqU0FQfHiWa-RXC2H8_j5eP7YlaMaekrKHYuyqNt8PUJyTY-OKGQemj7y-q4DoGLL9krhmfCwwpE2_VHsw=s90]',totalTimeInSeconds = '1500',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh3.googleusercontent.com/PEwp_Rt5ikN1kriUXm34UMwVMINSK3L9GEecCkGX900bH6FIQYMH9ex7FlqAADz_qZmpZHe4mG_xFyrxs0S_=s90-c'}',ingredients = '[rice noodles, dark brown sugar, lower sodium soy sauce, fish sauce, fresh lime juice, Sriracha, canola oil, green onion, large shrimp, garlic cloves, bean sprouts, unsalted dry roasted peanuts, fresh basil]',attributes = 'Attributes{course = '[Main Dishes]',holiday = 'null',cuisine = '[Thai, Asian]'}',id = 'Shrimp-Pad-Thai-1085805'}, MatchesItem{recipeName = 'Pad Thai',flavors = 'Flavors{meaty = '0.5',salty = '0.8333333333333334',sweet = '0.3333333333333333',sour = '0.16666666666666666',bitter = '0.8333333333333334',piquant = '0.16666666666666666'}',sourceDisplayName = 'Williams-Sonoma',smallImageUrls = '[http://lh4.ggpht.com/cNeTmf82YRoFFXbJ7kpBIZAZ1tOKGtMau_kEzLZcHuCsoeEL7GcoPhPVoTDKpnmpJL5X_bxPoKZm9lU_ltaS=s90]',totalTimeInSeconds = '600',rating = '3',imageUrlsBySize = 'ImageUrlsBySize{90 = 'http://lh4.ggpht.com/bnrxERK9dvDKbsEb7PabRSFC-n2VXlWXj3_2GLtjtVmmAhZoFikVq7CtggANrTwYz_LdidpSFCcdC6cWKdUS_g=s90-c'}',ingredients = '[rice noodles, asian fish sauce, fresh lime juice, sugar, canola oil, medium shrimp, garlic cloves, red pepper flakes, eggs, bean sprouts, unsalted roasted peanuts, sliced green onions, chopped fresh cilantro, chopped fresh mint]',attributes = 'Attributes{course = 'null',holiday = 'null',cuisine = '[Asian, Thai]'}',id = 'Pad-Thai-641068'}]
[INFO ] 2019-05-13 17:27:47.275 [main] YummlyDataGrabber - $$$$$$$$$$ Attribution: Attribution{logo = 'https://static.yummly.co/api-logo.png',html = 'Recipe search powered by <a href='http://www.yummly.co/recipes'><img alt='Yummly' src='https://static.yummly.co/api-logo.png'/></a>',text = 'Recipe search powered by Yummly',url = 'http://www.yummly.co/recipes/'}
[INFO ] 2019-05-13 17:27:47.275 [main] YummlyDataGrabber - $$$$$$$$$$ Facet Counts: FacetCounts{}
[INFO ] 2019-05-13 17:27:47.275 [main] YummlyDataGrabber - $$$$$$$$$$ Total Match Count: 1367
[INFO ] 2019-05-13 17:27:47.275 [main] YummlyDataGrabber - $$$$$$$$$$ Allowed Ingredients: null
[INFO ] 2019-05-13 17:27:47.276 [main] YummlyDataGrabber - $$$$$$$$$$ Excluded Ingredients: null
[INFO ] 2019-05-13 17:27:47.276 [main] YummlyDataGrabber - $$$$$$$$$$ Q: null
[INFO ] 2019-05-13 17:27:47.276 [main] TestYummlyApi - Found Criteria from Q: Classic Pad Thai
[INFO ] 2019-05-13 17:27:47.721 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:47.722 [main] GenericDaoTest - ^^^^^^^^^^Starting Update Grocery List Test
[INFO ] 2019-05-13 17:27:47.723 [main] GenericDaoTest - ^^^^^^^^^^Starting Grocery List update process
[INFO ] 2019-05-13 17:27:47.725 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 17:27:50.371 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 17:27:50.372 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 17:27:50.470 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 17:27:50.471 [main] GenericDao - **********Querying grocery list by user id: 1
[INFO ] 2019-05-13 17:27:50.741 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Favorite Week, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 17:27:50.815 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:50.816 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by User ID.
[INFO ] 2019-05-13 17:27:50.817 [main] GenericDao - **********Query database by using an ID: 3, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:50.849 [main] GenericDao - **********Query by ID Found: User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}
[INFO ] 2019-05-13 17:27:50.901 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:50.901 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Saves a new User
[INFO ] 2019-05-13 17:27:50.902 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = 'null', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 17:27:50.924 [main] GenericDao - **********Saved|Updated entity: User{userId = '741', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 17:27:50.924 [main] GenericDao - **********Query database by using an ID: 741, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:50.930 [main] GenericDao - **********Query by ID Found: User{userId = '741', firstName = 'Black', lastName = 'Widow', userName = 'WidowMaker', userPassword = 'test33'}
[INFO ] 2019-05-13 17:27:50.931 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:50.946 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}
[INFO ] 2019-05-13 17:27:50.946 [main] GenericDaoTest - ^^^^^^^^^^Starting Test That Updates an existing User
[INFO ] 2019-05-13 17:27:50.947 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 17:27:50.966 [main] GenericDao - **********Saved|Updated entity: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 17:27:50.966 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:50.982 [main] GenericDao - **********Query by ID Found: User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'CaptMarv33', userPassword = 'Test6'}
[INFO ] 2019-05-13 17:27:51.044 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:51.045 [main] GenericDaoTest - ^^^^^^^^^Starting test to get all grocery lists by grocery list name.
[INFO ] 2019-05-13 17:27:51.045 [main] GenericDao - **********Querying grocery list by grocery list name: Week 1
[INFO ] 2019-05-13 17:27:51.106 [main] GenericDao - **********Query found grocery lists by grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 17:27:51.107 [main] GenericDaoTest - ^^^^^^^^^^Test found grocery lists using grocery list name: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 17:27:51.223 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:51.223 [main] GenericDaoTest - ^^^^^^^^^^Starting Recipe request by recipe ID
[INFO ] 2019-05-13 17:27:51.224 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 17:27:51.262 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 17:27:51.337 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:51.338 [main] GenericDaoTest - ^^^^^^^^^^Starting insert recipe process
[INFO ] 2019-05-13 17:27:51.339 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:51.354 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 17:27:51.355 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:51.372 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 17:27:51.373 [main] GenericDaoTest - ^^^^^^^^^^Grabbed user ID to insert a new recipe: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 17:27:51.373 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:51.392 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 17:27:51.392 [main] GenericDaoTest - ^^^^^^^^^^Inserted a new recipe: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pepperoni Pizza', dateTimeCreated = 2019-05-13T17:27:51.339, ingredients = []}
[INFO ] 2019-05-13 17:27:51.448 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:51.448 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get user recipes by last name.
[INFO ] 2019-05-13 17:27:51.448 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:51.474 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 17:27:51.474 [main] GenericDao - **********Querying user recipes by ID: 1
[INFO ] 2019-05-13 17:27:51.494 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 17:27:51.495 [main] GenericDaoTest - ^^^^^^^^^^Test found recipes by user last name: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 17:27:51.554 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:51.555 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all grocery lists.
[INFO ] 2019-05-13 17:27:51.556 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 17:27:51.610 [main] GenericDao - **********Get All Query Found: [GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 3, grocerylistName = Week 2, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 4, grocerylistName = Add Ingredients Test List, user_id = 6, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 5, grocerylistName = Week 5, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 6, grocerylistName = Week 2, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 7, grocerylistName = Week 3, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 8, grocerylistName = Week 2, user_id = 2, ingredients = {[]}, userRecipes = {[]}, user = {[]} }, GroceryLists{ groceryListId = 9, grocerylistName = Week 3, user_id = 3, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 17:27:51.683 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:51.684 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a user by User ID
[INFO ] 2019-05-13 17:27:51.684 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:51.696 [main] GenericDao - **********Query by ID Found: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 17:27:51.697 [main] GenericDao - **********Querying grocery list by user id: 4
[INFO ] 2019-05-13 17:27:51.719 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 17:27:51.720 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 17:27:51.724 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 2, grocerylistName = Week 1, user_id = 4, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 17:27:51.735 [main] GenericDao - **********Attempting to delete: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 17:27:51.739 [main] GenericDao - **********Successfully deleted: User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}
[INFO ] 2019-05-13 17:27:51.745 [main] GenericDao - **********Query database by using an ID: 4, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:51.754 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 17:27:51.809 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:51.809 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all users.
[INFO ] 2019-05-13 17:27:51.809 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:51.888 [main] GenericDao - **********Get All Query Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, User{userId = '4', firstName = 'Black', lastName = 'Widow', userName = 'Tester4', userPassword = 'Test4'}, User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 17:27:51.944 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:51.945 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get all user recipes.
[INFO ] 2019-05-13 17:27:51.945 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 17:27:51.988 [main] GenericDao - **********Get All Query Found: [UserRecipes{recipeId = 1, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Tacos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 2, user = User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}, recipeTitle = 'Shrimp Larb', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 3, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Nachos', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 4, user = User{userId = '2', firstName = 'Peter', lastName = 'Parker', userName = 'Tester2', userPassword = 'Test2'}, recipeTitle = 'Swedish Meatballs', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 17:27:52.080 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:52.080 [main] GenericDaoTest - ^^^^^^^^^^Starting test to delete a grocery list by grocery list ID
[INFO ] 2019-05-13 17:27:52.080 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 17:27:52.084 [main] GenericDao - **********Query by ID Found: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 17:27:52.084 [main] GenericDaoTest - ^^^^^^^^^^Found grocery list: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 17:27:52.085 [main] GenericDao - **********Attempting to delete: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 17:27:52.086 [main] GenericDao - **********Successfully deleted: GroceryLists{ groceryListId = 1, grocerylistName = Week 1, user_id = 1, ingredients = {[]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 17:27:52.093 [main] GenericDao - **********Query database by using an ID: 1, of Type: class edu.matc.entity.GroceryList
[INFO ] 2019-05-13 17:27:52.099 [main] GenericDao - **********Query by ID Found: null
[INFO ] 2019-05-13 17:27:52.140 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:52.140 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Recipe Test
[INFO ] 2019-05-13 17:27:52.140 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:52.149 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 17:27:52.150 [main] GenericDaoTest - ^^^^^^^^^^Created user to save using save/update method: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T17:27:52.140, ingredients = []}
[INFO ] 2019-05-13 17:27:52.150 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 0, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T17:27:52.140, ingredients = []}
[INFO ] 2019-05-13 17:27:52.156 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 619, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T17:27:52.140, ingredients = []}
[INFO ] 2019-05-13 17:27:52.156 [main] GenericDaoTest - ^^^^^^^^^^Starting recipe update process
[INFO ] 2019-05-13 17:27:52.156 [main] GenericDao - **********Querying user recipes by ID: 6
[INFO ] 2019-05-13 17:27:52.174 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 11, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Fried Chicken', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 17:27:52.176 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 17:27:52.188 [main] GenericDao - **********Saved|Updated entity: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Macaroni and Cheese', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 17:27:52.188 [main] GenericDao - **********Querying user recipes by ID: 5
[INFO ] 2019-05-13 17:27:52.202 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 8, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Beef Wellington', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 9, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Pad Thai', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 619, user = User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, recipeTitle = 'Rib Eye Steak', dateTimeCreated = 2019-05-13T17:27:52, ingredients = []}]
[INFO ] 2019-05-13 17:27:52.246 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:52.246 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Grocery List Test
[INFO ] 2019-05-13 17:27:52.246 [main] GenericDao - **********Query database by using an ID: 5, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:52.253 [main] GenericDao - **********Query by ID Found: User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}
[INFO ] 2019-05-13 17:27:52.253 [main] GenericDao - **********Querying Exact Name: Carrots
[INFO ] 2019-05-13 17:27:52.274 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 17:27:52.274 [main] GenericDao - **********Querying Exact Name: Kale
[INFO ] 2019-05-13 17:27:52.281 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}
[INFO ] 2019-05-13 17:27:52.281 [main] GenericDao - **********Querying Exact Name: Onion
[INFO ] 2019-05-13 17:27:52.287 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 17:27:52.287 [main] GenericDaoTest - ^^^^^^^^^^Created Grocerylist to save using save/update method: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 17:27:52.287 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: GroceryLists{ groceryListId = null, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 17:27:52.305 [main] GenericDao - **********Saved|Updated entity: GroceryLists{ groceryListId = 175, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }
[INFO ] 2019-05-13 17:27:52.306 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 17:27:52.333 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 175, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 17:27:52.334 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 17:27:52.360 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 175, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 17:27:52.360 [main] GenericDao - **********Querying grocery list by user id: 5
[INFO ] 2019-05-13 17:27:52.401 [main] GenericDao - *********Query found grocery lists by ID: [GroceryLists{ groceryListId = 175, grocerylistName = Add Tester, user_id = 5, ingredients = {[Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}]}, userRecipes = {[]}, user = {[]} }]
[INFO ] 2019-05-13 17:27:52.464 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:52.464 [main] GenericDaoTest - ^^^^^^^^^^Starting Save or Update Ingredient Test
[INFO ] 2019-05-13 17:27:52.465 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = null, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 17:27:52.485 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 86, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 17:27:52.486 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 17:27:52.516 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 86, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 17:27:52.517 [main] GenericDao - **********Querying Exact Name: cabbage
[INFO ] 2019-05-13 17:27:52.525 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 86, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 17:27:52.526 [main] GenericDao - **********Querying Approximate Name: abba
[INFO ] 2019-05-13 17:27:52.535 [main] GenericDao - **********Query Found Object by Approximate Name: Ingredients{ingredientId = 86, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}
[INFO ] 2019-05-13 17:27:52.535 [main] GenericDaoTest - ^^^^^^^^^^Starting ingredient update process
[INFO ] 2019-05-13 17:27:52.535 [main] GenericDao - **********Query database by using an ID: 6, of Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 17:27:52.552 [main] GenericDao - **********Query by ID Found: Ingredients{ingredientId = 6, ingredientName = Carrots, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}
[INFO ] 2019-05-13 17:27:52.552 [main] GenericDao - **********Attempting to Save|Update a Entity to the Database: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 17:27:52.568 [main] GenericDao - **********Saved|Updated entity: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 17:27:52.568 [main] GenericDao - **********Starting The Get All Query From Class Type: class edu.matc.entity.Ingredients
[INFO ] 2019-05-13 17:27:52.598 [main] GenericDao - **********Get All Query Found: [Ingredients{ingredientId = 1, ingredientName = Onion, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = null}, Ingredients{ingredientId = 2, ingredientName = Kale, ingredientCategory = Leafy Green Vegetable, price = 1.99, priceMeasurementUnit = Per Bundle, brand = null}, Ingredients{ingredientId = 3, ingredientName = Can of Coconut Milk, ingredientCategory = Canned Food, price = 2.99, priceMeasurementUnit = Per 13.5 ounce can, brand = Chaokoh}, Ingredients{ingredientId = 4, ingredientName = Pork Sausage (Sweet), ingredientCategory = Meat, price = 2.5, priceMeasurementUnit = Per pound, brand = null}, Ingredients{ingredientId = 5, ingredientName = LaCroix canned seltzer water, ingredientCategory = Soft Drinks, price = 3.99, priceMeasurementUnit = 12 cans, brand = null}, Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}, Ingredients{ingredientId = 86, ingredientName = Cabbage, ingredientCategory = Leafy Green Vegetable, price = 1.2, priceMeasurementUnit = Per Pound, brand = Local}]
[INFO ] 2019-05-13 17:27:52.598 [main] GenericDao - **********Querying Exact Name: Carrot
[INFO ] 2019-05-13 17:27:52.604 [main] GenericDao - **********Query Found Object by Exact Name: Ingredients{ingredientId = 6, ingredientName = Carrot, ingredientCategory = Root Vegetable, price = 0.99, priceMeasurementUnit = Per Pound, brand = Local Farmer}
[INFO ] 2019-05-13 17:27:52.658 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:52.660 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 17:27:52.672 [main] GenericDao - **********Query found recipes by ID : [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 17:27:52.673 [main] GenericDaoTest - ^^^^^^^^^^Starting delete recipe by user ID process
[INFO ] 2019-05-13 17:27:52.673 [main] GenericDaoTest - ^^^^^^^^^^Grabbed User Recipe by User ID to delete all recipes: [UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}, UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}]
[INFO ] 2019-05-13 17:27:52.673 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 17:27:52.675 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 6, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Lamb Shank', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 17:27:52.679 [main] GenericDao - **********Attempting to delete: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 17:27:52.681 [main] GenericDao - **********Successfully deleted: UserRecipes{recipeId = 7, user = User{userId = '3', firstName = 'Captain', lastName = 'America', userName = 'Tester3', userPassword = 'Test3'}, recipeTitle = 'Braised Pork Belly', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 17:27:52.689 [main] GenericDao - **********Querying user recipes by ID: 3
[INFO ] 2019-05-13 17:27:52.697 [main] GenericDao - **********Query found recipes by ID : []
[INFO ] 2019-05-13 17:27:52.737 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:52.738 [main] GenericDaoTest - ^^^^^^^^^^Starting test to insert a user.
[INFO ] 2019-05-13 17:27:52.738 [main] GenericDao - **********Attempting to insert a Entity: User{userId = 'null', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 17:27:52.743 [main] GenericDao - **********Entity inserted: User{userId = '742', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 17:27:52.743 [main] GenericDao - **********Query database by using an ID: 742, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:52.750 [main] GenericDao - **********Query by ID Found: User{userId = '742', firstName = 'Thor', lastName = 'Odinson', userName = 'Tester7', userPassword = 'test'}
[INFO ] 2019-05-13 17:27:52.794 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:52.798 [main] GenericDao - **********Query database by using an ID: 10, of Type: class edu.matc.entity.UserRecipes
[INFO ] 2019-05-13 17:27:52.818 [main] GenericDao - **********Query by ID Found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 17:27:52.820 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a recipe by ID found: UserRecipes{recipeId = 10, user = User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}, recipeTitle = 'Bibimbap', dateTimeCreated = 2019-03-03T13:53, ingredients = []}
[INFO ] 2019-05-13 17:27:52.881 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
[INFO ] 2019-05-13 17:27:52.881 [main] GenericDaoTest - ^^^^^^^^^^Starting test to get a user by last name.
[INFO ] 2019-05-13 17:27:52.885 [main] GenericDao - **********Query Using Last Name:  Hulk, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:52.918 [main] GenericDao - **********Query by Last Name Found: [User{userId = '1', firstName = 'Incredible', lastName = 'Hulk', userName = 'Tester1', userPassword = 'Test1'}]
[INFO ] 2019-05-13 17:27:52.918 [main] GenericDao - **********Query Using Last Name:  ma, of Type: class edu.matc.entity.User
[INFO ] 2019-05-13 17:27:52.953 [main] GenericDao - **********Query by Last Name Found: [User{userId = '5', firstName = 'Ant', lastName = 'Man', userName = 'Tester5', userPassword = 'Test5'}, User{userId = '6', firstName = 'Captain', lastName = 'Marvel', userName = 'Tester6', userPassword = 'Test6'}]
[INFO ] 2019-05-13 17:27:53.016 [main] GenericDaoTest - ----------Cleaning Database with sql script for User Testing----------
